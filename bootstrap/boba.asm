format ELF64 executable 
segment readable executable 
          entry _start
          ; 5 function definition
fn_strlen: 
          push rbp
          mov rbp, rsp
          ; 7 push integer
          mov rax, 0
          push rax
          ; 8 label
while_0x0000000000000001: 
          ; 8 duplicate
          pop rax
          push rax
          push rax
          ; 8 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 8 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 8 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 8 push integer
          mov rax, 0
          push rax
          ; 8 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 8 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000001_end
          ; 9 push integer
          mov rax, 1
          push rax
          ; 9 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 8 end of while-loop
          jmp while_0x0000000000000001
while_0x0000000000000001_end: 
          ; 6 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 6 return
          ret
          ; 12 create buffer
          ; 14 function definition
fn_itos:  
          push rbp
          mov rbp, rsp
          ; 20 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 20 push integer
          mov rax, 0
          push rax
          ; 20 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 20 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000001
          ; 21 push string
          mov rax, s_1
          push rax
          ; 21 jump
          jmp end_0x0000000000000001
          ; 21 label
if_0x0000000000000001: 
          ; 23 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 24 get pointer to buffer
          mov rax, buf__itos
          push rax
          ; 24 push integer
          mov rax, 19
          push rax
          ; 24 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 25 label
while_0x0000000000000002: 
          ; 25 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 25 push integer
          mov rax, 0
          push rax
          ; 25 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 25 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 25 get pointer to buffer
          mov rax, buf__itos
          push rax
          ; 25 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 25 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 25 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000002_end
          ; 27 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 27 push integer
          mov rax, 10
          push rax
          ; 27 mod
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rdx
          ; 30 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 30 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 33 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 33 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 36 push integer
          mov rax, 1
          push rax
          ; 36 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 36 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 36 push integer
          mov rax, 10
          push rax
          ; 36 divide
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rax
          ; 36 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 25 end of while-loop
          jmp while_0x0000000000000002
while_0x0000000000000002_end: 
          ; 38 push integer
          mov rax, 1
          push rax
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 41 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 41 drop
          pop rax
          ; 23 label
end_0x0000000000000001: 
          ; 15 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 15 return
          ret
          ; 44 function definition
fn_traceback: 
          push rbp
          mov rbp, rsp
          ; 46 push integer
          mov rax, 2
          push rax
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 48 duplicate
          pop rax
          push rax
          push rax
          ; 48 push string
          mov rax, s_2
          push rax
          ; 48 push integer
          mov rax, 48
          push rax
          ; 48 push string
          mov rax, s_3
          push rax
          ; 48 push boolean
          mov rax, 1
          push rax
          ; 48 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 49 push integer
          mov rax, 1
          push rax
          ; 50 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 52 push integer
          mov rax, 2
          push rax
          ; 53 push string
          mov rax, s_4
          push rax
          ; 54 duplicate
          pop rax
          push rax
          push rax
          ; 54 push string
          mov rax, s_2
          push rax
          ; 54 push integer
          mov rax, 54
          push rax
          ; 54 push string
          mov rax, s_3
          push rax
          ; 54 push boolean
          mov rax, 1
          push rax
          ; 54 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 55 push integer
          mov rax, 1
          push rax
          ; 56 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 58 label
while_0x0000000000000003: 
          ; 58 get argument
          mov rax, rbp
          add rax, 16
          mov rbx, [rax]
          push rbx
          ; 58 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000003_end
          ; 60 push integer
          mov rax, 2
          push rax
          ; 61 get argument
          mov rax, rbp
          add rax, 40
          mov rbx, [rax]
          push rbx
          ; 62 duplicate
          pop rax
          push rax
          push rax
          ; 62 push string
          mov rax, s_2
          push rax
          ; 62 push integer
          mov rax, 62
          push rax
          ; 62 push string
          mov rax, s_3
          push rax
          ; 62 push boolean
          mov rax, 1
          push rax
          ; 62 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 63 push integer
          mov rax, 1
          push rax
          ; 64 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 65 drop
          pop rax
          ; 67 push integer
          mov rax, 2
          push rax
          ; 68 push string
          mov rax, s_5
          push rax
          ; 69 push integer
          mov rax, 7
          push rax
          ; 70 push integer
          mov rax, 1
          push rax
          ; 71 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 72 drop
          pop rax
          ; 74 push integer
          mov rax, 2
          push rax
          ; 75 get argument
          mov rax, rbp
          add rax, 32
          mov rbx, [rax]
          push rbx
          ; 75 push string
          mov rax, s_2
          push rax
          ; 75 push integer
          mov rax, 75
          push rax
          ; 75 push string
          mov rax, s_3
          push rax
          ; 75 push boolean
          mov rax, 1
          push rax
          ; 75 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 76 duplicate
          pop rax
          push rax
          push rax
          ; 76 push string
          mov rax, s_2
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_3
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 77 push integer
          mov rax, 1
          push rax
          ; 78 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 79 drop
          pop rax
          ; 81 push integer
          mov rax, 2
          push rax
          ; 82 push string
          mov rax, s_6
          push rax
          ; 83 push integer
          mov rax, 4
          push rax
          ; 84 push integer
          mov rax, 1
          push rax
          ; 85 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 86 drop
          pop rax
          ; 88 push integer
          mov rax, 2
          push rax
          ; 89 get argument
          mov rax, rbp
          add rax, 24
          mov rbx, [rax]
          push rbx
          ; 90 duplicate
          pop rax
          push rax
          push rax
          ; 90 push string
          mov rax, s_2
          push rax
          ; 90 push integer
          mov rax, 90
          push rax
          ; 90 push string
          mov rax, s_3
          push rax
          ; 90 push boolean
          mov rax, 1
          push rax
          ; 90 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 91 push integer
          mov rax, 1
          push rax
          ; 92 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 93 drop
          pop rax
          ; 95 push integer
          mov rax, 2
          push rax
          ; 96 push string
          mov rax, s_7
          push rax
          ; 97 push integer
          mov rax, 1
          push rax
          ; 98 push integer
          mov rax, 1
          push rax
          ; 99 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 100 drop
          pop rax
          ; 103 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 58 end of while-loop
          jmp while_0x0000000000000003
while_0x0000000000000003_end: 
          ; 105 push integer
          mov rax, 1
          push rax
          ; 105 push integer
          mov rax, 60
          push rax
          ; 105 syscall
          pop rax
          pop rdi
          syscall
          push rax
          ; 45 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 45 return
          ret
          ; 44 function definition
fn_write: 
          push rbp
          mov rbp, rsp
          ; 46 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 48 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 48 push string
          mov rax, s_8
          push rax
          ; 48 push integer
          mov rax, 48
          push rax
          ; 48 push string
          mov rax, s_9
          push rax
          ; 48 push boolean
          mov rax, 1
          push rax
          ; 48 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 49 push integer
          mov rax, 1
          push rax
          ; 50 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 45 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 45 return
          ret
          ; 53 function definition
fn_puts:  
          push rbp
          mov rbp, rsp
          ; 55 push integer
          mov rax, 1
          push rax
          ; 56 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 57 push string
          mov rax, s_8
          push rax
          ; 57 push integer
          mov rax, 57
          push rax
          ; 57 push string
          mov rax, s_10
          push rax
          ; 57 push boolean
          mov rax, 1
          push rax
          ; 57 call
          call fn_write
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 54 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 54 return
          ret
          ; 60 function definition
fn_error: 
          push rbp
          mov rbp, rsp
          ; 62 push integer
          mov rax, 2
          push rax
          ; 63 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 64 push string
          mov rax, s_8
          push rax
          ; 64 push integer
          mov rax, 64
          push rax
          ; 64 push string
          mov rax, s_11
          push rax
          ; 64 push boolean
          mov rax, 1
          push rax
          ; 64 call
          call fn_write
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 61 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 61 return
          ret
          ; 67 function definition
fn_exit:  
          push rbp
          mov rbp, rsp
          ; 69 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 69 push integer
          mov rax, 60
          push rax
          ; 69 syscall
          pop rax
          pop rdi
          syscall
          push rax
          ; 68 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 68 return
          ret
          ; 72 function definition
fn_raise: 
          push rbp
          mov rbp, rsp
          ; 74 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 74 push string
          mov rax, s_8
          push rax
          ; 74 push integer
          mov rax, 74
          push rax
          ; 74 push string
          mov rax, s_12
          push rax
          ; 74 push boolean
          mov rax, 1
          push rax
          ; 74 call
          call fn_traceback
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 73 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 73 return
          ret
          ; 77 function definition
fn_assert: 
          push rbp
          mov rbp, rsp
          ; 79 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 79 push boolean
          mov rax, 0
          push rax
          ; 79 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 79 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000002
          ; 80 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 80 push string
          mov rax, s_8
          push rax
          ; 80 push integer
          mov rax, 80
          push rax
          ; 80 push string
          mov rax, s_13
          push rax
          ; 80 push boolean
          mov rax, 1
          push rax
          ; 80 call
          call fn_traceback
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 80 jump
          jmp end_0x0000000000000002
          ; 80 label
if_0x0000000000000002: 
          ; 80 label
end_0x0000000000000002: 
          ; 78 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 78 return
          ret
          ; 83 function definition
fn_open:  
          push rbp
          mov rbp, rsp
          ; 85 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 86 push integer
          mov rax, 0
          push rax
          ; 88 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 88 push character
          mov rax, 114
          mov rax, 114
          push rax
          ; 88 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 88 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000003
          ; 89 push integer
          mov rax, 0
          push rax
          ; 89 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 89 jump
          jmp end_0x0000000000000003
          ; 89 label
if_0x0000000000000003: 
          ; 89 label
end_0x0000000000000003: 
          ; 90 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 90 push character
          mov rax, 119
          mov rax, 119
          push rax
          ; 90 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 90 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000004
          ; 91 push integer
          mov rax, 1
          push rax
          ; 91 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 91 push integer
          mov rax, 64
          push rax
          ; 91 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 91 push integer
          mov rax, 512
          push rax
          ; 91 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 91 jump
          jmp end_0x0000000000000004
          ; 91 label
if_0x0000000000000004: 
          ; 91 label
end_0x0000000000000004: 
          ; 93 push integer
          mov rax, 511
          push rax
          ; 94 push integer
          mov rax, 2
          push rax
          ; 95 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 97 duplicate
          pop rax
          push rax
          push rax
          ; 97 push integer
          mov rax, 0
          push rax
          ; 97 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 97 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000005
          ; 98 push string
          mov rax, s_14
          push rax
          ; 98 push string
          mov rax, s_8
          push rax
          ; 98 push integer
          mov rax, 98
          push rax
          ; 98 push string
          mov rax, s_15
          push rax
          ; 98 push boolean
          mov rax, 1
          push rax
          ; 98 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 98 jump
          jmp end_0x0000000000000005
          ; 98 label
if_0x0000000000000005: 
          ; 98 label
end_0x0000000000000005: 
          ; 84 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 84 return
          ret
          ; 100 function definition
fn_close: 
          push rbp
          mov rbp, rsp
          ; 101 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 101 push integer
          mov rax, 3
          push rax
          ; 101 syscall
          pop rax
          pop rdi
          syscall
          push rax
          ; 101 drop
          pop rax
          ; 101 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 101 return
          ret
          ; 103 function definition
fn_read:  
          push rbp
          mov rbp, rsp
          ; 105 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 105 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 105 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 105 push integer
          mov rax, 0
          push rax
          ; 105 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 106 duplicate
          pop rax
          push rax
          push rax
          ; 106 push integer
          mov rax, 0
          push rax
          ; 106 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 106 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000006
          ; 107 push string
          mov rax, s_16
          push rax
          ; 107 push string
          mov rax, s_8
          push rax
          ; 107 push integer
          mov rax, 107
          push rax
          ; 107 push string
          mov rax, s_17
          push rax
          ; 107 push boolean
          mov rax, 1
          push rax
          ; 107 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 107 jump
          jmp end_0x0000000000000006
          ; 107 label
if_0x0000000000000006: 
          ; 107 label
end_0x0000000000000006: 
          ; 104 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 104 return
          ret
          ; 110 function definition
fn_rt_sigaction: 
          push rbp
          mov rbp, rsp
          ; 112 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 112 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 112 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 112 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 112 push integer
          mov rax, 13
          push rax
          ; 112 syscall
          pop rax
          pop r10
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 push integer
          mov rax, 0
          push rax
          ; 113 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 113 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000007
          ; 114 push string
          mov rax, s_18
          push rax
          ; 114 push string
          mov rax, s_8
          push rax
          ; 114 push integer
          mov rax, 114
          push rax
          ; 114 push string
          mov rax, s_19
          push rax
          ; 114 push boolean
          mov rax, 1
          push rax
          ; 114 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 114 jump
          jmp end_0x0000000000000007
          ; 114 label
if_0x0000000000000007: 
          ; 114 label
end_0x0000000000000007: 
          ; 111 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 111 return
          ret
          ; 117 label
fn_rt_sigreturn: 
          ; 119 push integer
          mov rax, 15
          push rax
          ; 119 syscall
          pop rax
          syscall
          push rax
          ; 120 push string
          mov rax, s_20
          push rax
          ; 120 push string
          mov rax, s_8
          push rax
          ; 120 push integer
          mov rax, 120
          push rax
          ; 120 push string
          mov rax, s_21
          push rax
          ; 120 push boolean
          mov rax, 1
          push rax
          ; 120 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 118 return
          ret
          ; 130 function definition
fn_setitimer: 
          push rbp
          mov rbp, rsp
          ; 132 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 132 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 132 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 132 push integer
          mov rax, 38
          push rax
          ; 132 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 133 duplicate
          pop rax
          push rax
          push rax
          ; 133 push integer
          mov rax, 0
          push rax
          ; 133 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 133 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000008
          ; 134 push string
          mov rax, s_22
          push rax
          ; 134 push string
          mov rax, s_8
          push rax
          ; 134 push integer
          mov rax, 134
          push rax
          ; 134 push string
          mov rax, s_23
          push rax
          ; 134 push boolean
          mov rax, 1
          push rax
          ; 134 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 134 jump
          jmp end_0x0000000000000008
          ; 134 label
if_0x0000000000000008: 
          ; 134 label
end_0x0000000000000008: 
          ; 131 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 131 return
          ret
          ; 146 create buffer
          ; 148 function definition
fn_setup_signal_handler: 
          push rbp
          mov rbp, rsp
          ; 150 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 150 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 150 push integer
          mov rax, 0
          push rax
          ; 150 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 150 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 151 push integer
          mov rax, 0
          push rax
          ; 151 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 151 push integer
          mov rax, 24
          push rax
          ; 151 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 151 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 153 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 153 push integer
          mov rax, 0
          push rax
          ; 153 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 153 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000009
          ; 154 push integer
          mov rax, 0
          push rax
          ; 154 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 154 push integer
          mov rax, 8
          push rax
          ; 154 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 154 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 155 push integer
          mov rax, 0
          push rax
          ; 155 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 155 push integer
          mov rax, 16
          push rax
          ; 155 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 155 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 154 jump
          jmp end_0x0000000000000009
          ; 154 label
if_0x0000000000000009: 
          ; 157 push integer
          mov rax, 4
          push rax
          ; 157 push integer
          mov rax, 67108864
          push rax
          ; 157 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 158 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 158 push integer
          mov rax, 8
          push rax
          ; 158 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 158 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 159 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 159 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 159 push integer
          mov rax, 16
          push rax
          ; 159 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 159 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 157 label
end_0x0000000000000009: 
          ; 161 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 161 get pointer to buffer
          mov rax, buf__sigaction
          push rax
          ; 161 push integer
          mov rax, 0
          push rax
          ; 161 push integer
          mov rax, 8
          push rax
          ; 161 push string
          mov rax, s_8
          push rax
          ; 161 push integer
          mov rax, 161
          push rax
          ; 161 push string
          mov rax, s_24
          push rax
          ; 161 push boolean
          mov rax, 1
          push rax
          ; 161 call
          call fn_rt_sigaction
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 149 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 149 return
          ret
          ; 164 create buffer
          ; 166 function definition
fn_set_timer: 
          push rbp
          mov rbp, rsp
          ; 168 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 168 get pointer to buffer
          mov rax, buf__itimerval
          push rax
          ; 168 push integer
          mov rax, 0
          push rax
          ; 168 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 168 push integer
          mov rax, 0
          push rax
          ; 168 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 168 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 169 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 169 get pointer to buffer
          mov rax, buf__itimerval
          push rax
          ; 169 push integer
          mov rax, 0
          push rax
          ; 169 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 169 push integer
          mov rax, 8
          push rax
          ; 169 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 169 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 170 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 170 get pointer to buffer
          mov rax, buf__itimerval
          push rax
          ; 170 push integer
          mov rax, 16
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 push integer
          mov rax, 0
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 171 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 171 get pointer to buffer
          mov rax, buf__itimerval
          push rax
          ; 171 push integer
          mov rax, 16
          push rax
          ; 171 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 171 push integer
          mov rax, 8
          push rax
          ; 171 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 171 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 173 push integer
          mov rax, 0
          push rax
          ; 173 get pointer to buffer
          mov rax, buf__itimerval
          push rax
          ; 173 push integer
          mov rax, 0
          push rax
          ; 173 push string
          mov rax, s_8
          push rax
          ; 173 push integer
          mov rax, 173
          push rax
          ; 173 push string
          mov rax, s_25
          push rax
          ; 173 push boolean
          mov rax, 1
          push rax
          ; 173 call
          call fn_setitimer
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 167 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 167 return
          ret
          ; 176 function definition
fn_exec:  
          push rbp
          mov rbp, rsp
          ; 177 push integer
          mov rax, 57
          push rax
          ; 177 syscall
          pop rax
          syscall
          push rax
          ; 179 duplicate
          pop rax
          push rax
          push rax
          ; 179 push integer
          mov rax, 0
          push rax
          ; 179 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 179 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000000a
          ; 180 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 181 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 182 push integer
          mov rax, 0
          push rax
          ; 183 push integer
          mov rax, 59
          push rax
          ; 184 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 184 drop
          pop rax
          ; 180 jump
          jmp end_0x000000000000000a
          ; 180 label
if_0x000000000000000a: 
          ; 185 duplicate
          pop rax
          push rax
          push rax
          ; 185 push integer
          mov rax, 0
          push rax
          ; 185 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 185 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000000b
          ; 186 duplicate
          pop rax
          push rax
          push rax
          ; 186 push integer
          mov rax, 0
          push rax
          ; 186 push integer
          mov rax, 0
          push rax
          ; 186 push integer
          mov rax, 0
          push rax
          ; 186 push integer
          mov rax, 61
          push rax
          ; 186 syscall
          pop rax
          pop r10
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 186 drop
          pop rax
          ; 185 jump
          jmp end_0x000000000000000a
          ; 185 label
elif_0x000000000000000b: 
          ; 185 label
end_0x000000000000000a: 
          ; 177 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 177 return
          ret
          ; 189 function definition
fn_exec_silent: 
          push rbp
          mov rbp, rsp
          ; 190 push integer
          mov rax, 57
          push rax
          ; 190 syscall
          pop rax
          syscall
          push rax
          ; 192 duplicate
          pop rax
          push rax
          push rax
          ; 192 push integer
          mov rax, 0
          push rax
          ; 192 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 192 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000000c
          ; 193 push string
          mov rax, s_26
          push rax
          ; 193 push character
          mov rax, 114
          mov rax, 114
          push rax
          ; 193 push string
          mov rax, s_8
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_27
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_open
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 194 push integer
          mov rax, 1
          push rax
          ; 195 push integer
          mov rax, 33
          push rax
          ; 195 syscall
          pop rax
          pop rsi
          pop rdi
          syscall
          push rax
          ; 196 drop
          pop rax
          ; 198 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 199 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 200 push integer
          mov rax, 0
          push rax
          ; 201 push integer
          mov rax, 59
          push rax
          ; 202 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 202 drop
          pop rax
          ; 193 jump
          jmp end_0x000000000000000c
          ; 193 label
if_0x000000000000000c: 
          ; 203 duplicate
          pop rax
          push rax
          push rax
          ; 203 push integer
          mov rax, 0
          push rax
          ; 203 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 203 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000000d
          ; 204 duplicate
          pop rax
          push rax
          push rax
          ; 204 push integer
          mov rax, 0
          push rax
          ; 204 push integer
          mov rax, 0
          push rax
          ; 204 push integer
          mov rax, 0
          push rax
          ; 204 push integer
          mov rax, 61
          push rax
          ; 204 syscall
          pop rax
          pop r10
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 204 drop
          pop rax
          ; 203 jump
          jmp end_0x000000000000000c
          ; 203 label
elif_0x000000000000000d: 
          ; 203 label
end_0x000000000000000c: 
          ; 190 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 190 return
          ret
          ; 212 function definition
fn_socket: 
          push rbp
          mov rbp, rsp
          ; 213 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 213 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 213 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 213 push integer
          mov rax, 41
          push rax
          ; 213 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 213 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 213 return
          ret
          ; 215 function definition
fn_accept: 
          push rbp
          mov rbp, rsp
          ; 216 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 216 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 216 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 216 push integer
          mov rax, 43
          push rax
          ; 216 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 216 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 216 return
          ret
          ; 218 function definition
fn_bind:  
          push rbp
          mov rbp, rsp
          ; 219 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 219 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 219 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 219 push integer
          mov rax, 49
          push rax
          ; 219 syscall
          pop rax
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 219 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 219 return
          ret
          ; 221 function definition
fn_listen: 
          push rbp
          mov rbp, rsp
          ; 222 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 222 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 222 push integer
          mov rax, 50
          push rax
          ; 222 syscall
          pop rax
          pop rsi
          pop rdi
          syscall
          push rax
          ; 222 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 222 return
          ret
          ; 224 function definition
fn_htons: 
          push rbp
          mov rbp, rsp
          ; 225 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 225 push integer
          mov rax, 255
          push rax
          ; 225 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 225 push integer
          mov rax, 8
          push rax
          ; 225 shift left
          pop rcx
          pop rax
          shl rax, cl
          push rax
          ; 226 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 226 push integer
          mov rax, 8
          push rax
          ; 226 shift right
          pop rcx
          pop rax
          shr rax, cl
          push rax
          ; 226 push integer
          mov rax, 255
          push rax
          ; 226 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 227 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 225 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 225 return
          ret
          ; 10 function definition
fn_NULL:  
          push rbp
          mov rbp, rsp
          ; 12 push integer
          mov rax, 0
          push rax
          ; 11 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 11 return
          ret
          ; 15 function definition
fn_itohex: 
          push rbp
          mov rbp, rsp
          ; 17 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 18 duplicate
          pop rax
          push rax
          push rax
          ; 18 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 18 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 18 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 18 push integer
          mov rax, 1
          push rax
          ; 18 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 19 duplicate
          pop rax
          push rax
          push rax
          ; 19 push character
          mov rax, 120
          mov rax, 120
          push rax
          ; 19 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 19 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 19 push integer
          mov rax, 1
          push rax
          ; 19 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 21 push integer
          mov rax, 60
          push rax
          ; 22 label
while_0x0000000000000004: 
          ; 22 duplicate
          pop rax
          push rax
          push rax
          ; 22 push integer
          mov rax, 0
          push rax
          ; 22 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 22 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000004_end
          ; 23 duplicate
          pop rax
          push rax
          push rax
          ; 24 push integer
          mov rax, 15
          push rax
          ; 24 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 24 shift left
          pop rcx
          pop rax
          shl rax, cl
          push rax
          ; 25 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 25 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 26 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 26 duplicate
          pop rax
          push rax
          push rax
          ; 26 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 26 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 26 shift right
          pop rcx
          pop rax
          shr rax, cl
          push rax
          ; 28 duplicate
          pop rax
          push rax
          push rax
          ; 28 push integer
          mov rax, 0
          push rax
          ; 28 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 28 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000000e
          ; 29 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 29 duplicate
          pop rax
          push rax
          push rax
          ; 29 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 29 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 29 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 29 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 29 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 29 jump
          jmp end_0x000000000000000e
          ; 29 label
if_0x000000000000000e: 
          ; 30 duplicate
          pop rax
          push rax
          push rax
          ; 30 push integer
          mov rax, 1
          push rax
          ; 30 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 30 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000000f
          ; 31 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 31 duplicate
          pop rax
          push rax
          push rax
          ; 31 push character
          mov rax, 49
          mov rax, 49
          push rax
          ; 31 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 31 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 31 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 31 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 30 jump
          jmp end_0x000000000000000e
          ; 30 label
elif_0x000000000000000f: 
          ; 32 duplicate
          pop rax
          push rax
          push rax
          ; 32 push integer
          mov rax, 2
          push rax
          ; 32 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 32 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000010
          ; 33 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 33 duplicate
          pop rax
          push rax
          push rax
          ; 33 push character
          mov rax, 50
          mov rax, 50
          push rax
          ; 33 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 33 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 33 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 33 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 32 jump
          jmp end_0x000000000000000e
          ; 32 label
elif_0x0000000000000010: 
          ; 34 duplicate
          pop rax
          push rax
          push rax
          ; 34 push integer
          mov rax, 3
          push rax
          ; 34 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 34 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000011
          ; 35 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 35 duplicate
          pop rax
          push rax
          push rax
          ; 35 push character
          mov rax, 51
          mov rax, 51
          push rax
          ; 35 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 35 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 35 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 35 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 34 jump
          jmp end_0x000000000000000e
          ; 34 label
elif_0x0000000000000011: 
          ; 36 duplicate
          pop rax
          push rax
          push rax
          ; 36 push integer
          mov rax, 4
          push rax
          ; 36 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 36 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000012
          ; 37 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 37 duplicate
          pop rax
          push rax
          push rax
          ; 37 push character
          mov rax, 52
          mov rax, 52
          push rax
          ; 37 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 37 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 37 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 37 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 36 jump
          jmp end_0x000000000000000e
          ; 36 label
elif_0x0000000000000012: 
          ; 38 duplicate
          pop rax
          push rax
          push rax
          ; 38 push integer
          mov rax, 5
          push rax
          ; 38 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 38 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000013
          ; 39 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 39 duplicate
          pop rax
          push rax
          push rax
          ; 39 push character
          mov rax, 53
          mov rax, 53
          push rax
          ; 39 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 39 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 39 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 39 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 38 jump
          jmp end_0x000000000000000e
          ; 38 label
elif_0x0000000000000013: 
          ; 40 duplicate
          pop rax
          push rax
          push rax
          ; 40 push integer
          mov rax, 6
          push rax
          ; 40 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 40 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000014
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 41 duplicate
          pop rax
          push rax
          push rax
          ; 41 push character
          mov rax, 54
          mov rax, 54
          push rax
          ; 41 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 41 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 40 jump
          jmp end_0x000000000000000e
          ; 40 label
elif_0x0000000000000014: 
          ; 42 duplicate
          pop rax
          push rax
          push rax
          ; 42 push integer
          mov rax, 7
          push rax
          ; 42 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 42 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000015
          ; 43 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 43 duplicate
          pop rax
          push rax
          push rax
          ; 43 push character
          mov rax, 55
          mov rax, 55
          push rax
          ; 43 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 43 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 43 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 43 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 42 jump
          jmp end_0x000000000000000e
          ; 42 label
elif_0x0000000000000015: 
          ; 44 duplicate
          pop rax
          push rax
          push rax
          ; 44 push integer
          mov rax, 8
          push rax
          ; 44 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 44 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000016
          ; 45 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 45 duplicate
          pop rax
          push rax
          push rax
          ; 45 push character
          mov rax, 56
          mov rax, 56
          push rax
          ; 45 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 45 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 45 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 45 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 44 jump
          jmp end_0x000000000000000e
          ; 44 label
elif_0x0000000000000016: 
          ; 46 duplicate
          pop rax
          push rax
          push rax
          ; 46 push integer
          mov rax, 9
          push rax
          ; 46 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 46 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000017
          ; 47 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 47 duplicate
          pop rax
          push rax
          push rax
          ; 47 push character
          mov rax, 57
          mov rax, 57
          push rax
          ; 47 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 47 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 47 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 47 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 46 jump
          jmp end_0x000000000000000e
          ; 46 label
elif_0x0000000000000017: 
          ; 48 duplicate
          pop rax
          push rax
          push rax
          ; 48 push integer
          mov rax, 10
          push rax
          ; 48 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 48 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000018
          ; 49 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 49 duplicate
          pop rax
          push rax
          push rax
          ; 49 push character
          mov rax, 97
          mov rax, 97
          push rax
          ; 49 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 49 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 49 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 49 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 48 jump
          jmp end_0x000000000000000e
          ; 48 label
elif_0x0000000000000018: 
          ; 50 duplicate
          pop rax
          push rax
          push rax
          ; 50 push integer
          mov rax, 11
          push rax
          ; 50 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 50 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000019
          ; 51 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 51 duplicate
          pop rax
          push rax
          push rax
          ; 51 push character
          mov rax, 98
          mov rax, 98
          push rax
          ; 51 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 51 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 51 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 51 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 50 jump
          jmp end_0x000000000000000e
          ; 50 label
elif_0x0000000000000019: 
          ; 52 duplicate
          pop rax
          push rax
          push rax
          ; 52 push integer
          mov rax, 12
          push rax
          ; 52 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 52 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000001a
          ; 53 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 53 duplicate
          pop rax
          push rax
          push rax
          ; 53 push character
          mov rax, 99
          mov rax, 99
          push rax
          ; 53 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 53 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 53 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 53 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 52 jump
          jmp end_0x000000000000000e
          ; 52 label
elif_0x000000000000001a: 
          ; 54 duplicate
          pop rax
          push rax
          push rax
          ; 54 push integer
          mov rax, 13
          push rax
          ; 54 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 54 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000001b
          ; 55 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 55 duplicate
          pop rax
          push rax
          push rax
          ; 55 push character
          mov rax, 100
          mov rax, 100
          push rax
          ; 55 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 55 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 55 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 55 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 54 jump
          jmp end_0x000000000000000e
          ; 54 label
elif_0x000000000000001b: 
          ; 56 duplicate
          pop rax
          push rax
          push rax
          ; 56 push integer
          mov rax, 14
          push rax
          ; 56 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 56 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000001c
          ; 57 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 57 duplicate
          pop rax
          push rax
          push rax
          ; 57 push character
          mov rax, 101
          mov rax, 101
          push rax
          ; 57 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 57 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 57 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 57 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 56 jump
          jmp end_0x000000000000000e
          ; 56 label
elif_0x000000000000001c: 
          ; 58 duplicate
          pop rax
          push rax
          push rax
          ; 58 push integer
          mov rax, 15
          push rax
          ; 58 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 58 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000001d
          ; 59 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 59 duplicate
          pop rax
          push rax
          push rax
          ; 59 push character
          mov rax, 102
          mov rax, 102
          push rax
          ; 59 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 59 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 59 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 59 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 58 jump
          jmp end_0x000000000000000e
          ; 58 label
elif_0x000000000000001d: 
          ; 58 label
end_0x000000000000000e: 
          ; 60 drop
          pop rax
          ; 60 push integer
          mov rax, 4
          push rax
          ; 60 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 60 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 60 push integer
          mov rax, 1
          push rax
          ; 60 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 60 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 22 end of while-loop
          jmp while_0x0000000000000004
while_0x0000000000000004_end: 
          ; 61 drop
          pop rax
          ; 61 push integer
          mov rax, 0
          push rax
          ; 61 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 61 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 16 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 16 return
          ret
          ; 64 function definition
fn_max:   
          push rbp
          mov rbp, rsp
          ; 66 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 66 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 66 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 66 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000001e
          ; 67 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 67 jump
          jmp end_0x000000000000001e
          ; 67 label
if_0x000000000000001e: 
          ; 69 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 69 label
end_0x000000000000001e: 
          ; 65 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 65 return
          ret
          ; 72 function definition
fn_strcpy: 
          push rbp
          mov rbp, rsp
          ; 74 push integer
          mov rax, 0
          push rax
          ; 75 label
while_0x0000000000000005: 
          ; 75 duplicate
          pop rax
          push rax
          push rax
          ; 75 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 75 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 75 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 75 push integer
          mov rax, 0
          push rax
          ; 75 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 75 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000005_end
          ; 76 duplicate
          pop rax
          push rax
          push rax
          ; 76 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 76 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 76 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 76 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 76 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 77 push integer
          mov rax, 1
          push rax
          ; 77 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 75 end of while-loop
          jmp while_0x0000000000000005
while_0x0000000000000005_end: 
          ; 78 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 78 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 78 push integer
          mov rax, 0
          push rax
          ; 78 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 78 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 79 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 73 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 73 return
          ret
          ; 82 function definition
fn_replace: 
          push rbp
          mov rbp, rsp
          ; 84 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 85 label
while_0x0000000000000006: 
          ; 85 duplicate
          pop rax
          push rax
          push rax
          ; 85 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 85 push integer
          mov rax, 0
          push rax
          ; 85 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 85 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000006_end
          ; 86 duplicate
          pop rax
          push rax
          push rax
          ; 86 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 86 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 86 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 86 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000001f
          ; 87 duplicate
          pop rax
          push rax
          push rax
          ; 87 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 87 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 87 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 87 jump
          jmp end_0x000000000000001f
          ; 87 label
if_0x000000000000001f: 
          ; 87 label
end_0x000000000000001f: 
          ; 88 push integer
          mov rax, 1
          push rax
          ; 88 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 end of while-loop
          jmp while_0x0000000000000006
while_0x0000000000000006_end: 
          ; 89 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 83 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 83 return
          ret
          ; 92 function definition
fn_startswith: 
          push rbp
          mov rbp, rsp
          ; 94 push integer
          mov rax, 0
          push rax
          ; 95 label
while_0x0000000000000007: 
          ; 95 duplicate
          pop rax
          push rax
          push rax
          ; 95 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 95 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 95 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 95 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 95 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 95 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 95 push integer
          mov rax, 0
          push rax
          ; 95 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 95 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 95 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000007_end
          ; 96 push integer
          mov rax, 1
          push rax
          ; 96 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 end of while-loop
          jmp while_0x0000000000000007
while_0x0000000000000007_end: 
          ; 97 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 97 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 97 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 97 push integer
          mov rax, 0
          push rax
          ; 97 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 93 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 93 return
          ret
          ; 100 function definition
fn_streq: 
          push rbp
          mov rbp, rsp
          ; 102 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 102 push string
          mov rax, s_28
          push rax
          ; 102 push integer
          mov rax, 102
          push rax
          ; 102 push string
          mov rax, s_29
          push rax
          ; 102 push boolean
          mov rax, 1
          push rax
          ; 102 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 102 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 102 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 102 push string
          mov rax, s_28
          push rax
          ; 102 push integer
          mov rax, 102
          push rax
          ; 102 push string
          mov rax, s_29
          push rax
          ; 102 push boolean
          mov rax, 1
          push rax
          ; 102 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 102 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 102 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 102 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000020
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 jump
          jmp end_0x0000000000000020
          ; 103 label
if_0x0000000000000020: 
          ; 104 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 104 push string
          mov rax, s_28
          push rax
          ; 104 push integer
          mov rax, 104
          push rax
          ; 104 push string
          mov rax, s_29
          push rax
          ; 104 push boolean
          mov rax, 1
          push rax
          ; 104 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 104 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 104 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 104 push string
          mov rax, s_28
          push rax
          ; 104 push integer
          mov rax, 104
          push rax
          ; 104 push string
          mov rax, s_29
          push rax
          ; 104 push boolean
          mov rax, 1
          push rax
          ; 104 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 104 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 104 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 104 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000021
          ; 105 push boolean
          mov rax, 0
          push rax
          ; 104 jump
          jmp end_0x0000000000000020
          ; 104 label
elif_0x0000000000000021: 
          ; 106 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 106 push string
          mov rax, s_28
          push rax
          ; 106 push integer
          mov rax, 106
          push rax
          ; 106 push string
          mov rax, s_29
          push rax
          ; 106 push boolean
          mov rax, 1
          push rax
          ; 106 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 106 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 106 push string
          mov rax, s_28
          push rax
          ; 106 push integer
          mov rax, 106
          push rax
          ; 106 push string
          mov rax, s_29
          push rax
          ; 106 push boolean
          mov rax, 1
          push rax
          ; 106 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 106 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 106 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000022
          ; 107 push boolean
          mov rax, 0
          push rax
          ; 108 push integer
          mov rax, 0
          push rax
          ; 109 label
while_0x0000000000000008: 
          ; 109 duplicate
          pop rax
          push rax
          push rax
          ; 109 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 109 push integer
          mov rax, 0
          push rax
          ; 109 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 109 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000008_end
          ; 110 duplicate
          pop rax
          push rax
          push rax
          ; 110 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 110 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 110 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 111 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 111 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 111 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 111 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 111 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 112 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 112 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 112 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 113 push integer
          mov rax, 1
          push rax
          ; 113 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 end of while-loop
          jmp while_0x0000000000000008
while_0x0000000000000008_end: 
          ; 114 drop
          pop rax
          ; 115 push boolean
          mov rax, 0
          push rax
          ; 115 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 106 jump
          jmp end_0x0000000000000020
          ; 106 label
elif_0x0000000000000022: 
          ; 117 push boolean
          mov rax, 0
          push rax
          ; 117 label
end_0x0000000000000020: 
          ; 101 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 101 return
          ret
          ; 137 create buffer
          ; 138 create buffer
          ; 141 create buffer
          ; 142 create buffer
          ; 144 create buffer
          ; 146 function definition
fn_verify_memory: 
          push rbp
          mov rbp, rsp
          ; 148 get pointer to buffer
          mov rax, buf_VERIFY_MEMORY
          push rax
          ; 148 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 148 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000023
          ; 149 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 149 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 149 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000024
          ; 150 push string
          mov rax, s_30
          push rax
          ; 150 push string
          mov rax, s_28
          push rax
          ; 150 push integer
          mov rax, 150
          push rax
          ; 150 push string
          mov rax, s_31
          push rax
          ; 150 push boolean
          mov rax, 1
          push rax
          ; 150 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 150 jump
          jmp end_0x0000000000000024
          ; 150 label
if_0x0000000000000024: 
          ; 150 label
end_0x0000000000000024: 
          ; 152 get pointer to buffer
          mov rax, buf_root_page
          push rax
          ; 153 label
while_0x0000000000000009: 
          ; 153 duplicate
          pop rax
          push rax
          push rax
          ; 153 push integer
          mov rax, 0
          push rax
          ; 153 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 153 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 153 push string
          mov rax, s_28
          push rax
          ; 153 push integer
          mov rax, 153
          push rax
          ; 153 push string
          mov rax, s_31
          push rax
          ; 153 push boolean
          mov rax, 1
          push rax
          ; 153 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 153 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 153 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000009_end
          ; 154 duplicate
          pop rax
          push rax
          push rax
          ; 154 push integer
          mov rax, 0
          push rax
          ; 154 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 154 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 156 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 156 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 156 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000025
          ; 157 push string
          mov rax, s_32
          push rax
          ; 157 push string
          mov rax, s_28
          push rax
          ; 157 push integer
          mov rax, 157
          push rax
          ; 157 push string
          mov rax, s_31
          push rax
          ; 157 push boolean
          mov rax, 1
          push rax
          ; 157 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 158 duplicate
          pop rax
          push rax
          push rax
          ; 158 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 158 push string
          mov rax, s_28
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_31
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 158 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 158 push string
          mov rax, s_28
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_31
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 159 push string
          mov rax, s_7
          push rax
          ; 159 push string
          mov rax, s_28
          push rax
          ; 159 push integer
          mov rax, 159
          push rax
          ; 159 push string
          mov rax, s_31
          push rax
          ; 159 push boolean
          mov rax, 1
          push rax
          ; 159 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 161 push string
          mov rax, s_33
          push rax
          ; 161 push string
          mov rax, s_28
          push rax
          ; 161 push integer
          mov rax, 161
          push rax
          ; 161 push string
          mov rax, s_31
          push rax
          ; 161 push boolean
          mov rax, 1
          push rax
          ; 161 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 162 duplicate
          pop rax
          push rax
          push rax
          ; 162 push integer
          mov rax, 8
          push rax
          ; 162 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 162 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 162 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 162 push string
          mov rax, s_28
          push rax
          ; 162 push integer
          mov rax, 162
          push rax
          ; 162 push string
          mov rax, s_31
          push rax
          ; 162 push boolean
          mov rax, 1
          push rax
          ; 162 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 162 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 162 push string
          mov rax, s_28
          push rax
          ; 162 push integer
          mov rax, 162
          push rax
          ; 162 push string
          mov rax, s_31
          push rax
          ; 162 push boolean
          mov rax, 1
          push rax
          ; 162 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 163 push string
          mov rax, s_7
          push rax
          ; 163 push string
          mov rax, s_28
          push rax
          ; 163 push integer
          mov rax, 163
          push rax
          ; 163 push string
          mov rax, s_31
          push rax
          ; 163 push boolean
          mov rax, 1
          push rax
          ; 163 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 165 push string
          mov rax, s_34
          push rax
          ; 165 push string
          mov rax, s_28
          push rax
          ; 165 push integer
          mov rax, 165
          push rax
          ; 165 push string
          mov rax, s_31
          push rax
          ; 165 push boolean
          mov rax, 1
          push rax
          ; 165 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 166 duplicate
          pop rax
          push rax
          push rax
          ; 166 push integer
          mov rax, 0
          push rax
          ; 166 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 166 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 166 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 166 push string
          mov rax, s_28
          push rax
          ; 166 push integer
          mov rax, 166
          push rax
          ; 166 push string
          mov rax, s_31
          push rax
          ; 166 push boolean
          mov rax, 1
          push rax
          ; 166 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 166 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 166 push string
          mov rax, s_28
          push rax
          ; 166 push integer
          mov rax, 166
          push rax
          ; 166 push string
          mov rax, s_31
          push rax
          ; 166 push boolean
          mov rax, 1
          push rax
          ; 166 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 167 push string
          mov rax, s_7
          push rax
          ; 167 push string
          mov rax, s_28
          push rax
          ; 167 push integer
          mov rax, 167
          push rax
          ; 167 push string
          mov rax, s_31
          push rax
          ; 167 push boolean
          mov rax, 1
          push rax
          ; 167 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 169 push string
          mov rax, s_35
          push rax
          ; 169 push string
          mov rax, s_28
          push rax
          ; 169 push integer
          mov rax, 169
          push rax
          ; 169 push string
          mov rax, s_31
          push rax
          ; 169 push boolean
          mov rax, 1
          push rax
          ; 169 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 170 duplicate
          pop rax
          push rax
          push rax
          ; 170 push integer
          mov rax, 16
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 170 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 170 push string
          mov rax, s_28
          push rax
          ; 170 push integer
          mov rax, 170
          push rax
          ; 170 push string
          mov rax, s_31
          push rax
          ; 170 push boolean
          mov rax, 1
          push rax
          ; 170 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 170 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 170 push string
          mov rax, s_28
          push rax
          ; 170 push integer
          mov rax, 170
          push rax
          ; 170 push string
          mov rax, s_31
          push rax
          ; 170 push boolean
          mov rax, 1
          push rax
          ; 170 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 171 push string
          mov rax, s_7
          push rax
          ; 171 push string
          mov rax, s_28
          push rax
          ; 171 push integer
          mov rax, 171
          push rax
          ; 171 push string
          mov rax, s_31
          push rax
          ; 171 push boolean
          mov rax, 1
          push rax
          ; 171 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 157 jump
          jmp end_0x0000000000000025
          ; 157 label
if_0x0000000000000025: 
          ; 157 label
end_0x0000000000000025: 
          ; 173 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 173 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 173 push integer
          mov rax, 8
          push rax
          ; 173 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 173 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 173 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 174 push string
          mov rax, s_36
          push rax
          ; 174 push string
          mov rax, s_28
          push rax
          ; 174 push integer
          mov rax, 174
          push rax
          ; 174 push string
          mov rax, s_31
          push rax
          ; 174 push boolean
          mov rax, 1
          push rax
          ; 174 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 175 duplicate
          pop rax
          push rax
          push rax
          ; 175 push integer
          mov rax, 16
          push rax
          ; 175 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 175 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 175 push integer
          mov rax, 4096
          push rax
          ; 175 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 176 push string
          mov rax, s_37
          push rax
          ; 176 push string
          mov rax, s_28
          push rax
          ; 176 push integer
          mov rax, 176
          push rax
          ; 176 push string
          mov rax, s_31
          push rax
          ; 176 push boolean
          mov rax, 1
          push rax
          ; 176 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 178 duplicate
          pop rax
          push rax
          push rax
          ; 178 push integer
          mov rax, 16
          push rax
          ; 178 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 178 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 178 push integer
          mov rax, 24
          push rax
          ; 178 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 179 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 179 push integer
          mov rax, 24
          push rax
          ; 179 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 181 duplicate
          pop rax
          push rax
          push rax
          ; 181 push integer
          mov rax, 0
          push rax
          ; 181 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 181 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 181 push string
          mov rax, s_28
          push rax
          ; 181 push integer
          mov rax, 181
          push rax
          ; 181 push string
          mov rax, s_31
          push rax
          ; 181 push boolean
          mov rax, 1
          push rax
          ; 181 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 181 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 182 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 182 push integer
          mov rax, 8
          push rax
          ; 182 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 182 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 push string
          mov rax, s_28
          push rax
          ; 182 push integer
          mov rax, 182
          push rax
          ; 182 push string
          mov rax, s_31
          push rax
          ; 182 push boolean
          mov rax, 1
          push rax
          ; 182 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 182 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 182 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 183 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 183 push integer
          mov rax, 24
          push rax
          ; 183 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 183 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 183 push boolean
          mov rax, 1
          push rax
          ; 183 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 183 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 183 push boolean
          mov rax, 0
          push rax
          ; 183 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 184 push string
          mov rax, s_38
          push rax
          ; 184 push string
          mov rax, s_28
          push rax
          ; 184 push integer
          mov rax, 184
          push rax
          ; 184 push string
          mov rax, s_31
          push rax
          ; 184 push boolean
          mov rax, 1
          push rax
          ; 184 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 186 label
while_0x000000000000000a: 
          ; 186 duplicate
          pop rax
          push rax
          push rax
          ; 186 push string
          mov rax, s_28
          push rax
          ; 186 push integer
          mov rax, 186
          push rax
          ; 186 push string
          mov rax, s_31
          push rax
          ; 186 push boolean
          mov rax, 1
          push rax
          ; 186 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 186 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 186 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000a_end
          ; 187 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 187 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 187 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000026
          ; 188 push string
          mov rax, s_39
          push rax
          ; 188 push string
          mov rax, s_28
          push rax
          ; 188 push integer
          mov rax, 188
          push rax
          ; 188 push string
          mov rax, s_31
          push rax
          ; 188 push boolean
          mov rax, 1
          push rax
          ; 188 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 189 duplicate
          pop rax
          push rax
          push rax
          ; 189 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 189 push string
          mov rax, s_28
          push rax
          ; 189 push integer
          mov rax, 189
          push rax
          ; 189 push string
          mov rax, s_31
          push rax
          ; 189 push boolean
          mov rax, 1
          push rax
          ; 189 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 189 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 189 push string
          mov rax, s_28
          push rax
          ; 189 push integer
          mov rax, 189
          push rax
          ; 189 push string
          mov rax, s_31
          push rax
          ; 189 push boolean
          mov rax, 1
          push rax
          ; 189 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 190 push string
          mov rax, s_7
          push rax
          ; 190 push string
          mov rax, s_28
          push rax
          ; 190 push integer
          mov rax, 190
          push rax
          ; 190 push string
          mov rax, s_31
          push rax
          ; 190 push boolean
          mov rax, 1
          push rax
          ; 190 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 192 push string
          mov rax, s_40
          push rax
          ; 192 push string
          mov rax, s_28
          push rax
          ; 192 push integer
          mov rax, 192
          push rax
          ; 192 push string
          mov rax, s_31
          push rax
          ; 192 push boolean
          mov rax, 1
          push rax
          ; 192 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 193 duplicate
          pop rax
          push rax
          push rax
          ; 193 push integer
          mov rax, 25
          push rax
          ; 193 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 193 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 193 push string
          mov rax, s_28
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_31
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 194 push string
          mov rax, s_7
          push rax
          ; 194 push string
          mov rax, s_28
          push rax
          ; 194 push integer
          mov rax, 194
          push rax
          ; 194 push string
          mov rax, s_31
          push rax
          ; 194 push boolean
          mov rax, 1
          push rax
          ; 194 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 196 push string
          mov rax, s_41
          push rax
          ; 196 push string
          mov rax, s_28
          push rax
          ; 196 push integer
          mov rax, 196
          push rax
          ; 196 push string
          mov rax, s_31
          push rax
          ; 196 push boolean
          mov rax, 1
          push rax
          ; 196 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 197 duplicate
          pop rax
          push rax
          push rax
          ; 197 push integer
          mov rax, 33
          push rax
          ; 197 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 197 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 197 push string
          mov rax, s_28
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_31
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 197 push string
          mov rax, s_28
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_31
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 198 push string
          mov rax, s_7
          push rax
          ; 198 push string
          mov rax, s_28
          push rax
          ; 198 push integer
          mov rax, 198
          push rax
          ; 198 push string
          mov rax, s_31
          push rax
          ; 198 push boolean
          mov rax, 1
          push rax
          ; 198 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 200 push string
          mov rax, s_42
          push rax
          ; 200 push string
          mov rax, s_28
          push rax
          ; 200 push integer
          mov rax, 200
          push rax
          ; 200 push string
          mov rax, s_31
          push rax
          ; 200 push boolean
          mov rax, 1
          push rax
          ; 200 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 201 duplicate
          pop rax
          push rax
          push rax
          ; 201 push integer
          mov rax, 16
          push rax
          ; 201 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 201 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 201 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 201 push string
          mov rax, s_28
          push rax
          ; 201 push integer
          mov rax, 201
          push rax
          ; 201 push string
          mov rax, s_31
          push rax
          ; 201 push boolean
          mov rax, 1
          push rax
          ; 201 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 201 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 201 push string
          mov rax, s_28
          push rax
          ; 201 push integer
          mov rax, 201
          push rax
          ; 201 push string
          mov rax, s_31
          push rax
          ; 201 push boolean
          mov rax, 1
          push rax
          ; 201 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 202 push string
          mov rax, s_7
          push rax
          ; 202 push string
          mov rax, s_28
          push rax
          ; 202 push integer
          mov rax, 202
          push rax
          ; 202 push string
          mov rax, s_31
          push rax
          ; 202 push boolean
          mov rax, 1
          push rax
          ; 202 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 204 push string
          mov rax, s_43
          push rax
          ; 204 push string
          mov rax, s_28
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_31
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 205 duplicate
          pop rax
          push rax
          push rax
          ; 205 push integer
          mov rax, 0
          push rax
          ; 205 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 205 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 205 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 205 push string
          mov rax, s_28
          push rax
          ; 205 push integer
          mov rax, 205
          push rax
          ; 205 push string
          mov rax, s_31
          push rax
          ; 205 push boolean
          mov rax, 1
          push rax
          ; 205 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 205 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 205 push string
          mov rax, s_28
          push rax
          ; 205 push integer
          mov rax, 205
          push rax
          ; 205 push string
          mov rax, s_31
          push rax
          ; 205 push boolean
          mov rax, 1
          push rax
          ; 205 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 206 push string
          mov rax, s_7
          push rax
          ; 206 push string
          mov rax, s_28
          push rax
          ; 206 push integer
          mov rax, 206
          push rax
          ; 206 push string
          mov rax, s_31
          push rax
          ; 206 push boolean
          mov rax, 1
          push rax
          ; 206 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 208 push string
          mov rax, s_44
          push rax
          ; 208 push string
          mov rax, s_28
          push rax
          ; 208 push integer
          mov rax, 208
          push rax
          ; 208 push string
          mov rax, s_31
          push rax
          ; 208 push boolean
          mov rax, 1
          push rax
          ; 208 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 209 duplicate
          pop rax
          push rax
          push rax
          ; 209 push integer
          mov rax, 8
          push rax
          ; 209 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 209 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 209 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 209 push string
          mov rax, s_28
          push rax
          ; 209 push integer
          mov rax, 209
          push rax
          ; 209 push string
          mov rax, s_31
          push rax
          ; 209 push boolean
          mov rax, 1
          push rax
          ; 209 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 209 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 209 push string
          mov rax, s_28
          push rax
          ; 209 push integer
          mov rax, 209
          push rax
          ; 209 push string
          mov rax, s_31
          push rax
          ; 209 push boolean
          mov rax, 1
          push rax
          ; 209 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 210 push string
          mov rax, s_7
          push rax
          ; 210 push string
          mov rax, s_28
          push rax
          ; 210 push integer
          mov rax, 210
          push rax
          ; 210 push string
          mov rax, s_31
          push rax
          ; 210 push boolean
          mov rax, 1
          push rax
          ; 210 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 212 push string
          mov rax, s_45
          push rax
          ; 212 push string
          mov rax, s_28
          push rax
          ; 212 push integer
          mov rax, 212
          push rax
          ; 212 push string
          mov rax, s_31
          push rax
          ; 212 push boolean
          mov rax, 1
          push rax
          ; 212 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 213 duplicate
          pop rax
          push rax
          push rax
          ; 213 push integer
          mov rax, 24
          push rax
          ; 213 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 213 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 213 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000027
          ; 214 push string
          mov rax, s_46
          push rax
          ; 214 push string
          mov rax, s_28
          push rax
          ; 214 push integer
          mov rax, 214
          push rax
          ; 214 push string
          mov rax, s_31
          push rax
          ; 214 push boolean
          mov rax, 1
          push rax
          ; 214 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 214 jump
          jmp end_0x0000000000000027
          ; 214 label
if_0x0000000000000027: 
          ; 216 push string
          mov rax, s_47
          push rax
          ; 216 push string
          mov rax, s_28
          push rax
          ; 216 push integer
          mov rax, 216
          push rax
          ; 216 push string
          mov rax, s_31
          push rax
          ; 216 push boolean
          mov rax, 1
          push rax
          ; 216 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 216 label
end_0x0000000000000027: 
          ; 188 jump
          jmp end_0x0000000000000026
          ; 188 label
if_0x0000000000000026: 
          ; 188 label
end_0x0000000000000026: 
          ; 218 duplicate
          pop rax
          push rax
          push rax
          ; 218 push integer
          mov rax, 16
          push rax
          ; 218 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 218 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 218 push integer
          mov rax, 41
          push rax
          ; 218 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 219 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 219 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 219 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 220 duplicate
          pop rax
          push rax
          push rax
          ; 220 push integer
          mov rax, 0
          push rax
          ; 220 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 220 push string
          mov rax, s_48
          push rax
          ; 220 push string
          mov rax, s_28
          push rax
          ; 220 push integer
          mov rax, 220
          push rax
          ; 220 push string
          mov rax, s_31
          push rax
          ; 220 push boolean
          mov rax, 1
          push rax
          ; 220 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 221 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 223 duplicate
          pop rax
          push rax
          push rax
          ; 223 push integer
          mov rax, 0
          push rax
          ; 223 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 223 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 223 push string
          mov rax, s_28
          push rax
          ; 223 push integer
          mov rax, 223
          push rax
          ; 223 push string
          mov rax, s_31
          push rax
          ; 223 push boolean
          mov rax, 1
          push rax
          ; 223 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 223 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 224 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 224 duplicate
          pop rax
          push rax
          push rax
          ; 224 push integer
          mov rax, 0
          push rax
          ; 224 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 224 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 224 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 224 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 224 push integer
          mov rax, 4096
          push rax
          ; 224 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 224 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 225 push string
          mov rax, s_49
          push rax
          ; 225 push string
          mov rax, s_28
          push rax
          ; 225 push integer
          mov rax, 225
          push rax
          ; 225 push string
          mov rax, s_31
          push rax
          ; 225 push boolean
          mov rax, 1
          push rax
          ; 225 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 227 duplicate
          pop rax
          push rax
          push rax
          ; 227 push integer
          mov rax, 8
          push rax
          ; 227 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 227 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 227 push string
          mov rax, s_28
          push rax
          ; 227 push integer
          mov rax, 227
          push rax
          ; 227 push string
          mov rax, s_31
          push rax
          ; 227 push boolean
          mov rax, 1
          push rax
          ; 227 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 227 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 228 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 228 duplicate
          pop rax
          push rax
          push rax
          ; 228 push integer
          mov rax, 8
          push rax
          ; 228 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 228 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 228 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 228 push integer
          mov rax, 4096
          push rax
          ; 228 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 228 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 229 push string
          mov rax, s_50
          push rax
          ; 229 push string
          mov rax, s_28
          push rax
          ; 229 push integer
          mov rax, 229
          push rax
          ; 229 push string
          mov rax, s_31
          push rax
          ; 229 push boolean
          mov rax, 1
          push rax
          ; 229 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 231 duplicate
          pop rax
          push rax
          push rax
          ; 231 push integer
          mov rax, 0
          push rax
          ; 231 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 231 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 231 push string
          mov rax, s_28
          push rax
          ; 231 push integer
          mov rax, 231
          push rax
          ; 231 push string
          mov rax, s_31
          push rax
          ; 231 push boolean
          mov rax, 1
          push rax
          ; 231 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 231 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 231 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000028
          ; 232 duplicate
          pop rax
          push rax
          push rax
          ; 232 push integer
          mov rax, 0
          push rax
          ; 232 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 232 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 233 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 233 push integer
          mov rax, 16
          push rax
          ; 233 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 233 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 233 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 234 push integer
          mov rax, 41
          push rax
          ; 234 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 235 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 235 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 235 push string
          mov rax, s_51
          push rax
          ; 235 push string
          mov rax, s_28
          push rax
          ; 235 push integer
          mov rax, 235
          push rax
          ; 235 push string
          mov rax, s_31
          push rax
          ; 235 push boolean
          mov rax, 1
          push rax
          ; 235 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 232 jump
          jmp end_0x0000000000000028
          ; 232 label
if_0x0000000000000028: 
          ; 232 label
end_0x0000000000000028: 
          ; 237 duplicate
          pop rax
          push rax
          push rax
          ; 237 push integer
          mov rax, 8
          push rax
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 237 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 237 push string
          mov rax, s_28
          push rax
          ; 237 push integer
          mov rax, 237
          push rax
          ; 237 push string
          mov rax, s_31
          push rax
          ; 237 push boolean
          mov rax, 1
          push rax
          ; 237 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 237 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 237 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000029
          ; 238 duplicate
          pop rax
          push rax
          push rax
          ; 238 push integer
          mov rax, 8
          push rax
          ; 238 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 238 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 239 duplicate
          pop rax
          push rax
          push rax
          ; 239 push integer
          mov rax, 16
          push rax
          ; 239 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 239 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 239 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 240 push integer
          mov rax, 41
          push rax
          ; 240 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 241 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 241 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 241 push string
          mov rax, s_52
          push rax
          ; 241 push string
          mov rax, s_28
          push rax
          ; 241 push integer
          mov rax, 241
          push rax
          ; 241 push string
          mov rax, s_31
          push rax
          ; 241 push boolean
          mov rax, 1
          push rax
          ; 241 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 238 jump
          jmp end_0x0000000000000029
          ; 238 label
if_0x0000000000000029: 
          ; 238 label
end_0x0000000000000029: 
          ; 243 push integer
          mov rax, 0
          push rax
          ; 243 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 243 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 186 end of while-loop
          jmp while_0x000000000000000a
while_0x000000000000000a_end: 
          ; 244 drop
          pop rax
          ; 246 duplicate
          pop rax
          push rax
          push rax
          ; 246 push integer
          mov rax, 0
          push rax
          ; 246 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 246 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002a
          ; 247 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 247 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 247 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002b
          ; 248 push string
          mov rax, s_53
          push rax
          ; 248 push string
          mov rax, s_28
          push rax
          ; 248 push integer
          mov rax, 248
          push rax
          ; 248 push string
          mov rax, s_31
          push rax
          ; 248 push boolean
          mov rax, 1
          push rax
          ; 248 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 249 duplicate
          pop rax
          push rax
          push rax
          ; 249 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 249 push string
          mov rax, s_28
          push rax
          ; 249 push integer
          mov rax, 249
          push rax
          ; 249 push string
          mov rax, s_31
          push rax
          ; 249 push boolean
          mov rax, 1
          push rax
          ; 249 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 249 get pointer to buffer
          mov rax, buf__vm_buf
          push rax
          ; 249 push string
          mov rax, s_28
          push rax
          ; 249 push integer
          mov rax, 249
          push rax
          ; 249 push string
          mov rax, s_31
          push rax
          ; 249 push boolean
          mov rax, 1
          push rax
          ; 249 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 250 push string
          mov rax, s_7
          push rax
          ; 250 push string
          mov rax, s_28
          push rax
          ; 250 push integer
          mov rax, 250
          push rax
          ; 250 push string
          mov rax, s_31
          push rax
          ; 250 push boolean
          mov rax, 1
          push rax
          ; 250 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 248 jump
          jmp end_0x000000000000002b
          ; 248 label
if_0x000000000000002b: 
          ; 248 label
end_0x000000000000002b: 
          ; 251 push boolean
          mov rax, 0
          push rax
          ; 251 push string
          mov rax, s_54
          push rax
          ; 251 push string
          mov rax, s_28
          push rax
          ; 251 push integer
          mov rax, 251
          push rax
          ; 251 push string
          mov rax, s_31
          push rax
          ; 251 push boolean
          mov rax, 1
          push rax
          ; 251 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 247 jump
          jmp end_0x000000000000002a
          ; 247 label
if_0x000000000000002a: 
          ; 247 label
end_0x000000000000002a: 
          ; 252 drop
          pop rax
          ; 153 end of while-loop
          jmp while_0x0000000000000009
while_0x0000000000000009_end: 
          ; 254 drop
          pop rax
          ; 255 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 255 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 255 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002c
          ; 256 push string
          mov rax, s_55
          push rax
          ; 256 push string
          mov rax, s_28
          push rax
          ; 256 push integer
          mov rax, 256
          push rax
          ; 256 push string
          mov rax, s_31
          push rax
          ; 256 push boolean
          mov rax, 1
          push rax
          ; 256 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 256 jump
          jmp end_0x000000000000002c
          ; 256 label
if_0x000000000000002c: 
          ; 256 label
end_0x000000000000002c: 
          ; 149 jump
          jmp end_0x0000000000000023
          ; 149 label
if_0x0000000000000023: 
          ; 149 label
end_0x0000000000000023: 
          ; 147 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 147 return
          ret
          ; 259 function definition
fn__malloc_get_next_page: 
          push rbp
          mov rbp, rsp
          ; 261 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 261 push integer
          mov rax, 4096
          push rax
          ; 261 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 261 push string
          mov rax, s_56
          push rax
          ; 261 push string
          mov rax, s_28
          push rax
          ; 261 push integer
          mov rax, 261
          push rax
          ; 261 push string
          mov rax, s_57
          push rax
          ; 261 push boolean
          mov rax, 1
          push rax
          ; 261 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 263 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 263 push integer
          mov rax, 0
          push rax
          ; 263 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 263 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 263 push string
          mov rax, s_28
          push rax
          ; 263 push integer
          mov rax, 263
          push rax
          ; 263 push string
          mov rax, s_57
          push rax
          ; 263 push boolean
          mov rax, 1
          push rax
          ; 263 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 263 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 263 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002d
          ; 264 push string
          mov rax, s_28
          push rax
          ; 264 push integer
          mov rax, 264
          push rax
          ; 264 push string
          mov rax, s_57
          push rax
          ; 264 push boolean
          mov rax, 1
          push rax
          ; 264 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 265 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 266 push integer
          mov rax, 1
          push rax
          ; 266 push integer
          mov rax, 2
          push rax
          ; 266 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 267 push integer
          mov rax, 2
          push rax
          ; 267 push integer
          mov rax, 32
          push rax
          ; 267 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 268 push integer
          mov rax, 0
          push rax
          ; 268 push integer
          mov rax, 1
          push rax
          ; 268 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 269 push integer
          mov rax, 0
          push rax
          ; 270 push integer
          mov rax, 9
          push rax
          ; 271 syscall
          pop rax
          pop r9
          pop r8
          pop r10
          pop rdx
          pop rsi
          pop rdi
          syscall
          push rax
          ; 273 duplicate
          pop rax
          push rax
          push rax
          ; 273 push integer
          mov rax, 0
          push rax
          ; 273 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 273 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002e
          ; 274 push string
          mov rax, s_58
          push rax
          ; 274 push string
          mov rax, s_28
          push rax
          ; 274 push integer
          mov rax, 274
          push rax
          ; 274 push string
          mov rax, s_57
          push rax
          ; 274 push boolean
          mov rax, 1
          push rax
          ; 274 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 274 jump
          jmp end_0x000000000000002e
          ; 274 label
if_0x000000000000002e: 
          ; 274 label
end_0x000000000000002e: 
          ; 279 duplicate
          pop rax
          push rax
          push rax
          ; 279 push integer
          mov rax, 0
          push rax
          ; 279 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 279 push string
          mov rax, s_28
          push rax
          ; 279 push integer
          mov rax, 279
          push rax
          ; 279 push string
          mov rax, s_57
          push rax
          ; 279 push boolean
          mov rax, 1
          push rax
          ; 279 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 279 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 279 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 280 duplicate
          pop rax
          push rax
          push rax
          ; 280 push integer
          mov rax, 8
          push rax
          ; 280 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 280 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 280 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 280 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 281 duplicate
          pop rax
          push rax
          push rax
          ; 281 push integer
          mov rax, 16
          push rax
          ; 281 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 281 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 281 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 281 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 284 duplicate
          pop rax
          push rax
          push rax
          ; 284 push integer
          mov rax, 24
          push rax
          ; 284 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 285 duplicate
          pop rax
          push rax
          push rax
          ; 285 push integer
          mov rax, 24
          push rax
          ; 285 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 285 push boolean
          mov rax, 1
          push rax
          ; 285 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 285 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 286 duplicate
          pop rax
          push rax
          push rax
          ; 286 push integer
          mov rax, 0
          push rax
          ; 286 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 286 push string
          mov rax, s_28
          push rax
          ; 286 push integer
          mov rax, 286
          push rax
          ; 286 push string
          mov rax, s_57
          push rax
          ; 286 push boolean
          mov rax, 1
          push rax
          ; 286 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 286 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 286 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 287 duplicate
          pop rax
          push rax
          push rax
          ; 287 push integer
          mov rax, 8
          push rax
          ; 287 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 287 push string
          mov rax, s_28
          push rax
          ; 287 push integer
          mov rax, 287
          push rax
          ; 287 push string
          mov rax, s_57
          push rax
          ; 287 push boolean
          mov rax, 1
          push rax
          ; 287 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 287 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 287 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 288 duplicate
          pop rax
          push rax
          push rax
          ; 288 push integer
          mov rax, 25
          push rax
          ; 288 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 288 push string
          mov rax, s_59
          push rax
          ; 288 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 288 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 289 duplicate
          pop rax
          push rax
          push rax
          ; 289 push integer
          mov rax, 33
          push rax
          ; 289 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 289 push integer
          mov rax, 0
          push rax
          ; 289 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 289 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 290 duplicate
          pop rax
          push rax
          push rax
          ; 290 push integer
          mov rax, 16
          push rax
          ; 290 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 290 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 290 push integer
          mov rax, 24
          push rax
          ; 290 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 291 push integer
          mov rax, 41
          push rax
          ; 291 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 291 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 291 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 292 drop
          pop rax
          ; 294 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 294 push integer
          mov rax, 0
          push rax
          ; 294 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 294 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 264 jump
          jmp end_0x000000000000002d
          ; 264 label
if_0x000000000000002d: 
          ; 264 label
end_0x000000000000002d: 
          ; 297 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 297 push integer
          mov rax, 0
          push rax
          ; 297 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 297 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 299 duplicate
          pop rax
          push rax
          push rax
          ; 299 push string
          mov rax, s_28
          push rax
          ; 299 push integer
          mov rax, 299
          push rax
          ; 299 push string
          mov rax, s_57
          push rax
          ; 299 push boolean
          mov rax, 1
          push rax
          ; 299 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 299 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 299 push string
          mov rax, s_60
          push rax
          ; 299 push string
          mov rax, s_28
          push rax
          ; 299 push integer
          mov rax, 299
          push rax
          ; 299 push string
          mov rax, s_57
          push rax
          ; 299 push boolean
          mov rax, 1
          push rax
          ; 299 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 260 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 260 return
          ret
          ; 302 function definition
fn__malloc_split_block: 
          push rbp
          mov rbp, rsp
          ; 305 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 305 push integer
          mov rax, 24
          push rax
          ; 305 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 305 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 305 push string
          mov rax, s_61
          push rax
          ; 305 push string
          mov rax, s_28
          push rax
          ; 305 push integer
          mov rax, 305
          push rax
          ; 305 push string
          mov rax, s_62
          push rax
          ; 305 push boolean
          mov rax, 1
          push rax
          ; 305 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 307 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 307 push integer
          mov rax, 0
          push rax
          ; 307 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 307 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 309 push boolean
          mov rax, 0
          push rax
          ; 309 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 309 push integer
          mov rax, 24
          push rax
          ; 309 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 309 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 312 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 312 push integer
          mov rax, 41
          push rax
          ; 312 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 312 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 312 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 314 duplicate
          pop rax
          push rax
          push rax
          ; 314 push integer
          mov rax, 0
          push rax
          ; 314 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 314 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000002f
          ; 316 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 316 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 316 push integer
          mov rax, 16
          push rax
          ; 316 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 316 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 318 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 318 push integer
          mov rax, 41
          push rax
          ; 318 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 318 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 318 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 318 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 318 push integer
          mov rax, 0
          push rax
          ; 318 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 318 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 320 push boolean
          mov rax, 1
          push rax
          ; 320 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 320 push integer
          mov rax, 0
          push rax
          ; 320 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 320 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 320 push integer
          mov rax, 24
          push rax
          ; 320 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 320 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 321 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 321 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 321 push integer
          mov rax, 0
          push rax
          ; 321 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 321 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 321 push integer
          mov rax, 8
          push rax
          ; 321 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 321 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 322 duplicate
          pop rax
          push rax
          push rax
          ; 322 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 322 push integer
          mov rax, 0
          push rax
          ; 322 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 322 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 322 push integer
          mov rax, 16
          push rax
          ; 322 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 322 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 323 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 323 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 323 push integer
          mov rax, 0
          push rax
          ; 323 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 323 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 323 push integer
          mov rax, 0
          push rax
          ; 323 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 323 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 324 push string
          mov rax, s_59
          push rax
          ; 324 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 324 push integer
          mov rax, 0
          push rax
          ; 324 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 324 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 324 push integer
          mov rax, 25
          push rax
          ; 324 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 324 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 325 push integer
          mov rax, 0
          push rax
          ; 325 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 325 push integer
          mov rax, 0
          push rax
          ; 325 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 325 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 325 push integer
          mov rax, 33
          push rax
          ; 325 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 325 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 327 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 327 push integer
          mov rax, 0
          push rax
          ; 327 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 327 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 327 push integer
          mov rax, 0
          push rax
          ; 327 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 327 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 327 push string
          mov rax, s_28
          push rax
          ; 327 push integer
          mov rax, 327
          push rax
          ; 327 push string
          mov rax, s_62
          push rax
          ; 327 push boolean
          mov rax, 1
          push rax
          ; 327 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 327 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 327 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000030
          ; 328 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 328 push integer
          mov rax, 0
          push rax
          ; 328 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 328 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 328 duplicate
          pop rax
          push rax
          push rax
          ; 328 push integer
          mov rax, 0
          push rax
          ; 328 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 328 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 328 push integer
          mov rax, 8
          push rax
          ; 328 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 328 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 328 jump
          jmp end_0x0000000000000030
          ; 328 label
if_0x0000000000000030: 
          ; 328 label
end_0x0000000000000030: 
          ; 315 jump
          jmp end_0x000000000000002f
          ; 315 label
if_0x000000000000002f: 
          ; 315 label
end_0x000000000000002f: 
          ; 330 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 303 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 303 return
          ret
          ; 333 function definition
fn__malloc_block_is_available_or_NULL: 
          push rbp
          mov rbp, rsp
          ; 335 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 335 push string
          mov rax, s_28
          push rax
          ; 335 push integer
          mov rax, 335
          push rax
          ; 335 push string
          mov rax, s_63
          push rax
          ; 335 push boolean
          mov rax, 1
          push rax
          ; 335 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 335 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 335 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000031
          ; 336 push boolean
          mov rax, 1
          push rax
          ; 336 jump
          jmp end_0x0000000000000031
          ; 336 label
if_0x0000000000000031: 
          ; 338 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 338 push integer
          mov rax, 24
          push rax
          ; 338 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 338 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 339 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 339 push integer
          mov rax, 16
          push rax
          ; 339 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 339 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 339 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 339 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 339 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 338 label
end_0x0000000000000031: 
          ; 334 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 334 return
          ret
          ; 342 function definition
fn_malloc: 
          push rbp
          mov rbp, rsp
          ; 346 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 346 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 346 push string
          mov rax, s_28
          push rax
          ; 346 push integer
          mov rax, 346
          push rax
          ; 346 push string
          mov rax, s_64
          push rax
          ; 346 push boolean
          mov rax, 1
          push rax
          ; 346 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 346 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 346 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000032
          ; 347 get pointer to buffer
          mov rax, buf_root_page
          push rax
          ; 347 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 347 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 347 jump
          jmp end_0x0000000000000032
          ; 347 label
if_0x0000000000000032: 
          ; 347 label
end_0x0000000000000032: 
          ; 349 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 349 push integer
          mov rax, 0
          push rax
          ; 349 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 349 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000033
          ; 350 push string
          mov rax, s_65
          push rax
          ; 350 push string
          mov rax, s_28
          push rax
          ; 350 push integer
          mov rax, 350
          push rax
          ; 350 push string
          mov rax, s_64
          push rax
          ; 350 push boolean
          mov rax, 1
          push rax
          ; 350 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 350 jump
          jmp end_0x0000000000000033
          ; 350 label
if_0x0000000000000033: 
          ; 350 label
end_0x0000000000000033: 
          ; 353 push string
          mov rax, s_28
          push rax
          ; 353 push integer
          mov rax, 353
          push rax
          ; 353 push string
          mov rax, s_64
          push rax
          ; 353 push boolean
          mov rax, 1
          push rax
          ; 353 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 354 label
while_0x000000000000000b: 
          ; 354 duplicate
          pop rax
          push rax
          push rax
          ; 354 push string
          mov rax, s_28
          push rax
          ; 354 push integer
          mov rax, 354
          push rax
          ; 354 push string
          mov rax, s_64
          push rax
          ; 354 push boolean
          mov rax, 1
          push rax
          ; 354 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 354 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 354 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000b_end
          ; 355 drop
          pop rax
          ; 358 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 358 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 359 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 359 push integer
          mov rax, 24
          push rax
          ; 359 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 359 push integer
          mov rax, 41
          push rax
          ; 359 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 360 push integer
          mov rax, 4096
          push rax
          ; 360 push string
          mov rax, s_28
          push rax
          ; 360 push integer
          mov rax, 360
          push rax
          ; 360 push string
          mov rax, s_64
          push rax
          ; 360 push boolean
          mov rax, 1
          push rax
          ; 360 call
          call fn_max
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 360 push string
          mov rax, s_28
          push rax
          ; 360 push integer
          mov rax, 360
          push rax
          ; 360 push string
          mov rax, s_64
          push rax
          ; 360 push boolean
          mov rax, 1
          push rax
          ; 360 call
          call fn__malloc_get_next_page
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 361 duplicate
          pop rax
          push rax
          push rax
          ; 361 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 361 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 363 get pointer to buffer
          mov rax, buf_root_page
          push rax
          ; 363 push integer
          mov rax, 0
          push rax
          ; 363 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 363 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 363 push string
          mov rax, s_28
          push rax
          ; 363 push integer
          mov rax, 363
          push rax
          ; 363 push string
          mov rax, s_64
          push rax
          ; 363 push boolean
          mov rax, 1
          push rax
          ; 363 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 363 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 363 push string
          mov rax, s_66
          push rax
          ; 363 push string
          mov rax, s_28
          push rax
          ; 363 push integer
          mov rax, 363
          push rax
          ; 363 push string
          mov rax, s_64
          push rax
          ; 363 push boolean
          mov rax, 1
          push rax
          ; 363 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 364 duplicate
          pop rax
          push rax
          push rax
          ; 364 get pointer to buffer
          mov rax, buf_root_page
          push rax
          ; 364 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 364 push string
          mov rax, s_67
          push rax
          ; 364 push string
          mov rax, s_28
          push rax
          ; 364 push integer
          mov rax, 364
          push rax
          ; 364 push string
          mov rax, s_64
          push rax
          ; 364 push boolean
          mov rax, 1
          push rax
          ; 364 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 365 duplicate
          pop rax
          push rax
          push rax
          ; 365 push string
          mov rax, s_28
          push rax
          ; 365 push integer
          mov rax, 365
          push rax
          ; 365 push string
          mov rax, s_64
          push rax
          ; 365 push boolean
          mov rax, 1
          push rax
          ; 365 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 365 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 365 push string
          mov rax, s_68
          push rax
          ; 365 push string
          mov rax, s_28
          push rax
          ; 365 push integer
          mov rax, 365
          push rax
          ; 365 push string
          mov rax, s_64
          push rax
          ; 365 push boolean
          mov rax, 1
          push rax
          ; 365 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 368 push integer
          mov rax, 24
          push rax
          ; 368 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 370 duplicate
          pop rax
          push rax
          push rax
          ; 370 push integer
          mov rax, 16
          push rax
          ; 370 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 370 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 370 push integer
          mov rax, 0
          push rax
          ; 370 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 370 push string
          mov rax, s_69
          push rax
          ; 370 push string
          mov rax, s_28
          push rax
          ; 370 push integer
          mov rax, 370
          push rax
          ; 370 push string
          mov rax, s_64
          push rax
          ; 370 push boolean
          mov rax, 1
          push rax
          ; 370 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 373 label
while_0x000000000000000c: 
          ; 373 duplicate
          pop rax
          push rax
          push rax
          ; 373 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 373 push string
          mov rax, s_28
          push rax
          ; 373 push integer
          mov rax, 373
          push rax
          ; 373 push string
          mov rax, s_64
          push rax
          ; 373 push boolean
          mov rax, 1
          push rax
          ; 373 call
          call fn__malloc_block_is_available_or_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 373 push boolean
          mov rax, 0
          push rax
          ; 373 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 373 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000c_end
          ; 374 push integer
          mov rax, 0
          push rax
          ; 374 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 374 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 373 end of while-loop
          jmp while_0x000000000000000c
while_0x000000000000000c_end: 
          ; 354 end of while-loop
          jmp while_0x000000000000000b
while_0x000000000000000b_end: 
          ; 376 duplicate
          pop rax
          push rax
          push rax
          ; 376 push string
          mov rax, s_28
          push rax
          ; 376 push integer
          mov rax, 376
          push rax
          ; 376 push string
          mov rax, s_64
          push rax
          ; 376 push boolean
          mov rax, 1
          push rax
          ; 376 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 376 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 376 push string
          mov rax, s_70
          push rax
          ; 376 push string
          mov rax, s_28
          push rax
          ; 376 push integer
          mov rax, 376
          push rax
          ; 376 push string
          mov rax, s_64
          push rax
          ; 376 push boolean
          mov rax, 1
          push rax
          ; 376 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 377 duplicate
          pop rax
          push rax
          push rax
          ; 377 push integer
          mov rax, 24
          push rax
          ; 377 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 377 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 377 push string
          mov rax, s_71
          push rax
          ; 377 push string
          mov rax, s_28
          push rax
          ; 377 push integer
          mov rax, 377
          push rax
          ; 377 push string
          mov rax, s_64
          push rax
          ; 377 push boolean
          mov rax, 1
          push rax
          ; 377 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 379 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 379 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 379 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000034
          ; 380 get argument
          mov rax, rbp
          add rax, 16
          mov rbx, [rax]
          push rbx
          ; 380 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000035
          ; 382 get argument
          mov rax, rbp
          add rax, 40
          mov rbx, [rax]
          push rbx
          ; 383 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 383 push integer
          mov rax, 25
          push rax
          ; 383 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 383 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 386 get argument
          mov rax, rbp
          add rax, 32
          mov rbx, [rax]
          push rbx
          ; 387 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 387 push integer
          mov rax, 33
          push rax
          ; 387 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 387 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 381 jump
          jmp end_0x0000000000000035
          ; 381 label
if_0x0000000000000035: 
          ; 381 label
end_0x0000000000000035: 
          ; 380 jump
          jmp end_0x0000000000000034
          ; 380 label
if_0x0000000000000034: 
          ; 380 label
end_0x0000000000000034: 
          ; 389 duplicate
          pop rax
          push rax
          push rax
          ; 389 push integer
          mov rax, 16
          push rax
          ; 389 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 389 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 389 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 389 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 389 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000036
          ; 391 duplicate
          pop rax
          push rax
          push rax
          ; 391 push integer
          mov rax, 24
          push rax
          ; 391 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 391 push boolean
          mov rax, 0
          push rax
          ; 391 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 391 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 390 jump
          jmp end_0x0000000000000036
          ; 390 label
if_0x0000000000000036: 
          ; 394 duplicate
          pop rax
          push rax
          push rax
          ; 394 push integer
          mov rax, 16
          push rax
          ; 394 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 394 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 394 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 394 push string
          mov rax, s_28
          push rax
          ; 394 push integer
          mov rax, 394
          push rax
          ; 394 push string
          mov rax, s_64
          push rax
          ; 394 push boolean
          mov rax, 1
          push rax
          ; 394 call
          call fn__malloc_split_block
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 393 label
end_0x0000000000000036: 
          ; 397 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 397 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 397 push integer
          mov rax, 0
          push rax
          ; 397 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 397 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 397 push string
          mov rax, s_28
          push rax
          ; 397 push integer
          mov rax, 397
          push rax
          ; 397 push string
          mov rax, s_64
          push rax
          ; 397 push boolean
          mov rax, 1
          push rax
          ; 397 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 397 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 397 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000037
          ; 398 get pointer to buffer
          mov rax, buf_root_page
          push rax
          ; 398 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 398 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 398 jump
          jmp end_0x0000000000000037
          ; 398 label
if_0x0000000000000037: 
          ; 400 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 400 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 400 push integer
          mov rax, 8
          push rax
          ; 400 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 400 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 400 get pointer to buffer
          mov rax, buf_current_page
          push rax
          ; 400 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 400 label
end_0x0000000000000037: 
          ; 402 push integer
          mov rax, 41
          push rax
          ; 402 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 403 push string
          mov rax, s_28
          push rax
          ; 403 push integer
          mov rax, 403
          push rax
          ; 403 push string
          mov rax, s_64
          push rax
          ; 403 push boolean
          mov rax, 1
          push rax
          ; 403 call
          call fn_verify_memory
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 343 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 343 return
          ret
          ; 406 function definition
fn_zalloc: 
          push rbp
          mov rbp, rsp
          ; 408 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 408 push string
          mov rax, s_28
          push rax
          ; 408 push integer
          mov rax, 408
          push rax
          ; 408 push string
          mov rax, s_72
          push rax
          ; 408 push boolean
          mov rax, 1
          push rax
          ; 408 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 409 push integer
          mov rax, 0
          push rax
          ; 410 label
while_0x000000000000000d: 
          ; 410 duplicate
          pop rax
          push rax
          push rax
          ; 410 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 410 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 410 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000d_end
          ; 411 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 411 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 411 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 411 push integer
          mov rax, 0
          push rax
          ; 411 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 411 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 412 push integer
          mov rax, 1
          push rax
          ; 412 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 410 end of while-loop
          jmp while_0x000000000000000d
while_0x000000000000000d_end: 
          ; 413 drop
          pop rax
          ; 407 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 407 return
          ret
          ; 416 function definition
fn_memcpy: 
          push rbp
          mov rbp, rsp
          ; 418 push integer
          mov rax, 0
          push rax
          ; 419 label
while_0x000000000000000e: 
          ; 419 duplicate
          pop rax
          push rax
          push rax
          ; 419 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 419 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 419 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000e_end
          ; 420 duplicate
          pop rax
          push rax
          push rax
          ; 420 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 420 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 420 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 421 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 421 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 421 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 421 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 422 push integer
          mov rax, 1
          push rax
          ; 422 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 419 end of while-loop
          jmp while_0x000000000000000e
while_0x000000000000000e_end: 
          ; 423 push string
          mov rax, s_28
          push rax
          ; 423 push integer
          mov rax, 423
          push rax
          ; 423 push string
          mov rax, s_73
          push rax
          ; 423 push boolean
          mov rax, 1
          push rax
          ; 423 call
          call fn_verify_memory
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 417 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 417 return
          ret
          ; 426 function definition
fn_merge_blocks: 
          push rbp
          mov rbp, rsp
          ; 429 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 429 push integer
          mov rax, 24
          push rax
          ; 429 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 429 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 429 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 429 push integer
          mov rax, 24
          push rax
          ; 429 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 429 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 429 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 429 push string
          mov rax, s_74
          push rax
          ; 429 push string
          mov rax, s_28
          push rax
          ; 429 push integer
          mov rax, 429
          push rax
          ; 429 push string
          mov rax, s_75
          push rax
          ; 429 push boolean
          mov rax, 1
          push rax
          ; 429 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 432 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 432 push integer
          mov rax, 16
          push rax
          ; 432 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 432 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 433 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 433 push integer
          mov rax, 16
          push rax
          ; 433 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 433 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 433 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 434 push integer
          mov rax, 41
          push rax
          ; 434 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 435 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 435 push integer
          mov rax, 16
          push rax
          ; 435 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 435 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 438 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 438 push integer
          mov rax, 0
          push rax
          ; 438 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 438 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 438 push string
          mov rax, s_28
          push rax
          ; 438 push integer
          mov rax, 438
          push rax
          ; 438 push string
          mov rax, s_75
          push rax
          ; 438 push boolean
          mov rax, 1
          push rax
          ; 438 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 438 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 438 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000038
          ; 439 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 440 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 440 push integer
          mov rax, 0
          push rax
          ; 440 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 440 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 440 push integer
          mov rax, 8
          push rax
          ; 440 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 440 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 439 jump
          jmp end_0x0000000000000038
          ; 439 label
if_0x0000000000000038: 
          ; 439 label
end_0x0000000000000038: 
          ; 443 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 443 push integer
          mov rax, 0
          push rax
          ; 443 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 443 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 444 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 444 push integer
          mov rax, 0
          push rax
          ; 444 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 444 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 427 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 427 return
          ret
          ; 447 function definition
fn_free:  
          push rbp
          mov rbp, rsp
          ; 450 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 450 push integer
          mov rax, 41
          push rax
          ; 450 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 452 duplicate
          pop rax
          push rax
          push rax
          ; 452 push integer
          mov rax, 24
          push rax
          ; 452 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 452 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 452 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000039
          ; 453 push string
          mov rax, s_76
          push rax
          ; 453 push string
          mov rax, s_28
          push rax
          ; 453 push integer
          mov rax, 453
          push rax
          ; 453 push string
          mov rax, s_77
          push rax
          ; 453 push boolean
          mov rax, 1
          push rax
          ; 453 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 453 jump
          jmp end_0x0000000000000039
          ; 453 label
if_0x0000000000000039: 
          ; 453 label
end_0x0000000000000039: 
          ; 455 duplicate
          pop rax
          push rax
          push rax
          ; 455 push integer
          mov rax, 24
          push rax
          ; 455 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 455 push boolean
          mov rax, 1
          push rax
          ; 455 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 455 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 457 duplicate
          pop rax
          push rax
          push rax
          ; 457 push integer
          mov rax, 0
          push rax
          ; 457 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 457 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 457 push string
          mov rax, s_28
          push rax
          ; 457 push integer
          mov rax, 457
          push rax
          ; 457 push string
          mov rax, s_77
          push rax
          ; 457 push boolean
          mov rax, 1
          push rax
          ; 457 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 457 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 457 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003a
          ; 458 duplicate
          pop rax
          push rax
          push rax
          ; 458 push integer
          mov rax, 0
          push rax
          ; 458 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 458 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 458 push integer
          mov rax, 24
          push rax
          ; 458 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 458 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 458 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003b
          ; 460 duplicate
          pop rax
          push rax
          push rax
          ; 460 duplicate
          pop rax
          push rax
          push rax
          ; 460 push integer
          mov rax, 0
          push rax
          ; 460 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 460 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 460 push string
          mov rax, s_28
          push rax
          ; 460 push integer
          mov rax, 460
          push rax
          ; 460 push string
          mov rax, s_77
          push rax
          ; 460 push boolean
          mov rax, 1
          push rax
          ; 460 call
          call fn_merge_blocks
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 459 jump
          jmp end_0x000000000000003b
          ; 459 label
if_0x000000000000003b: 
          ; 459 label
end_0x000000000000003b: 
          ; 458 jump
          jmp end_0x000000000000003a
          ; 458 label
if_0x000000000000003a: 
          ; 458 label
end_0x000000000000003a: 
          ; 462 duplicate
          pop rax
          push rax
          push rax
          ; 462 push integer
          mov rax, 8
          push rax
          ; 462 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 462 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 462 push string
          mov rax, s_28
          push rax
          ; 462 push integer
          mov rax, 462
          push rax
          ; 462 push string
          mov rax, s_77
          push rax
          ; 462 push boolean
          mov rax, 1
          push rax
          ; 462 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 462 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 462 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003c
          ; 463 duplicate
          pop rax
          push rax
          push rax
          ; 463 push integer
          mov rax, 8
          push rax
          ; 463 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 463 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 463 push integer
          mov rax, 24
          push rax
          ; 463 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 463 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 463 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003d
          ; 465 duplicate
          pop rax
          push rax
          push rax
          ; 465 push integer
          mov rax, 8
          push rax
          ; 465 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 465 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 465 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 465 push string
          mov rax, s_28
          push rax
          ; 465 push integer
          mov rax, 465
          push rax
          ; 465 push string
          mov rax, s_77
          push rax
          ; 465 push boolean
          mov rax, 1
          push rax
          ; 465 call
          call fn_merge_blocks
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 464 jump
          jmp end_0x000000000000003d
          ; 464 label
if_0x000000000000003d: 
          ; 464 label
end_0x000000000000003d: 
          ; 463 jump
          jmp end_0x000000000000003c
          ; 463 label
if_0x000000000000003c: 
          ; 463 label
end_0x000000000000003c: 
          ; 468 label
while_0x000000000000000f: 
          ; 468 duplicate
          pop rax
          push rax
          push rax
          ; 468 push integer
          mov rax, 8
          push rax
          ; 468 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 468 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 468 push string
          mov rax, s_28
          push rax
          ; 468 push integer
          mov rax, 468
          push rax
          ; 468 push string
          mov rax, s_77
          push rax
          ; 468 push boolean
          mov rax, 1
          push rax
          ; 468 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 468 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 468 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000000f_end
          ; 469 duplicate
          pop rax
          push rax
          push rax
          ; 469 push integer
          mov rax, 8
          push rax
          ; 469 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 469 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 469 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 469 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 469 push string
          mov rax, s_78
          push rax
          ; 469 push string
          mov rax, s_28
          push rax
          ; 469 push integer
          mov rax, 469
          push rax
          ; 469 push string
          mov rax, s_77
          push rax
          ; 469 push boolean
          mov rax, 1
          push rax
          ; 469 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 470 duplicate
          pop rax
          push rax
          push rax
          ; 470 duplicate
          pop rax
          push rax
          push rax
          ; 470 push integer
          mov rax, 8
          push rax
          ; 470 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 470 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 470 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 470 push integer
          mov rax, 4096
          push rax
          ; 470 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 471 push string
          mov rax, s_79
          push rax
          ; 471 push string
          mov rax, s_28
          push rax
          ; 471 push integer
          mov rax, 471
          push rax
          ; 471 push string
          mov rax, s_77
          push rax
          ; 471 push boolean
          mov rax, 1
          push rax
          ; 471 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 473 push integer
          mov rax, 8
          push rax
          ; 473 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 473 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 468 end of while-loop
          jmp while_0x000000000000000f
while_0x000000000000000f_end: 
          ; 475 duplicate
          pop rax
          push rax
          push rax
          ; 475 push integer
          mov rax, 0
          push rax
          ; 475 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 475 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 475 push string
          mov rax, s_28
          push rax
          ; 475 push integer
          mov rax, 475
          push rax
          ; 475 push string
          mov rax, s_77
          push rax
          ; 475 push boolean
          mov rax, 1
          push rax
          ; 475 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 475 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 475 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003e
          ; 477 push integer
          mov rax, 24
          push rax
          ; 477 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 478 duplicate
          pop rax
          push rax
          push rax
          ; 478 push integer
          mov rax, 0
          push rax
          ; 478 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 478 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 479 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 479 duplicate
          pop rax
          push rax
          push rax
          ; 479 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 479 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 479 push integer
          mov rax, 8
          push rax
          ; 479 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 479 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 479 push integer
          mov rax, 0
          push rax
          ; 479 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 479 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 481 duplicate
          pop rax
          push rax
          push rax
          ; 481 push integer
          mov rax, 0
          push rax
          ; 481 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 481 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 481 push string
          mov rax, s_28
          push rax
          ; 481 push integer
          mov rax, 481
          push rax
          ; 481 push string
          mov rax, s_77
          push rax
          ; 481 push boolean
          mov rax, 1
          push rax
          ; 481 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 481 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 481 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000003f
          ; 482 duplicate
          pop rax
          push rax
          push rax
          ; 482 push integer
          mov rax, 8
          push rax
          ; 482 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 482 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 483 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 483 duplicate
          pop rax
          push rax
          push rax
          ; 483 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 483 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 483 push integer
          mov rax, 0
          push rax
          ; 483 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 483 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 483 push integer
          mov rax, 8
          push rax
          ; 483 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 483 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 482 jump
          jmp end_0x000000000000003f
          ; 482 label
if_0x000000000000003f: 
          ; 482 label
end_0x000000000000003f: 
          ; 485 duplicate
          pop rax
          push rax
          push rax
          ; 486 duplicate
          pop rax
          push rax
          push rax
          ; 486 push integer
          mov rax, 16
          push rax
          ; 486 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 486 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 487 push integer
          mov rax, 11
          push rax
          ; 488 syscall
          pop rax
          pop rsi
          pop rdi
          syscall
          push rax
          ; 490 push integer
          mov rax, 0
          push rax
          ; 490 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 490 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000040
          ; 491 push string
          mov rax, s_80
          push rax
          ; 491 push string
          mov rax, s_28
          push rax
          ; 491 push integer
          mov rax, 491
          push rax
          ; 491 push string
          mov rax, s_77
          push rax
          ; 491 push boolean
          mov rax, 1
          push rax
          ; 491 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 491 jump
          jmp end_0x0000000000000040
          ; 491 label
if_0x0000000000000040: 
          ; 491 label
end_0x0000000000000040: 
          ; 476 jump
          jmp end_0x000000000000003e
          ; 476 label
if_0x000000000000003e: 
          ; 476 label
end_0x000000000000003e: 
          ; 493 push string
          mov rax, s_28
          push rax
          ; 493 push integer
          mov rax, 493
          push rax
          ; 493 push string
          mov rax, s_77
          push rax
          ; 493 push boolean
          mov rax, 1
          push rax
          ; 493 call
          call fn_verify_memory
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 448 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 448 return
          ret
          ; 496 function definition
fn_puti:  
          push rbp
          mov rbp, rsp
          ; 498 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 498 push string
          mov rax, s_28
          push rax
          ; 498 push integer
          mov rax, 498
          push rax
          ; 498 push string
          mov rax, s_81
          push rax
          ; 498 push boolean
          mov rax, 1
          push rax
          ; 498 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 498 push string
          mov rax, s_28
          push rax
          ; 498 push integer
          mov rax, 498
          push rax
          ; 498 push string
          mov rax, s_81
          push rax
          ; 498 push boolean
          mov rax, 1
          push rax
          ; 498 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 497 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 497 return
          ret
          ; 501 function definition
fn_errori: 
          push rbp
          mov rbp, rsp
          ; 503 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 503 push string
          mov rax, s_28
          push rax
          ; 503 push integer
          mov rax, 503
          push rax
          ; 503 push string
          mov rax, s_82
          push rax
          ; 503 push boolean
          mov rax, 1
          push rax
          ; 503 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 503 push string
          mov rax, s_28
          push rax
          ; 503 push integer
          mov rax, 503
          push rax
          ; 503 push string
          mov rax, s_82
          push rax
          ; 503 push boolean
          mov rax, 1
          push rax
          ; 503 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 502 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 502 return
          ret
          ; 506 function definition
fn__concat: 
          push rbp
          mov rbp, rsp
          ; 509 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 509 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 509 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 509 push integer
          mov rax, 1
          push rax
          ; 509 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 509 push string
          mov rax, s_28
          push rax
          ; 509 push integer
          mov rax, 509
          push rax
          ; 509 push string
          mov rax, s_83
          push rax
          ; 509 push boolean
          mov rax, 1
          push rax
          ; 509 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 510 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 510 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 510 push string
          mov rax, s_28
          push rax
          ; 510 push integer
          mov rax, 510
          push rax
          ; 510 push string
          mov rax, s_83
          push rax
          ; 510 push boolean
          mov rax, 1
          push rax
          ; 510 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 511 duplicate
          pop rax
          push rax
          push rax
          ; 511 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 511 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 511 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 511 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 511 push string
          mov rax, s_28
          push rax
          ; 511 push integer
          mov rax, 511
          push rax
          ; 511 push string
          mov rax, s_83
          push rax
          ; 511 push boolean
          mov rax, 1
          push rax
          ; 511 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 511 drop
          pop rax
          ; 507 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 507 return
          ret
          ; 514 function definition
fn_concat: 
          push rbp
          mov rbp, rsp
          ; 516 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 516 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 516 push string
          mov rax, s_28
          push rax
          ; 516 push integer
          mov rax, 516
          push rax
          ; 516 push string
          mov rax, s_84
          push rax
          ; 516 push boolean
          mov rax, 1
          push rax
          ; 516 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 516 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 516 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 516 push string
          mov rax, s_28
          push rax
          ; 516 push integer
          mov rax, 516
          push rax
          ; 516 push string
          mov rax, s_84
          push rax
          ; 516 push boolean
          mov rax, 1
          push rax
          ; 516 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 516 push string
          mov rax, s_28
          push rax
          ; 516 push integer
          mov rax, 516
          push rax
          ; 516 push string
          mov rax, s_84
          push rax
          ; 516 push boolean
          mov rax, 1
          push rax
          ; 516 call
          call fn__concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 515 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 515 return
          ret
          ; 519 function definition
fn_concatfl: 
          push rbp
          mov rbp, rsp
          ; 521 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 521 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 521 push string
          mov rax, s_28
          push rax
          ; 521 push integer
          mov rax, 521
          push rax
          ; 521 push string
          mov rax, s_85
          push rax
          ; 521 push boolean
          mov rax, 1
          push rax
          ; 521 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 522 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 522 push string
          mov rax, s_28
          push rax
          ; 522 push integer
          mov rax, 522
          push rax
          ; 522 push string
          mov rax, s_85
          push rax
          ; 522 push boolean
          mov rax, 1
          push rax
          ; 522 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 520 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 520 return
          ret
          ; 525 function definition
fn_concatfr: 
          push rbp
          mov rbp, rsp
          ; 527 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 527 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 527 push string
          mov rax, s_28
          push rax
          ; 527 push integer
          mov rax, 527
          push rax
          ; 527 push string
          mov rax, s_86
          push rax
          ; 527 push boolean
          mov rax, 1
          push rax
          ; 527 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 528 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 528 push string
          mov rax, s_28
          push rax
          ; 528 push integer
          mov rax, 528
          push rax
          ; 528 push string
          mov rax, s_86
          push rax
          ; 528 push boolean
          mov rax, 1
          push rax
          ; 528 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 526 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 526 return
          ret
          ; 531 function definition
fn_concatf: 
          push rbp
          mov rbp, rsp
          ; 533 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 533 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 533 push string
          mov rax, s_28
          push rax
          ; 533 push integer
          mov rax, 533
          push rax
          ; 533 push string
          mov rax, s_87
          push rax
          ; 533 push boolean
          mov rax, 1
          push rax
          ; 533 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 534 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 534 push string
          mov rax, s_28
          push rax
          ; 534 push integer
          mov rax, 534
          push rax
          ; 534 push string
          mov rax, s_87
          push rax
          ; 534 push boolean
          mov rax, 1
          push rax
          ; 534 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 535 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 535 push string
          mov rax, s_28
          push rax
          ; 535 push integer
          mov rax, 535
          push rax
          ; 535 push string
          mov rax, s_87
          push rax
          ; 535 push boolean
          mov rax, 1
          push rax
          ; 535 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 532 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 532 return
          ret
          ; 538 function definition
fn_stoi:  
          push rbp
          mov rbp, rsp
          ; 540 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 540 push integer
          mov rax, 0
          push rax
          ; 541 label
while_0x0000000000000010: 
          ; 541 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 541 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 541 push integer
          mov rax, 0
          push rax
          ; 541 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 541 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000010_end
          ; 542 push integer
          mov rax, 10
          push rax
          ; 542 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 543 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 543 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 545 duplicate
          pop rax
          push rax
          push rax
          ; 545 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 545 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 545 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 545 push character
          mov rax, 57
          mov rax, 57
          push rax
          ; 545 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 545 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 545 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000041
          ; 546 push string
          mov rax, s_88
          push rax
          ; 546 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 546 push string
          mov rax, s_28
          push rax
          ; 546 push integer
          mov rax, 546
          push rax
          ; 546 push string
          mov rax, s_89
          push rax
          ; 546 push boolean
          mov rax, 1
          push rax
          ; 546 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 546 push string
          mov rax, s_7
          push rax
          ; 546 push string
          mov rax, s_28
          push rax
          ; 546 push integer
          mov rax, 546
          push rax
          ; 546 push string
          mov rax, s_89
          push rax
          ; 546 push boolean
          mov rax, 1
          push rax
          ; 546 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 546 push string
          mov rax, s_28
          push rax
          ; 546 push integer
          mov rax, 546
          push rax
          ; 546 push string
          mov rax, s_89
          push rax
          ; 546 push boolean
          mov rax, 1
          push rax
          ; 546 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 546 jump
          jmp end_0x0000000000000041
          ; 546 label
if_0x0000000000000041: 
          ; 546 label
end_0x0000000000000041: 
          ; 548 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 548 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 548 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 549 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 549 push integer
          mov rax, 1
          push rax
          ; 549 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 549 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 541 end of while-loop
          jmp while_0x0000000000000010
while_0x0000000000000010_end: 
          ; 539 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 539 return
          ret
          ; 552 create buffer
          ; 554 function definition
fn_read_file: 
          push rbp
          mov rbp, rsp
          ; 556 push integer
          mov rax, 1
          push rax
          ; 556 push string
          mov rax, s_28
          push rax
          ; 556 push integer
          mov rax, 556
          push rax
          ; 556 push string
          mov rax, s_90
          push rax
          ; 556 push boolean
          mov rax, 1
          push rax
          ; 556 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 557 duplicate
          pop rax
          push rax
          push rax
          ; 557 push integer
          mov rax, 0
          push rax
          ; 557 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 557 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 558 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 558 push character
          mov rax, 114
          mov rax, 114
          push rax
          ; 558 push string
          mov rax, s_28
          push rax
          ; 558 push integer
          mov rax, 558
          push rax
          ; 558 push string
          mov rax, s_90
          push rax
          ; 558 push boolean
          mov rax, 1
          push rax
          ; 558 call
          call fn_open
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 560 push integer
          mov rax, 1
          push rax
          ; 560 label
while_0x0000000000000011: 
          ; 560 duplicate
          pop rax
          push rax
          push rax
          ; 560 push integer
          mov rax, 0
          push rax
          ; 560 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 560 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000011_end
          ; 561 drop
          pop rax
          ; 562 duplicate
          pop rax
          push rax
          push rax
          ; 562 get pointer to buffer
          mov rax, buf__read_file_buffer
          push rax
          ; 562 push integer
          mov rax, 512
          push rax
          ; 562 push string
          mov rax, s_28
          push rax
          ; 562 push integer
          mov rax, 562
          push rax
          ; 562 push string
          mov rax, s_90
          push rax
          ; 562 push boolean
          mov rax, 1
          push rax
          ; 562 call
          call fn_read
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 563 duplicate
          pop rax
          push rax
          push rax
          ; 563 get pointer to buffer
          mov rax, buf__read_file_buffer
          push rax
          ; 563 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 563 push integer
          mov rax, 0
          push rax
          ; 563 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 563 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 564 duplicate
          pop rax
          push rax
          push rax
          ; 564 push integer
          mov rax, 0
          push rax
          ; 564 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 564 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000042
          ; 565 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 565 duplicate
          pop rax
          push rax
          push rax
          ; 565 get pointer to buffer
          mov rax, buf__read_file_buffer
          push rax
          ; 565 push string
          mov rax, s_28
          push rax
          ; 565 push integer
          mov rax, 565
          push rax
          ; 565 push string
          mov rax, s_90
          push rax
          ; 565 push boolean
          mov rax, 1
          push rax
          ; 565 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 566 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 566 push string
          mov rax, s_28
          push rax
          ; 566 push integer
          mov rax, 566
          push rax
          ; 566 push string
          mov rax, s_90
          push rax
          ; 566 push boolean
          mov rax, 1
          push rax
          ; 566 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 567 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 567 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 565 jump
          jmp end_0x0000000000000042
          ; 565 label
if_0x0000000000000042: 
          ; 565 label
end_0x0000000000000042: 
          ; 560 end of while-loop
          jmp while_0x0000000000000011
while_0x0000000000000011_end: 
          ; 568 drop
          pop rax
          ; 568 drop
          pop rax
          ; 555 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 555 return
          ret
          ; 571 function definition
fn_substring: 
          push rbp
          mov rbp, rsp
          ; 574 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 574 push integer
          mov rax, 1
          push rax
          ; 574 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 574 push string
          mov rax, s_28
          push rax
          ; 574 push integer
          mov rax, 574
          push rax
          ; 574 push string
          mov rax, s_91
          push rax
          ; 574 push boolean
          mov rax, 1
          push rax
          ; 574 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 575 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 575 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 575 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 575 push string
          mov rax, s_28
          push rax
          ; 575 push integer
          mov rax, 575
          push rax
          ; 575 push string
          mov rax, s_91
          push rax
          ; 575 push boolean
          mov rax, 1
          push rax
          ; 575 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 576 duplicate
          pop rax
          push rax
          push rax
          ; 576 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 576 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 576 push integer
          mov rax, 0
          push rax
          ; 576 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 576 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 572 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 572 return
          ret
          ; 579 function definition
fn_chop_first: 
          push rbp
          mov rbp, rsp
          ; 580 push integer
          mov rax, 0
          push rax
          ; 581 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 581 push string
          mov rax, s_28
          push rax
          ; 581 push integer
          mov rax, 581
          push rax
          ; 581 push string
          mov rax, s_92
          push rax
          ; 581 push boolean
          mov rax, 1
          push rax
          ; 581 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 581 label
while_0x0000000000000012: 
          ; 581 duplicate
          pop rax
          push rax
          push rax
          ; 581 push integer
          mov rax, 0
          push rax
          ; 581 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 581 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000012_end
          ; 582 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 582 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 582 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 582 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 582 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 582 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 582 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000043
          ; 583 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 583 drop
          pop rax
          ; 583 duplicate
          pop rax
          push rax
          push rax
          ; 583 jump
          jmp end_0x0000000000000043
          ; 583 label
if_0x0000000000000043: 
          ; 583 label
end_0x0000000000000043: 
          ; 584 push integer
          mov rax, 1
          push rax
          ; 584 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 581 end of while-loop
          jmp while_0x0000000000000012
while_0x0000000000000012_end: 
          ; 585 drop
          pop rax
          ; 586 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 586 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 586 push string
          mov rax, s_28
          push rax
          ; 586 push integer
          mov rax, 586
          push rax
          ; 586 push string
          mov rax, s_92
          push rax
          ; 586 push boolean
          mov rax, 1
          push rax
          ; 586 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 580 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 580 return
          ret
          ; 589 function definition
fn_chop_before: 
          push rbp
          mov rbp, rsp
          ; 590 push integer
          mov rax, 0
          push rax
          ; 591 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 591 push string
          mov rax, s_28
          push rax
          ; 591 push integer
          mov rax, 591
          push rax
          ; 591 push string
          mov rax, s_93
          push rax
          ; 591 push boolean
          mov rax, 1
          push rax
          ; 591 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 591 label
while_0x0000000000000013: 
          ; 591 duplicate
          pop rax
          push rax
          push rax
          ; 591 push integer
          mov rax, 0
          push rax
          ; 591 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 591 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000013_end
          ; 592 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 592 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 592 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 592 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 592 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 592 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 592 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000044
          ; 593 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 593 drop
          pop rax
          ; 593 duplicate
          pop rax
          push rax
          push rax
          ; 593 jump
          jmp end_0x0000000000000044
          ; 593 label
if_0x0000000000000044: 
          ; 593 label
end_0x0000000000000044: 
          ; 594 push integer
          mov rax, 1
          push rax
          ; 594 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 591 end of while-loop
          jmp while_0x0000000000000013
while_0x0000000000000013_end: 
          ; 595 drop
          pop rax
          ; 596 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 596 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 596 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 596 push integer
          mov rax, 1
          push rax
          ; 596 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 590 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 590 return
          ret
          ; 599 function definition
fn_chop_after: 
          push rbp
          mov rbp, rsp
          ; 600 push integer
          mov rax, 0
          push rax
          ; 601 push integer
          mov rax, 0
          push rax
          ; 601 label
while_0x0000000000000014: 
          ; 601 duplicate
          pop rax
          push rax
          push rax
          ; 601 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 601 push string
          mov rax, s_28
          push rax
          ; 601 push integer
          mov rax, 601
          push rax
          ; 601 push string
          mov rax, s_94
          push rax
          ; 601 push boolean
          mov rax, 1
          push rax
          ; 601 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 601 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 601 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000014_end
          ; 602 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 602 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 602 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 602 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 602 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 602 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 602 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000045
          ; 603 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 603 drop
          pop rax
          ; 603 duplicate
          pop rax
          push rax
          push rax
          ; 603 jump
          jmp end_0x0000000000000045
          ; 603 label
if_0x0000000000000045: 
          ; 603 label
end_0x0000000000000045: 
          ; 604 push integer
          mov rax, 1
          push rax
          ; 604 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 601 end of while-loop
          jmp while_0x0000000000000014
while_0x0000000000000014_end: 
          ; 605 drop
          pop rax
          ; 606 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 606 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 606 push string
          mov rax, s_28
          push rax
          ; 606 push integer
          mov rax, 606
          push rax
          ; 606 push string
          mov rax, s_94
          push rax
          ; 606 push boolean
          mov rax, 1
          push rax
          ; 606 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 600 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 600 return
          ret
          ; 22 function definition
fn_list_create: 
          push rbp
          mov rbp, rsp
          ; 24 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 24 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 24 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 24 push integer
          mov rax, 24
          push rax
          ; 24 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 24 push string
          mov rax, s_95
          push rax
          ; 24 push integer
          mov rax, 24
          push rax
          ; 24 push string
          mov rax, s_96
          push rax
          ; 24 push boolean
          mov rax, 1
          push rax
          ; 24 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 25 duplicate
          pop rax
          push rax
          push rax
          ; 25 push integer
          mov rax, 0
          push rax
          ; 25 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 25 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 25 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 25 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 26 duplicate
          pop rax
          push rax
          push rax
          ; 26 push integer
          mov rax, 16
          push rax
          ; 26 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 26 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 26 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 26 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 27 duplicate
          pop rax
          push rax
          push rax
          ; 27 push integer
          mov rax, 8
          push rax
          ; 27 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 27 push integer
          mov rax, 0
          push rax
          ; 27 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 27 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 23 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 23 return
          ret
          ; 30 function definition
fn_new_list: 
          push rbp
          mov rbp, rsp
          ; 32 push integer
          mov rax, 50
          push rax
          ; 32 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 32 push string
          mov rax, s_95
          push rax
          ; 32 push integer
          mov rax, 32
          push rax
          ; 32 push string
          mov rax, s_97
          push rax
          ; 32 push boolean
          mov rax, 1
          push rax
          ; 32 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 31 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 31 return
          ret
          ; 35 function definition
fn_list_copy: 
          push rbp
          mov rbp, rsp
          ; 37 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 37 push integer
          mov rax, 0
          push rax
          ; 37 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 37 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 38 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 38 push integer
          mov rax, 16
          push rax
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 38 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 38 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 39 push integer
          mov rax, 24
          push rax
          ; 39 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 40 duplicate
          pop rax
          push rax
          push rax
          ; 40 push string
          mov rax, s_95
          push rax
          ; 40 push integer
          mov rax, 40
          push rax
          ; 40 push string
          mov rax, s_98
          push rax
          ; 40 push boolean
          mov rax, 1
          push rax
          ; 40 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 41 duplicate
          pop rax
          push rax
          push rax
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 41 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 41 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 41 push string
          mov rax, s_95
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_98
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 36 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 36 return
          ret
          ; 44 function definition
fn_list_eq: 
          push rbp
          mov rbp, rsp
          ; 46 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 46 push integer
          mov rax, 8
          push rax
          ; 46 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 46 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 46 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 46 push integer
          mov rax, 8
          push rax
          ; 46 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 46 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 46 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 47 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 47 push integer
          mov rax, 16
          push rax
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 47 push integer
          mov rax, 16
          push rax
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 47 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 47 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 47 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000046
          ; 48 push boolean
          mov rax, 1
          push rax
          ; 49 push integer
          mov rax, 24
          push rax
          ; 50 label
while_0x0000000000000015: 
          ; 50 duplicate
          pop rax
          push rax
          push rax
          ; 50 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 50 push integer
          mov rax, 8
          push rax
          ; 50 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 50 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 50 push integer
          mov rax, 16
          push rax
          ; 50 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 50 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 50 push integer
          mov rax, 24
          push rax
          ; 50 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 50 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000015_end
          ; 51 duplicate
          pop rax
          push rax
          push rax
          ; 51 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 51 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 51 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 51 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 51 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000047
          ; 52 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 52 drop
          pop rax
          ; 52 push boolean
          mov rax, 0
          push rax
          ; 52 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 52 jump
          jmp end_0x0000000000000047
          ; 52 label
if_0x0000000000000047: 
          ; 52 label
end_0x0000000000000047: 
          ; 53 push integer
          mov rax, 1
          push rax
          ; 53 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 end of while-loop
          jmp while_0x0000000000000015
while_0x0000000000000015_end: 
          ; 54 drop
          pop rax
          ; 48 jump
          jmp end_0x0000000000000046
          ; 48 label
if_0x0000000000000046: 
          ; 56 push boolean
          mov rax, 0
          push rax
          ; 56 label
end_0x0000000000000046: 
          ; 45 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 45 return
          ret
          ; 59 function definition
fn_list_fetch: 
          push rbp
          mov rbp, rsp
          ; 61 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 61 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 61 push integer
          mov rax, 8
          push rax
          ; 61 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 61 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 61 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 61 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000048
          ; 62 push string
          mov rax, s_99
          push rax
          ; 62 push string
          mov rax, s_95
          push rax
          ; 62 push integer
          mov rax, 62
          push rax
          ; 62 push string
          mov rax, s_100
          push rax
          ; 62 push boolean
          mov rax, 1
          push rax
          ; 62 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 62 jump
          jmp end_0x0000000000000048
          ; 62 label
if_0x0000000000000048: 
          ; 62 label
end_0x0000000000000048: 
          ; 63 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 63 push integer
          mov rax, 24
          push rax
          ; 63 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 63 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 63 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 63 push integer
          mov rax, 16
          push rax
          ; 63 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 63 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 63 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 63 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 60 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 60 return
          ret
          ; 66 function definition
fn_list_fetch_int: 
          push rbp
          mov rbp, rsp
          ; 68 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 68 push integer
          mov rax, 16
          push rax
          ; 68 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 68 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 68 push integer
          mov rax, 8
          push rax
          ; 68 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 68 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000049
          ; 69 push string
          mov rax, s_101
          push rax
          ; 69 push string
          mov rax, s_95
          push rax
          ; 69 push integer
          mov rax, 69
          push rax
          ; 69 push string
          mov rax, s_102
          push rax
          ; 69 push boolean
          mov rax, 1
          push rax
          ; 69 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 69 jump
          jmp end_0x0000000000000049
          ; 69 label
if_0x0000000000000049: 
          ; 69 label
end_0x0000000000000049: 
          ; 71 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 71 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 71 push integer
          mov rax, 8
          push rax
          ; 71 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 71 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 71 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 71 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004a
          ; 72 push string
          mov rax, s_99
          push rax
          ; 72 push string
          mov rax, s_95
          push rax
          ; 72 push integer
          mov rax, 72
          push rax
          ; 72 push string
          mov rax, s_102
          push rax
          ; 72 push boolean
          mov rax, 1
          push rax
          ; 72 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 72 jump
          jmp end_0x000000000000004a
          ; 72 label
if_0x000000000000004a: 
          ; 72 label
end_0x000000000000004a: 
          ; 74 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 74 push integer
          mov rax, 24
          push rax
          ; 74 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 74 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 74 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 74 push integer
          mov rax, 16
          push rax
          ; 74 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 74 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 74 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 74 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 74 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 67 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 67 return
          ret
          ; 77 function definition
fn_list_fetch_ptr: 
          push rbp
          mov rbp, rsp
          ; 79 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 16
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 8
          push rax
          ; 79 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 79 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004b
          ; 80 push string
          mov rax, s_103
          push rax
          ; 80 push string
          mov rax, s_95
          push rax
          ; 80 push integer
          mov rax, 80
          push rax
          ; 80 push string
          mov rax, s_104
          push rax
          ; 80 push boolean
          mov rax, 1
          push rax
          ; 80 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 80 jump
          jmp end_0x000000000000004b
          ; 80 label
if_0x000000000000004b: 
          ; 80 label
end_0x000000000000004b: 
          ; 82 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 82 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 82 push integer
          mov rax, 8
          push rax
          ; 82 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 82 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 82 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 82 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004c
          ; 83 push string
          mov rax, s_99
          push rax
          ; 83 push string
          mov rax, s_95
          push rax
          ; 83 push integer
          mov rax, 83
          push rax
          ; 83 push string
          mov rax, s_104
          push rax
          ; 83 push boolean
          mov rax, 1
          push rax
          ; 83 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 83 jump
          jmp end_0x000000000000004c
          ; 83 label
if_0x000000000000004c: 
          ; 83 label
end_0x000000000000004c: 
          ; 85 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 85 push integer
          mov rax, 24
          push rax
          ; 85 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 85 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 85 push integer
          mov rax, 16
          push rax
          ; 85 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 85 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 85 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 78 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 78 return
          ret
          ; 88 function definition
fn_list_contains_string: 
          push rbp
          mov rbp, rsp
          ; 90 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 90 push integer
          mov rax, 16
          push rax
          ; 90 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 90 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 90 push integer
          mov rax, 8
          push rax
          ; 90 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 90 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004d
          ; 91 push string
          mov rax, s_103
          push rax
          ; 91 push string
          mov rax, s_95
          push rax
          ; 91 push integer
          mov rax, 91
          push rax
          ; 91 push string
          mov rax, s_105
          push rax
          ; 91 push boolean
          mov rax, 1
          push rax
          ; 91 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 91 jump
          jmp end_0x000000000000004d
          ; 91 label
if_0x000000000000004d: 
          ; 91 label
end_0x000000000000004d: 
          ; 93 push boolean
          mov rax, 0
          push rax
          ; 94 push integer
          mov rax, 0
          push rax
          ; 95 label
while_0x0000000000000016: 
          ; 95 duplicate
          pop rax
          push rax
          push rax
          ; 95 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 95 push integer
          mov rax, 8
          push rax
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 95 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 95 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000016_end
          ; 96 duplicate
          pop rax
          push rax
          push rax
          ; 96 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 96 push string
          mov rax, s_95
          push rax
          ; 96 push integer
          mov rax, 96
          push rax
          ; 96 push string
          mov rax, s_105
          push rax
          ; 96 push boolean
          mov rax, 1
          push rax
          ; 96 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 96 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 96 push string
          mov rax, s_95
          push rax
          ; 96 push integer
          mov rax, 96
          push rax
          ; 96 push string
          mov rax, s_105
          push rax
          ; 96 push boolean
          mov rax, 1
          push rax
          ; 96 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 96 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004e
          ; 97 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 97 drop
          pop rax
          ; 97 push boolean
          mov rax, 1
          push rax
          ; 97 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 97 jump
          jmp end_0x000000000000004e
          ; 97 label
if_0x000000000000004e: 
          ; 97 label
end_0x000000000000004e: 
          ; 98 push integer
          mov rax, 1
          push rax
          ; 98 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 end of while-loop
          jmp while_0x0000000000000016
while_0x0000000000000016_end: 
          ; 99 drop
          pop rax
          ; 89 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 89 return
          ret
          ; 102 function definition
fn_list_pop: 
          push rbp
          mov rbp, rsp
          ; 105 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 105 push integer
          mov rax, 8
          push rax
          ; 105 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 105 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 105 push integer
          mov rax, 0
          push rax
          ; 105 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 105 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000004f
          ; 106 push string
          mov rax, s_106
          push rax
          ; 106 push string
          mov rax, s_95
          push rax
          ; 106 push integer
          mov rax, 106
          push rax
          ; 106 push string
          mov rax, s_107
          push rax
          ; 106 push boolean
          mov rax, 1
          push rax
          ; 106 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 106 jump
          jmp end_0x000000000000004f
          ; 106 label
if_0x000000000000004f: 
          ; 106 label
end_0x000000000000004f: 
          ; 109 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 109 push integer
          mov rax, 8
          push rax
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 push integer
          mov rax, 1
          push rax
          ; 109 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 112 duplicate
          pop rax
          push rax
          push rax
          ; 112 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 112 push string
          mov rax, s_95
          push rax
          ; 112 push integer
          mov rax, 112
          push rax
          ; 112 push string
          mov rax, s_107
          push rax
          ; 112 push boolean
          mov rax, 1
          push rax
          ; 112 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 115 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 115 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 115 push integer
          mov rax, 8
          push rax
          ; 115 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 115 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 118 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 118 push integer
          mov rax, 16
          push rax
          ; 118 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 118 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 118 push string
          mov rax, s_95
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_107
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 119 duplicate
          pop rax
          push rax
          push rax
          ; 119 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 119 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 120 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 120 push integer
          mov rax, 16
          push rax
          ; 120 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 120 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 120 push string
          mov rax, s_95
          push rax
          ; 120 push integer
          mov rax, 120
          push rax
          ; 120 push string
          mov rax, s_107
          push rax
          ; 120 push boolean
          mov rax, 1
          push rax
          ; 120 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 103 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 103 return
          ret
          ; 123 function definition
fn_list_pop_int: 
          push rbp
          mov rbp, rsp
          ; 125 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 125 push integer
          mov rax, 16
          push rax
          ; 125 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 125 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 125 push integer
          mov rax, 8
          push rax
          ; 125 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 125 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000050
          ; 126 push string
          mov rax, s_101
          push rax
          ; 126 push string
          mov rax, s_95
          push rax
          ; 126 push integer
          mov rax, 126
          push rax
          ; 126 push string
          mov rax, s_108
          push rax
          ; 126 push boolean
          mov rax, 1
          push rax
          ; 126 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 126 jump
          jmp end_0x0000000000000050
          ; 126 label
if_0x0000000000000050: 
          ; 126 label
end_0x0000000000000050: 
          ; 128 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 128 push integer
          mov rax, 8
          push rax
          ; 128 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 128 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 128 push integer
          mov rax, 0
          push rax
          ; 128 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 128 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000051
          ; 129 push string
          mov rax, s_106
          push rax
          ; 129 push string
          mov rax, s_95
          push rax
          ; 129 push integer
          mov rax, 129
          push rax
          ; 129 push string
          mov rax, s_108
          push rax
          ; 129 push boolean
          mov rax, 1
          push rax
          ; 129 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 129 jump
          jmp end_0x0000000000000051
          ; 129 label
if_0x0000000000000051: 
          ; 129 label
end_0x0000000000000051: 
          ; 131 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 131 push integer
          mov rax, 8
          push rax
          ; 131 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 131 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 131 push integer
          mov rax, 1
          push rax
          ; 131 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 132 duplicate
          pop rax
          push rax
          push rax
          ; 132 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 132 push integer
          mov rax, 8
          push rax
          ; 132 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 132 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 133 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 133 push integer
          mov rax, 16
          push rax
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 133 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 133 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 133 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 133 push integer
          mov rax, 24
          push rax
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 133 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 124 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 124 return
          ret
          ; 136 function definition
fn_list_pop_ptr: 
          push rbp
          mov rbp, rsp
          ; 138 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 138 push integer
          mov rax, 16
          push rax
          ; 138 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 138 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 138 push integer
          mov rax, 8
          push rax
          ; 138 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 138 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000052
          ; 139 push string
          mov rax, s_103
          push rax
          ; 139 push string
          mov rax, s_95
          push rax
          ; 139 push integer
          mov rax, 139
          push rax
          ; 139 push string
          mov rax, s_109
          push rax
          ; 139 push boolean
          mov rax, 1
          push rax
          ; 139 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 139 jump
          jmp end_0x0000000000000052
          ; 139 label
if_0x0000000000000052: 
          ; 139 label
end_0x0000000000000052: 
          ; 141 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 141 push integer
          mov rax, 8
          push rax
          ; 141 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 141 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 141 push integer
          mov rax, 0
          push rax
          ; 141 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 141 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000053
          ; 142 push string
          mov rax, s_106
          push rax
          ; 142 push string
          mov rax, s_95
          push rax
          ; 142 push integer
          mov rax, 142
          push rax
          ; 142 push string
          mov rax, s_109
          push rax
          ; 142 push boolean
          mov rax, 1
          push rax
          ; 142 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 142 jump
          jmp end_0x0000000000000053
          ; 142 label
if_0x0000000000000053: 
          ; 142 label
end_0x0000000000000053: 
          ; 144 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 144 push integer
          mov rax, 8
          push rax
          ; 144 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 144 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 144 push integer
          mov rax, 1
          push rax
          ; 144 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 145 duplicate
          pop rax
          push rax
          push rax
          ; 145 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 145 push integer
          mov rax, 8
          push rax
          ; 145 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 145 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 146 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 146 push integer
          mov rax, 16
          push rax
          ; 146 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 146 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 146 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 146 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 146 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 146 push integer
          mov rax, 24
          push rax
          ; 146 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 146 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 137 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 137 return
          ret
          ; 149 function definition
fn_list_peek: 
          push rbp
          mov rbp, rsp
          ; 151 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 151 push integer
          mov rax, 8
          push rax
          ; 151 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 151 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 151 push integer
          mov rax, 0
          push rax
          ; 151 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 151 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000054
          ; 152 push string
          mov rax, s_110
          push rax
          ; 152 push string
          mov rax, s_95
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_111
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 152 jump
          jmp end_0x0000000000000054
          ; 152 label
if_0x0000000000000054: 
          ; 152 label
end_0x0000000000000054: 
          ; 154 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 154 duplicate
          pop rax
          push rax
          push rax
          ; 154 push integer
          mov rax, 8
          push rax
          ; 154 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 154 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 154 push integer
          mov rax, 1
          push rax
          ; 154 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 154 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 154 push string
          mov rax, s_95
          push rax
          ; 154 push integer
          mov rax, 154
          push rax
          ; 154 push string
          mov rax, s_111
          push rax
          ; 154 push boolean
          mov rax, 1
          push rax
          ; 154 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 150 return
          ret
          ; 157 function definition
fn_list_peek_int: 
          push rbp
          mov rbp, rsp
          ; 159 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 159 push integer
          mov rax, 16
          push rax
          ; 159 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 159 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 159 push integer
          mov rax, 8
          push rax
          ; 159 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 159 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000055
          ; 160 push string
          mov rax, s_101
          push rax
          ; 160 push string
          mov rax, s_95
          push rax
          ; 160 push integer
          mov rax, 160
          push rax
          ; 160 push string
          mov rax, s_112
          push rax
          ; 160 push boolean
          mov rax, 1
          push rax
          ; 160 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 160 jump
          jmp end_0x0000000000000055
          ; 160 label
if_0x0000000000000055: 
          ; 160 label
end_0x0000000000000055: 
          ; 162 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 162 push integer
          mov rax, 8
          push rax
          ; 162 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 162 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 162 push integer
          mov rax, 0
          push rax
          ; 162 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 162 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000056
          ; 163 push string
          mov rax, s_110
          push rax
          ; 163 push string
          mov rax, s_95
          push rax
          ; 163 push integer
          mov rax, 163
          push rax
          ; 163 push string
          mov rax, s_112
          push rax
          ; 163 push boolean
          mov rax, 1
          push rax
          ; 163 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 163 jump
          jmp end_0x0000000000000056
          ; 163 label
if_0x0000000000000056: 
          ; 163 label
end_0x0000000000000056: 
          ; 165 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 165 duplicate
          pop rax
          push rax
          push rax
          ; 165 push integer
          mov rax, 8
          push rax
          ; 165 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 165 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 165 push integer
          mov rax, 1
          push rax
          ; 165 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 165 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 165 push string
          mov rax, s_95
          push rax
          ; 165 push integer
          mov rax, 165
          push rax
          ; 165 push string
          mov rax, s_112
          push rax
          ; 165 push boolean
          mov rax, 1
          push rax
          ; 165 call
          call fn_list_fetch_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 158 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 158 return
          ret
          ; 168 function definition
fn_list_peek_ptr: 
          push rbp
          mov rbp, rsp
          ; 170 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 170 push integer
          mov rax, 16
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 170 push integer
          mov rax, 8
          push rax
          ; 170 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 170 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000057
          ; 171 push string
          mov rax, s_103
          push rax
          ; 171 push string
          mov rax, s_95
          push rax
          ; 171 push integer
          mov rax, 171
          push rax
          ; 171 push string
          mov rax, s_113
          push rax
          ; 171 push boolean
          mov rax, 1
          push rax
          ; 171 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 171 jump
          jmp end_0x0000000000000057
          ; 171 label
if_0x0000000000000057: 
          ; 171 label
end_0x0000000000000057: 
          ; 173 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 173 push integer
          mov rax, 8
          push rax
          ; 173 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 173 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 173 push integer
          mov rax, 0
          push rax
          ; 173 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 173 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000058
          ; 174 push string
          mov rax, s_110
          push rax
          ; 174 push string
          mov rax, s_95
          push rax
          ; 174 push integer
          mov rax, 174
          push rax
          ; 174 push string
          mov rax, s_113
          push rax
          ; 174 push boolean
          mov rax, 1
          push rax
          ; 174 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 174 jump
          jmp end_0x0000000000000058
          ; 174 label
if_0x0000000000000058: 
          ; 174 label
end_0x0000000000000058: 
          ; 176 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 176 duplicate
          pop rax
          push rax
          push rax
          ; 176 push integer
          mov rax, 8
          push rax
          ; 176 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 176 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 176 push integer
          mov rax, 1
          push rax
          ; 176 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 176 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 176 push string
          mov rax, s_95
          push rax
          ; 176 push integer
          mov rax, 176
          push rax
          ; 176 push string
          mov rax, s_113
          push rax
          ; 176 push boolean
          mov rax, 1
          push rax
          ; 176 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 169 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 169 return
          ret
          ; 179 function definition
fn_list_append: 
          push rbp
          mov rbp, rsp
          ; 181 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 181 push integer
          mov rax, 8
          push rax
          ; 181 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 181 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 182 push integer
          mov rax, 0
          push rax
          ; 182 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 182 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 182 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000059
          ; 184 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 184 push integer
          mov rax, 0
          push rax
          ; 184 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 184 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 184 push integer
          mov rax, 2
          push rax
          ; 184 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 184 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 184 push integer
          mov rax, 16
          push rax
          ; 184 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 184 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 184 push string
          mov rax, s_95
          push rax
          ; 184 push integer
          mov rax, 184
          push rax
          ; 184 push string
          mov rax, s_114
          push rax
          ; 184 push boolean
          mov rax, 1
          push rax
          ; 184 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 187 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 187 push integer
          mov rax, 24
          push rax
          ; 187 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 188 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 188 push integer
          mov rax, 24
          push rax
          ; 188 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 189 push integer
          mov rax, 8
          push rax
          ; 189 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 189 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 189 push integer
          mov rax, 16
          push rax
          ; 189 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 189 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 190 push string
          mov rax, s_95
          push rax
          ; 190 push integer
          mov rax, 190
          push rax
          ; 190 push string
          mov rax, s_114
          push rax
          ; 190 push boolean
          mov rax, 1
          push rax
          ; 190 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 193 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 193 push integer
          mov rax, 8
          push rax
          ; 193 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 193 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 194 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 194 push integer
          mov rax, 8
          push rax
          ; 194 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 194 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 197 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 197 push string
          mov rax, s_95
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_114
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 183 jump
          jmp end_0x0000000000000059
          ; 183 label
if_0x0000000000000059: 
          ; 199 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 199 label
end_0x0000000000000059: 
          ; 202 duplicate
          pop rax
          push rax
          push rax
          ; 202 push integer
          mov rax, 8
          push rax
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 202 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 202 push integer
          mov rax, 16
          push rax
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 202 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 202 push integer
          mov rax, 24
          push rax
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 203 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 203 push integer
          mov rax, 16
          push rax
          ; 203 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 203 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 204 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 204 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 204 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 204 push string
          mov rax, s_95
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_114
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 206 duplicate
          pop rax
          push rax
          push rax
          ; 206 push integer
          mov rax, 8
          push rax
          ; 206 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 206 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 206 push integer
          mov rax, 1
          push rax
          ; 206 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 206 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 206 push integer
          mov rax, 8
          push rax
          ; 206 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 206 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 180 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 180 return
          ret
          ; 209 function definition
fn_list_append_int: 
          push rbp
          mov rbp, rsp
          ; 211 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 211 push integer
          mov rax, 16
          push rax
          ; 211 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 211 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 211 push integer
          mov rax, 8
          push rax
          ; 211 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 211 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005a
          ; 212 push string
          mov rax, s_101
          push rax
          ; 212 push string
          mov rax, s_95
          push rax
          ; 212 push integer
          mov rax, 212
          push rax
          ; 212 push string
          mov rax, s_115
          push rax
          ; 212 push boolean
          mov rax, 1
          push rax
          ; 212 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 212 jump
          jmp end_0x000000000000005a
          ; 212 label
if_0x000000000000005a: 
          ; 212 label
end_0x000000000000005a: 
          ; 214 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 214 push integer
          mov rax, 8
          push rax
          ; 214 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 214 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 215 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 215 push integer
          mov rax, 0
          push rax
          ; 215 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 215 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 215 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 215 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005b
          ; 217 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 217 push integer
          mov rax, 0
          push rax
          ; 217 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 217 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 217 push integer
          mov rax, 2
          push rax
          ; 217 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 217 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 217 push integer
          mov rax, 16
          push rax
          ; 217 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 217 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 217 push string
          mov rax, s_95
          push rax
          ; 217 push integer
          mov rax, 217
          push rax
          ; 217 push string
          mov rax, s_115
          push rax
          ; 217 push boolean
          mov rax, 1
          push rax
          ; 217 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 220 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 220 push integer
          mov rax, 24
          push rax
          ; 220 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 221 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 221 push integer
          mov rax, 24
          push rax
          ; 221 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 222 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 222 push integer
          mov rax, 8
          push rax
          ; 222 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 222 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 222 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 222 push integer
          mov rax, 16
          push rax
          ; 222 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 222 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 222 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 223 push string
          mov rax, s_95
          push rax
          ; 223 push integer
          mov rax, 223
          push rax
          ; 223 push string
          mov rax, s_115
          push rax
          ; 223 push boolean
          mov rax, 1
          push rax
          ; 223 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 226 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 226 push integer
          mov rax, 8
          push rax
          ; 226 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 226 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 227 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 227 push integer
          mov rax, 8
          push rax
          ; 227 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 227 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 230 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 230 push string
          mov rax, s_95
          push rax
          ; 230 push integer
          mov rax, 230
          push rax
          ; 230 push string
          mov rax, s_115
          push rax
          ; 230 push boolean
          mov rax, 1
          push rax
          ; 230 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 216 jump
          jmp end_0x000000000000005b
          ; 216 label
if_0x000000000000005b: 
          ; 232 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 232 label
end_0x000000000000005b: 
          ; 235 duplicate
          pop rax
          push rax
          push rax
          ; 235 push integer
          mov rax, 8
          push rax
          ; 235 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 235 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 236 duplicate
          pop rax
          push rax
          push rax
          ; 236 push integer
          mov rax, 1
          push rax
          ; 236 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 236 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 236 duplicate
          pop rax
          push rax
          push rax
          ; 236 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 236 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 236 push integer
          mov rax, 8
          push rax
          ; 236 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 236 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 236 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 237 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 237 push integer
          mov rax, 16
          push rax
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 237 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 237 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 237 push integer
          mov rax, 24
          push rax
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 237 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 237 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 237 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 237 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 210 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 210 return
          ret
          ; 240 function definition
fn_list_append_ptr: 
          push rbp
          mov rbp, rsp
          ; 242 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 242 push integer
          mov rax, 16
          push rax
          ; 242 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 242 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 242 push integer
          mov rax, 8
          push rax
          ; 242 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 242 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005c
          ; 243 push string
          mov rax, s_103
          push rax
          ; 243 push string
          mov rax, s_95
          push rax
          ; 243 push integer
          mov rax, 243
          push rax
          ; 243 push string
          mov rax, s_116
          push rax
          ; 243 push boolean
          mov rax, 1
          push rax
          ; 243 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 243 jump
          jmp end_0x000000000000005c
          ; 243 label
if_0x000000000000005c: 
          ; 243 label
end_0x000000000000005c: 
          ; 245 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 245 push integer
          mov rax, 8
          push rax
          ; 245 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 245 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 246 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 246 push integer
          mov rax, 0
          push rax
          ; 246 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 246 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 246 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 246 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005d
          ; 248 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 248 push integer
          mov rax, 0
          push rax
          ; 248 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 248 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 248 push integer
          mov rax, 2
          push rax
          ; 248 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 248 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 248 push integer
          mov rax, 16
          push rax
          ; 248 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 248 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 248 push string
          mov rax, s_95
          push rax
          ; 248 push integer
          mov rax, 248
          push rax
          ; 248 push string
          mov rax, s_116
          push rax
          ; 248 push boolean
          mov rax, 1
          push rax
          ; 248 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 251 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 251 push integer
          mov rax, 24
          push rax
          ; 251 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 252 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 252 push integer
          mov rax, 24
          push rax
          ; 252 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 253 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 253 push integer
          mov rax, 8
          push rax
          ; 253 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 253 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 253 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 253 push integer
          mov rax, 16
          push rax
          ; 253 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 253 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 253 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 254 push string
          mov rax, s_95
          push rax
          ; 254 push integer
          mov rax, 254
          push rax
          ; 254 push string
          mov rax, s_116
          push rax
          ; 254 push boolean
          mov rax, 1
          push rax
          ; 254 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 257 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 257 push integer
          mov rax, 8
          push rax
          ; 257 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 257 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 258 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 258 push integer
          mov rax, 8
          push rax
          ; 258 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 258 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 261 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 261 push string
          mov rax, s_95
          push rax
          ; 261 push integer
          mov rax, 261
          push rax
          ; 261 push string
          mov rax, s_116
          push rax
          ; 261 push boolean
          mov rax, 1
          push rax
          ; 261 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 247 jump
          jmp end_0x000000000000005d
          ; 247 label
if_0x000000000000005d: 
          ; 263 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 263 label
end_0x000000000000005d: 
          ; 266 duplicate
          pop rax
          push rax
          push rax
          ; 266 push integer
          mov rax, 8
          push rax
          ; 266 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 266 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 267 duplicate
          pop rax
          push rax
          push rax
          ; 267 push integer
          mov rax, 1
          push rax
          ; 267 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 267 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 267 duplicate
          pop rax
          push rax
          push rax
          ; 267 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 267 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 267 push integer
          mov rax, 8
          push rax
          ; 267 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 267 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 267 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 268 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 268 push integer
          mov rax, 16
          push rax
          ; 268 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 268 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 268 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 268 push integer
          mov rax, 24
          push rax
          ; 268 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 268 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 268 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 268 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 268 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 268 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 241 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 241 return
          ret
          ; 24 function definition
fn_hash:  
          push rbp
          mov rbp, rsp
          ; 26 push integer
          mov rax, 0
          push rax
          ; 27 push integer
          mov rax, 0
          push rax
          ; 28 label
while_0x0000000000000017: 
          ; 28 duplicate
          pop rax
          push rax
          push rax
          ; 28 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 28 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 28 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000017_end
          ; 29 duplicate
          pop rax
          push rax
          push rax
          ; 29 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 29 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 29 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 31 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 33 duplicate
          pop rax
          push rax
          push rax
          ; 33 push integer
          mov rax, 6
          push rax
          ; 33 shift left
          pop rcx
          pop rax
          shl rax, cl
          push rax
          ; 35 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 35 push integer
          mov rax, 16
          push rax
          ; 35 shift left
          pop rcx
          pop rax
          shl rax, cl
          push rax
          ; 35 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 37 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 37 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 37 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 39 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 40 push integer
          mov rax, 1
          push rax
          ; 40 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 28 end of while-loop
          jmp while_0x0000000000000017
while_0x0000000000000017_end: 
          ; 41 drop
          pop rax
          ; 25 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 25 return
          ret
          ; 44 function definition
fn_create_dict: 
          push rbp
          mov rbp, rsp
          ; 46 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 46 push integer
          mov rax, 17
          push rax
          ; 46 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 46 push integer
          mov rax, 16
          push rax
          ; 46 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 46 push string
          mov rax, s_117
          push rax
          ; 46 push integer
          mov rax, 46
          push rax
          ; 46 push string
          mov rax, s_118
          push rax
          ; 46 push boolean
          mov rax, 1
          push rax
          ; 46 call
          call fn_zalloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 47 push integer
          mov rax, 0
          push rax
          ; 47 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 47 push integer
          mov rax, 0
          push rax
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 48 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 48 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 48 push integer
          mov rax, 8
          push rax
          ; 48 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 48 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 45 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 45 return
          ret
          ; 51 function definition
fn_new_dict: 
          push rbp
          mov rbp, rsp
          ; 53 push integer
          mov rax, 50
          push rax
          ; 53 push string
          mov rax, s_117
          push rax
          ; 53 push integer
          mov rax, 53
          push rax
          ; 53 push string
          mov rax, s_119
          push rax
          ; 53 push boolean
          mov rax, 1
          push rax
          ; 53 call
          call fn_create_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 52 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 52 return
          ret
          ; 56 function definition
fn_dict_fetch: 
          push rbp
          mov rbp, rsp
          ; 58 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 58 push integer
          mov rax, 8
          push rax
          ; 58 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 58 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 58 push integer
          mov rax, 0
          push rax
          ; 58 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 58 push string
          mov rax, s_120
          push rax
          ; 58 push string
          mov rax, s_117
          push rax
          ; 58 push integer
          mov rax, 58
          push rax
          ; 58 push string
          mov rax, s_121
          push rax
          ; 58 push boolean
          mov rax, 1
          push rax
          ; 58 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 60 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 60 duplicate
          pop rax
          push rax
          push rax
          ; 60 push string
          mov rax, s_117
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_121
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 60 push string
          mov rax, s_117
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_121
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_hash
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 60 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 60 push integer
          mov rax, 8
          push rax
          ; 60 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 60 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 60 mod
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rdx
          ; 61 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 61 push integer
          mov rax, 16
          push rax
          ; 61 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 61 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 61 push integer
          mov rax, 17
          push rax
          ; 61 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 61 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 62 label
while_0x0000000000000018: 
          ; 62 duplicate
          pop rax
          push rax
          push rax
          ; 62 push integer
          mov rax, 16
          push rax
          ; 62 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 62 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 63 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 63 push integer
          mov rax, 0
          push rax
          ; 63 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 63 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 63 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 63 push string
          mov rax, s_117
          push rax
          ; 63 push integer
          mov rax, 63
          push rax
          ; 63 push string
          mov rax, s_121
          push rax
          ; 63 push boolean
          mov rax, 1
          push rax
          ; 63 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 63 push boolean
          mov rax, 0
          push rax
          ; 63 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 63 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 62 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000018_end
          ; 64 drop
          pop rax
          ; 65 push integer
          mov rax, 1
          push rax
          ; 65 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 65 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 65 push integer
          mov rax, 8
          push rax
          ; 65 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 65 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 65 mod
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rdx
          ; 66 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 66 push integer
          mov rax, 16
          push rax
          ; 66 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 66 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 66 push integer
          mov rax, 17
          push rax
          ; 66 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 66 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 62 end of while-loop
          jmp while_0x0000000000000018
while_0x0000000000000018_end: 
          ; 68 duplicate
          pop rax
          push rax
          push rax
          ; 68 push integer
          mov rax, 16
          push rax
          ; 68 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 68 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 68 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005e
          ; 69 duplicate
          pop rax
          push rax
          push rax
          ; 69 push integer
          mov rax, 8
          push rax
          ; 69 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 69 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 69 jump
          jmp end_0x000000000000005e
          ; 69 label
if_0x000000000000005e: 
          ; 71 push string
          mov rax, s_117
          push rax
          ; 71 push integer
          mov rax, 71
          push rax
          ; 71 push string
          mov rax, s_121
          push rax
          ; 71 push boolean
          mov rax, 1
          push rax
          ; 71 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 71 label
end_0x000000000000005e: 
          ; 57 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 57 return
          ret
          ; 74 function definition
fn_dict_insert: 
          push rbp
          mov rbp, rsp
          ; 76 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 76 push integer
          mov rax, 8
          push rax
          ; 76 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 76 push integer
          mov rax, 0
          push rax
          ; 76 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 76 push string
          mov rax, s_122
          push rax
          ; 76 push string
          mov rax, s_117
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_123
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 79 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 0
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 3
          push rax
          ; 79 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 79 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 8
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 79 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 79 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000005f
          ; 81 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 81 push integer
          mov rax, 8
          push rax
          ; 81 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 81 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 81 push integer
          mov rax, 2
          push rax
          ; 81 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 81 push string
          mov rax, s_117
          push rax
          ; 81 push integer
          mov rax, 81
          push rax
          ; 81 push string
          mov rax, s_123
          push rax
          ; 81 push boolean
          mov rax, 1
          push rax
          ; 81 call
          call fn_create_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 84 push integer
          mov rax, 0
          push rax
          ; 85 label
while_0x0000000000000019: 
          ; 85 duplicate
          pop rax
          push rax
          push rax
          ; 85 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 85 push integer
          mov rax, 8
          push rax
          ; 85 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 85 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 85 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000019_end
          ; 86 duplicate
          pop rax
          push rax
          push rax
          ; 86 push integer
          mov rax, 17
          push rax
          ; 86 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 86 push integer
          mov rax, 16
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 86 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 89 duplicate
          pop rax
          push rax
          push rax
          ; 89 push integer
          mov rax, 16
          push rax
          ; 89 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 89 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 89 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000060
          ; 90 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 90 duplicate
          pop rax
          push rax
          push rax
          ; 90 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 91 duplicate
          pop rax
          push rax
          push rax
          ; 91 push integer
          mov rax, 0
          push rax
          ; 91 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 91 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 92 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 92 push integer
          mov rax, 8
          push rax
          ; 92 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 92 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 93 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 94 push string
          mov rax, s_117
          push rax
          ; 94 push integer
          mov rax, 94
          push rax
          ; 94 push string
          mov rax, s_123
          push rax
          ; 94 push boolean
          mov rax, 1
          push rax
          ; 94 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 94 drop
          pop rax
          ; 95 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 90 jump
          jmp end_0x0000000000000060
          ; 90 label
if_0x0000000000000060: 
          ; 97 drop
          pop rax
          ; 97 label
end_0x0000000000000060: 
          ; 99 push integer
          mov rax, 1
          push rax
          ; 99 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 end of while-loop
          jmp while_0x0000000000000019
while_0x0000000000000019_end: 
          ; 100 drop
          pop rax
          ; 103 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 103 push string
          mov rax, s_117
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_123
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 80 jump
          jmp end_0x000000000000005f
          ; 80 label
if_0x000000000000005f: 
          ; 105 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 105 label
end_0x000000000000005f: 
          ; 108 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 108 duplicate
          pop rax
          push rax
          push rax
          ; 108 push string
          mov rax, s_117
          push rax
          ; 108 push integer
          mov rax, 108
          push rax
          ; 108 push string
          mov rax, s_123
          push rax
          ; 108 push boolean
          mov rax, 1
          push rax
          ; 108 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 108 push string
          mov rax, s_117
          push rax
          ; 108 push integer
          mov rax, 108
          push rax
          ; 108 push string
          mov rax, s_123
          push rax
          ; 108 push boolean
          mov rax, 1
          push rax
          ; 108 call
          call fn_hash
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 109 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 109 push integer
          mov rax, 8
          push rax
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 mod
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rdx
          ; 112 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 112 push integer
          mov rax, 16
          push rax
          ; 112 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 112 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 112 push integer
          mov rax, 17
          push rax
          ; 112 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 112 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 label
while_0x000000000000001a: 
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 push integer
          mov rax, 16
          push rax
          ; 113 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 113 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001a_end
          ; 114 drop
          pop rax
          ; 115 push integer
          mov rax, 1
          push rax
          ; 115 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 115 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 115 push integer
          mov rax, 8
          push rax
          ; 115 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 115 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 115 mod
          xor rdx, rdx
          pop rbx
          pop rax
          div rbx
          push rdx
          ; 116 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 116 push integer
          mov rax, 16
          push rax
          ; 116 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 116 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 116 push integer
          mov rax, 17
          push rax
          ; 116 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 116 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 end of while-loop
          jmp while_0x000000000000001a
while_0x000000000000001a_end: 
          ; 119 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 119 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 119 push integer
          mov rax, 0
          push rax
          ; 119 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 119 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 120 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 120 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 120 push integer
          mov rax, 8
          push rax
          ; 120 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 120 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 121 push boolean
          mov rax, 1
          push rax
          ; 121 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 121 push integer
          mov rax, 16
          push rax
          ; 121 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 121 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 124 drop
          pop rax
          ; 124 drop
          pop rax
          ; 125 duplicate
          pop rax
          push rax
          push rax
          ; 125 push integer
          mov rax, 0
          push rax
          ; 125 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 125 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 125 push integer
          mov rax, 1
          push rax
          ; 125 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 125 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 125 push integer
          mov rax, 0
          push rax
          ; 125 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 125 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 75 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 75 return
          ret
          ; 26 create buffer
          ; 27 create buffer
          ; 28 create buffer
          ; 29 create buffer
          ; 32 function definition
fn_argparse_init: 
          push rbp
          mov rbp, rsp
          ; 34 push integer
          mov rax, 24
          push rax
          ; 34 push string
          mov rax, s_124
          push rax
          ; 34 push integer
          mov rax, 34
          push rax
          ; 34 push string
          mov rax, s_125
          push rax
          ; 34 push boolean
          mov rax, 1
          push rax
          ; 34 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 35 push integer
          mov rax, 8
          push rax
          ; 35 push string
          mov rax, s_124
          push rax
          ; 35 push integer
          mov rax, 35
          push rax
          ; 35 push string
          mov rax, s_125
          push rax
          ; 35 push boolean
          mov rax, 1
          push rax
          ; 35 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 35 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 35 push integer
          mov rax, 0
          push rax
          ; 35 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 35 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 36 push string
          mov rax, s_124
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_125
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_new_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 36 push integer
          mov rax, 8
          push rax
          ; 36 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 36 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 37 push string
          mov rax, s_126
          push rax
          ; 37 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 37 push integer
          mov rax, 16
          push rax
          ; 37 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 37 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 38 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 38 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 40 push integer
          mov rax, 8
          push rax
          ; 40 push string
          mov rax, s_124
          push rax
          ; 40 push integer
          mov rax, 40
          push rax
          ; 40 push string
          mov rax, s_125
          push rax
          ; 40 push boolean
          mov rax, 1
          push rax
          ; 40 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 40 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 40 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 41 push integer
          mov rax, 8
          push rax
          ; 41 push string
          mov rax, s_124
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_125
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 41 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 41 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 42 push integer
          mov rax, 8
          push rax
          ; 42 push string
          mov rax, s_124
          push rax
          ; 42 push integer
          mov rax, 42
          push rax
          ; 42 push string
          mov rax, s_125
          push rax
          ; 42 push boolean
          mov rax, 1
          push rax
          ; 42 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 42 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 42 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 33 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 33 return
          ret
          ; 45 function definition
fn_get_argument: 
          push rbp
          mov rbp, rsp
          ; 47 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 47 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 47 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000061
          ; 48 push string
          mov rax, s_127
          push rax
          ; 48 push string
          mov rax, s_124
          push rax
          ; 48 push integer
          mov rax, 48
          push rax
          ; 48 push string
          mov rax, s_128
          push rax
          ; 48 push boolean
          mov rax, 1
          push rax
          ; 48 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 48 jump
          jmp end_0x0000000000000061
          ; 48 label
if_0x0000000000000061: 
          ; 48 label
end_0x0000000000000061: 
          ; 50 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 50 push integer
          mov rax, 0
          push rax
          ; 50 label
while_0x000000000000001b: 
          ; 50 duplicate
          pop rax
          push rax
          push rax
          ; 50 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 50 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 50 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001b_end
          ; 51 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 51 duplicate
          pop rax
          push rax
          push rax
          ; 51 push string
          mov rax, s_124
          push rax
          ; 51 push integer
          mov rax, 51
          push rax
          ; 51 push string
          mov rax, s_128
          push rax
          ; 51 push boolean
          mov rax, 1
          push rax
          ; 51 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 push integer
          mov rax, 1
          push rax
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 52 push integer
          mov rax, 1
          push rax
          ; 52 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 end of while-loop
          jmp while_0x000000000000001b
while_0x000000000000001b_end: 
          ; 53 drop
          pop rax
          ; 46 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 46 return
          ret
          ; 56 function definition
fn_argparse_add_argument: 
          push rbp
          mov rbp, rsp
          ; 58 push integer
          mov rax, 24
          push rax
          ; 58 push string
          mov rax, s_124
          push rax
          ; 58 push integer
          mov rax, 58
          push rax
          ; 58 push string
          mov rax, s_129
          push rax
          ; 58 push boolean
          mov rax, 1
          push rax
          ; 58 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 59 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 59 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 59 push integer
          mov rax, 0
          push rax
          ; 59 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 59 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 60 push string
          mov rax, s_124
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_129
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 60 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 60 push integer
          mov rax, 8
          push rax
          ; 60 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 60 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 61 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 61 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 61 push integer
          mov rax, 16
          push rax
          ; 61 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 61 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 63 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 64 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 65 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 65 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 65 push integer
          mov rax, 8
          push rax
          ; 65 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 65 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 66 push string
          mov rax, s_124
          push rax
          ; 66 push integer
          mov rax, 66
          push rax
          ; 66 push string
          mov rax, s_129
          push rax
          ; 66 push boolean
          mov rax, 1
          push rax
          ; 66 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 67 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 67 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 67 push integer
          mov rax, 8
          push rax
          ; 67 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 67 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 69 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 69 push integer
          mov rax, 2
          push rax
          ; 69 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 69 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000062
          ; 70 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 70 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 70 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 70 push string
          mov rax, s_124
          push rax
          ; 70 push integer
          mov rax, 70
          push rax
          ; 70 push string
          mov rax, s_129
          push rax
          ; 70 push boolean
          mov rax, 1
          push rax
          ; 70 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 70 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 70 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 70 jump
          jmp end_0x0000000000000062
          ; 70 label
if_0x0000000000000062: 
          ; 71 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 71 push integer
          mov rax, 1
          push rax
          ; 71 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 71 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000063
          ; 72 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 72 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 72 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 72 push string
          mov rax, s_124
          push rax
          ; 72 push integer
          mov rax, 72
          push rax
          ; 72 push string
          mov rax, s_129
          push rax
          ; 72 push boolean
          mov rax, 1
          push rax
          ; 72 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 72 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 72 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 71 jump
          jmp end_0x0000000000000062
          ; 71 label
elif_0x0000000000000063: 
          ; 73 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 73 push integer
          mov rax, 0
          push rax
          ; 73 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 73 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000064
          ; 74 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 74 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 74 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 74 push string
          mov rax, s_124
          push rax
          ; 74 push integer
          mov rax, 74
          push rax
          ; 74 push string
          mov rax, s_129
          push rax
          ; 74 push boolean
          mov rax, 1
          push rax
          ; 74 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 74 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 74 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 73 jump
          jmp end_0x0000000000000062
          ; 73 label
elif_0x0000000000000064: 
          ; 76 push string
          mov rax, s_130
          push rax
          ; 76 push string
          mov rax, s_124
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_129
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 76 label
end_0x0000000000000062: 
          ; 57 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 57 return
          ret
          ; 79 function definition
fn_argparse_print_help: 
          push rbp
          mov rbp, rsp
          ; 82 push string
          mov rax, s_131
          push rax
          ; 82 push string
          mov rax, s_124
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_132
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 83 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 83 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 83 push integer
          mov rax, 16
          push rax
          ; 83 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 83 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 83 push string
          mov rax, s_124
          push rax
          ; 83 push integer
          mov rax, 83
          push rax
          ; 83 push string
          mov rax, s_132
          push rax
          ; 83 push boolean
          mov rax, 1
          push rax
          ; 83 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 84 push string
          mov rax, s_133
          push rax
          ; 84 push string
          mov rax, s_124
          push rax
          ; 84 push integer
          mov rax, 84
          push rax
          ; 84 push string
          mov rax, s_132
          push rax
          ; 84 push boolean
          mov rax, 1
          push rax
          ; 84 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 86 push integer
          mov rax, 0
          push rax
          ; 87 label
while_0x000000000000001c: 
          ; 87 duplicate
          pop rax
          push rax
          push rax
          ; 87 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 87 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 87 push integer
          mov rax, 8
          push rax
          ; 87 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 87 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 87 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 87 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001c_end
          ; 88 push string
          mov rax, s_134
          push rax
          ; 88 push string
          mov rax, s_124
          push rax
          ; 88 push integer
          mov rax, 88
          push rax
          ; 88 push string
          mov rax, s_132
          push rax
          ; 88 push boolean
          mov rax, 1
          push rax
          ; 88 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 88 duplicate
          pop rax
          push rax
          push rax
          ; 88 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 88 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 88 push string
          mov rax, s_124
          push rax
          ; 88 push integer
          mov rax, 88
          push rax
          ; 88 push string
          mov rax, s_132
          push rax
          ; 88 push boolean
          mov rax, 1
          push rax
          ; 88 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 88 push string
          mov rax, s_124
          push rax
          ; 88 push integer
          mov rax, 88
          push rax
          ; 88 push string
          mov rax, s_132
          push rax
          ; 88 push boolean
          mov rax, 1
          push rax
          ; 88 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 89 push integer
          mov rax, 1
          push rax
          ; 89 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 87 end of while-loop
          jmp while_0x000000000000001c
while_0x000000000000001c_end: 
          ; 90 drop
          pop rax
          ; 91 push string
          mov rax, s_135
          push rax
          ; 91 push string
          mov rax, s_124
          push rax
          ; 91 push integer
          mov rax, 91
          push rax
          ; 91 push string
          mov rax, s_132
          push rax
          ; 91 push boolean
          mov rax, 1
          push rax
          ; 91 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 94 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 94 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 94 push integer
          mov rax, 8
          push rax
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 94 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 94 push integer
          mov rax, 0
          push rax
          ; 94 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 94 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000065
          ; 95 push string
          mov rax, s_136
          push rax
          ; 95 push string
          mov rax, s_124
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_132
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 95 jump
          jmp end_0x0000000000000065
          ; 95 label
if_0x0000000000000065: 
          ; 95 label
end_0x0000000000000065: 
          ; 97 push integer
          mov rax, 0
          push rax
          ; 98 label
while_0x000000000000001d: 
          ; 98 duplicate
          pop rax
          push rax
          push rax
          ; 98 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 98 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 98 push integer
          mov rax, 8
          push rax
          ; 98 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 98 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 98 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 98 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001d_end
          ; 99 duplicate
          pop rax
          push rax
          push rax
          ; 99 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 99 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 99 push string
          mov rax, s_124
          push rax
          ; 99 push integer
          mov rax, 99
          push rax
          ; 99 push string
          mov rax, s_132
          push rax
          ; 99 push boolean
          mov rax, 1
          push rax
          ; 99 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 100 push string
          mov rax, s_137
          push rax
          ; 100 push string
          mov rax, s_124
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_132
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 duplicate
          pop rax
          push rax
          push rax
          ; 100 push string
          mov rax, s_124
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_132
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 push string
          mov rax, s_7
          push rax
          ; 100 push string
          mov rax, s_124
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_132
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 102 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 102 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 102 push integer
          mov rax, 8
          push rax
          ; 102 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 102 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 102 push string
          mov rax, s_124
          push rax
          ; 102 push integer
          mov rax, 102
          push rax
          ; 102 push string
          mov rax, s_132
          push rax
          ; 102 push boolean
          mov rax, 1
          push rax
          ; 102 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 103 push string
          mov rax, s_138
          push rax
          ; 103 push string
          mov rax, s_124
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_132
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 103 push integer
          mov rax, 16
          push rax
          ; 103 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 103 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 103 push string
          mov rax, s_124
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_132
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 103 push string
          mov rax, s_135
          push rax
          ; 103 push string
          mov rax, s_124
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_132
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 105 push integer
          mov rax, 1
          push rax
          ; 105 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 98 end of while-loop
          jmp while_0x000000000000001d
while_0x000000000000001d_end: 
          ; 106 drop
          pop rax
          ; 109 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 109 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 push integer
          mov rax, 8
          push rax
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 push integer
          mov rax, 0
          push rax
          ; 109 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 109 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000066
          ; 110 push string
          mov rax, s_139
          push rax
          ; 110 push string
          mov rax, s_124
          push rax
          ; 110 push integer
          mov rax, 110
          push rax
          ; 110 push string
          mov rax, s_132
          push rax
          ; 110 push boolean
          mov rax, 1
          push rax
          ; 110 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 110 jump
          jmp end_0x0000000000000066
          ; 110 label
if_0x0000000000000066: 
          ; 110 label
end_0x0000000000000066: 
          ; 112 push integer
          mov rax, 0
          push rax
          ; 113 label
while_0x000000000000001e: 
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 113 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 113 push integer
          mov rax, 8
          push rax
          ; 113 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 113 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 113 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001e_end
          ; 114 duplicate
          pop rax
          push rax
          push rax
          ; 114 get pointer to buffer
          mov rax, buf__kwargs
          push rax
          ; 114 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 114 push string
          mov rax, s_124
          push rax
          ; 114 push integer
          mov rax, 114
          push rax
          ; 114 push string
          mov rax, s_132
          push rax
          ; 114 push boolean
          mov rax, 1
          push rax
          ; 114 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 115 push string
          mov rax, s_137
          push rax
          ; 115 push string
          mov rax, s_124
          push rax
          ; 115 push integer
          mov rax, 115
          push rax
          ; 115 push string
          mov rax, s_132
          push rax
          ; 115 push boolean
          mov rax, 1
          push rax
          ; 115 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 115 duplicate
          pop rax
          push rax
          push rax
          ; 115 push string
          mov rax, s_124
          push rax
          ; 115 push integer
          mov rax, 115
          push rax
          ; 115 push string
          mov rax, s_132
          push rax
          ; 115 push boolean
          mov rax, 1
          push rax
          ; 115 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 115 push string
          mov rax, s_7
          push rax
          ; 115 push string
          mov rax, s_124
          push rax
          ; 115 push integer
          mov rax, 115
          push rax
          ; 115 push string
          mov rax, s_132
          push rax
          ; 115 push boolean
          mov rax, 1
          push rax
          ; 115 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 117 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 117 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 117 push integer
          mov rax, 8
          push rax
          ; 117 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 117 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 117 push string
          mov rax, s_124
          push rax
          ; 117 push integer
          mov rax, 117
          push rax
          ; 117 push string
          mov rax, s_132
          push rax
          ; 117 push boolean
          mov rax, 1
          push rax
          ; 117 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 118 push string
          mov rax, s_138
          push rax
          ; 118 push string
          mov rax, s_124
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_132
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 118 push integer
          mov rax, 16
          push rax
          ; 118 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 118 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 118 push string
          mov rax, s_124
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_132
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 118 push string
          mov rax, s_135
          push rax
          ; 118 push string
          mov rax, s_124
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_132
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 120 push integer
          mov rax, 1
          push rax
          ; 120 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 end of while-loop
          jmp while_0x000000000000001e
while_0x000000000000001e_end: 
          ; 121 drop
          pop rax
          ; 124 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 124 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 124 push integer
          mov rax, 8
          push rax
          ; 124 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 124 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 124 push integer
          mov rax, 0
          push rax
          ; 124 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 124 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000067
          ; 125 push string
          mov rax, s_140
          push rax
          ; 125 push string
          mov rax, s_124
          push rax
          ; 125 push integer
          mov rax, 125
          push rax
          ; 125 push string
          mov rax, s_132
          push rax
          ; 125 push boolean
          mov rax, 1
          push rax
          ; 125 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 125 jump
          jmp end_0x0000000000000067
          ; 125 label
if_0x0000000000000067: 
          ; 125 label
end_0x0000000000000067: 
          ; 127 push integer
          mov rax, 0
          push rax
          ; 128 label
while_0x000000000000001f: 
          ; 128 duplicate
          pop rax
          push rax
          push rax
          ; 128 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 128 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 128 push integer
          mov rax, 8
          push rax
          ; 128 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 128 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 128 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 128 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000001f_end
          ; 129 duplicate
          pop rax
          push rax
          push rax
          ; 129 get pointer to buffer
          mov rax, buf__flags
          push rax
          ; 129 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 129 push string
          mov rax, s_124
          push rax
          ; 129 push integer
          mov rax, 129
          push rax
          ; 129 push string
          mov rax, s_132
          push rax
          ; 129 push boolean
          mov rax, 1
          push rax
          ; 129 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 push string
          mov rax, s_137
          push rax
          ; 130 push string
          mov rax, s_124
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_132
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 130 duplicate
          pop rax
          push rax
          push rax
          ; 130 push string
          mov rax, s_124
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_132
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 130 push string
          mov rax, s_7
          push rax
          ; 130 push string
          mov rax, s_124
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_132
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 132 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 132 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 132 push integer
          mov rax, 8
          push rax
          ; 132 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 132 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 132 push string
          mov rax, s_124
          push rax
          ; 132 push integer
          mov rax, 132
          push rax
          ; 132 push string
          mov rax, s_132
          push rax
          ; 132 push boolean
          mov rax, 1
          push rax
          ; 132 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 133 push string
          mov rax, s_138
          push rax
          ; 133 push string
          mov rax, s_124
          push rax
          ; 133 push integer
          mov rax, 133
          push rax
          ; 133 push string
          mov rax, s_132
          push rax
          ; 133 push boolean
          mov rax, 1
          push rax
          ; 133 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 133 push integer
          mov rax, 16
          push rax
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 133 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 133 push string
          mov rax, s_124
          push rax
          ; 133 push integer
          mov rax, 133
          push rax
          ; 133 push string
          mov rax, s_132
          push rax
          ; 133 push boolean
          mov rax, 1
          push rax
          ; 133 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 133 push string
          mov rax, s_135
          push rax
          ; 133 push string
          mov rax, s_124
          push rax
          ; 133 push integer
          mov rax, 133
          push rax
          ; 133 push string
          mov rax, s_132
          push rax
          ; 133 push boolean
          mov rax, 1
          push rax
          ; 133 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 135 push integer
          mov rax, 1
          push rax
          ; 135 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 128 end of while-loop
          jmp while_0x000000000000001f
while_0x000000000000001f_end: 
          ; 136 drop
          pop rax
          ; 138 push integer
          mov rax, 0
          push rax
          ; 138 push string
          mov rax, s_124
          push rax
          ; 138 push integer
          mov rax, 138
          push rax
          ; 138 push string
          mov rax, s_132
          push rax
          ; 138 push boolean
          mov rax, 1
          push rax
          ; 138 call
          call fn_exit
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 80 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 80 return
          ret
          ; 141 function definition
fn_argparse_parse_args: 
          push rbp
          mov rbp, rsp
          ; 143 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 143 push integer
          mov rax, 0
          push rax
          ; 143 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 143 push string
          mov rax, s_124
          push rax
          ; 143 push integer
          mov rax, 143
          push rax
          ; 143 push string
          mov rax, s_141
          push rax
          ; 143 push boolean
          mov rax, 1
          push rax
          ; 143 call
          call fn_get_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 143 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 143 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 143 push integer
          mov rax, 16
          push rax
          ; 143 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 143 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 146 push integer
          mov rax, 1
          push rax
          ; 147 label
while_0x0000000000000020: 
          ; 147 duplicate
          pop rax
          push rax
          push rax
          ; 147 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 147 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 147 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000020_end
          ; 148 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 148 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 148 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 148 push string
          mov rax, s_124
          push rax
          ; 148 push integer
          mov rax, 148
          push rax
          ; 148 push string
          mov rax, s_141
          push rax
          ; 148 push boolean
          mov rax, 1
          push rax
          ; 148 call
          call fn_get_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 duplicate
          pop rax
          push rax
          push rax
          ; 150 push string
          mov rax, s_142
          push rax
          ; 150 push string
          mov rax, s_124
          push rax
          ; 150 push integer
          mov rax, 150
          push rax
          ; 150 push string
          mov rax, s_141
          push rax
          ; 150 push boolean
          mov rax, 1
          push rax
          ; 150 call
          call fn_startswith
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000068
          ; 151 duplicate
          pop rax
          push rax
          push rax
          ; 151 push string
          mov rax, s_143
          push rax
          ; 151 push string
          mov rax, s_124
          push rax
          ; 151 push integer
          mov rax, 151
          push rax
          ; 151 push string
          mov rax, s_141
          push rax
          ; 151 push boolean
          mov rax, 1
          push rax
          ; 151 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 152 push string
          mov rax, s_144
          push rax
          ; 152 push string
          mov rax, s_124
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_141
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 152 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000069
          ; 153 push string
          mov rax, s_124
          push rax
          ; 153 push integer
          mov rax, 153
          push rax
          ; 153 push string
          mov rax, s_141
          push rax
          ; 153 push boolean
          mov rax, 1
          push rax
          ; 153 call
          call fn_argparse_print_help
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 153 jump
          jmp end_0x0000000000000069
          ; 153 label
if_0x0000000000000069: 
          ; 153 label
end_0x0000000000000069: 
          ; 155 duplicate
          pop rax
          push rax
          push rax
          ; 155 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 155 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 155 push integer
          mov rax, 8
          push rax
          ; 155 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 155 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 155 push string
          mov rax, s_124
          push rax
          ; 155 push integer
          mov rax, 155
          push rax
          ; 155 push string
          mov rax, s_141
          push rax
          ; 155 push boolean
          mov rax, 1
          push rax
          ; 155 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 156 duplicate
          pop rax
          push rax
          push rax
          ; 156 push string
          mov rax, s_124
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_141
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 156 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 156 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000006a
          ; 157 push string
          mov rax, s_124
          push rax
          ; 157 push integer
          mov rax, 157
          push rax
          ; 157 push string
          mov rax, s_141
          push rax
          ; 157 push boolean
          mov rax, 1
          push rax
          ; 157 call
          call fn_argparse_print_help
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 157 jump
          jmp end_0x000000000000006a
          ; 157 label
if_0x000000000000006a: 
          ; 157 label
end_0x000000000000006a: 
          ; 159 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 159 drop
          pop rax
          ; 161 duplicate
          pop rax
          push rax
          push rax
          ; 161 push integer
          mov rax, 0
          push rax
          ; 161 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 161 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 161 push integer
          mov rax, 2
          push rax
          ; 161 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 161 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000006b
          ; 162 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 162 push integer
          mov rax, 1
          push rax
          ; 162 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 163 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 163 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 163 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 163 push string
          mov rax, s_124
          push rax
          ; 163 push integer
          mov rax, 163
          push rax
          ; 163 push string
          mov rax, s_141
          push rax
          ; 163 push boolean
          mov rax, 1
          push rax
          ; 163 call
          call fn_get_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 164 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 164 push integer
          mov rax, 8
          push rax
          ; 164 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 164 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 162 jump
          jmp end_0x000000000000006b
          ; 162 label
if_0x000000000000006b: 
          ; 165 duplicate
          pop rax
          push rax
          push rax
          ; 165 push integer
          mov rax, 0
          push rax
          ; 165 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 165 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 165 push integer
          mov rax, 1
          push rax
          ; 165 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 165 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000006c
          ; 166 push string
          mov rax, s_145
          push rax
          ; 166 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 166 push integer
          mov rax, 8
          push rax
          ; 166 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 166 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 165 jump
          jmp end_0x000000000000006b
          ; 165 label
elif_0x000000000000006c: 
          ; 168 drop
          pop rax
          ; 168 label
end_0x000000000000006b: 
          ; 151 jump
          jmp end_0x0000000000000068
          ; 151 label
if_0x0000000000000068: 
          ; 170 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 170 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 170 push integer
          mov rax, 0
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 171 push string
          mov rax, s_124
          push rax
          ; 171 push integer
          mov rax, 171
          push rax
          ; 171 push string
          mov rax, s_141
          push rax
          ; 171 push boolean
          mov rax, 1
          push rax
          ; 171 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 172 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 172 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 172 push integer
          mov rax, 0
          push rax
          ; 172 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 172 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 170 label
end_0x0000000000000068: 
          ; 173 push integer
          mov rax, 1
          push rax
          ; 173 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 147 end of while-loop
          jmp while_0x0000000000000020
while_0x0000000000000020_end: 
          ; 175 get pointer to buffer
          mov rax, buf__args
          push rax
          ; 175 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 177 duplicate
          pop rax
          push rax
          push rax
          ; 177 push integer
          mov rax, 0
          push rax
          ; 177 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 177 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 177 push integer
          mov rax, 8
          push rax
          ; 177 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 177 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 178 get pointer to buffer
          mov rax, buf__posargs
          push rax
          ; 178 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 178 push integer
          mov rax, 8
          push rax
          ; 178 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 178 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 178 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 178 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000006d
          ; 179 push string
          mov rax, s_124
          push rax
          ; 179 push integer
          mov rax, 179
          push rax
          ; 179 push string
          mov rax, s_141
          push rax
          ; 179 push boolean
          mov rax, 1
          push rax
          ; 179 call
          call fn_argparse_print_help
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 179 jump
          jmp end_0x000000000000006d
          ; 179 label
if_0x000000000000006d: 
          ; 179 label
end_0x000000000000006d: 
          ; 142 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 142 return
          ret
          ; 16 create buffer
          ; 17 create buffer
          ; 20 label
fn__profiler_signal_handler: 
          ; 22 get pointer to buffer
          mov rax, buf__profiler_lock
          push rax
          ; 22 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 22 push boolean
          mov rax, 0
          push rax
          ; 22 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 22 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000006e
          ; 23 push boolean
          mov rax, 1
          push rax
          ; 23 get pointer to buffer
          mov rax, buf__profiler_lock
          push rax
          ; 23 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 25 get argument
          mov rax, rbp
          add rax, 24
          mov rbx, [rax]
          push rbx
          ; 26 get pointer to buffer
          mov rax, buf__profiler_stack
          push rax
          ; 26 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 26 push string
          mov rax, s_146
          push rax
          ; 26 push integer
          mov rax, 26
          push rax
          ; 26 push string
          mov rax, s_147
          push rax
          ; 26 push boolean
          mov rax, 1
          push rax
          ; 26 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 26 get pointer to buffer
          mov rax, buf__profiler_stack
          push rax
          ; 26 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 28 push boolean
          mov rax, 0
          push rax
          ; 28 get pointer to buffer
          mov rax, buf__profiler_lock
          push rax
          ; 28 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 23 jump
          jmp end_0x000000000000006e
          ; 23 label
if_0x000000000000006e: 
          ; 30 push string
          mov rax, s_148
          push rax
          ; 30 push string
          mov rax, s_146
          push rax
          ; 30 push integer
          mov rax, 30
          push rax
          ; 30 push string
          mov rax, s_147
          push rax
          ; 30 push boolean
          mov rax, 1
          push rax
          ; 30 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 30 label
end_0x000000000000006e: 
          ; 21 return
          ret
          ; 32 function definition
fn_profiler_dump: 
          push rbp
          mov rbp, rsp
          ; 34 push integer
          mov rax, 0
          push rax
          ; 35 label
while_0x0000000000000021: 
          ; 35 duplicate
          pop rax
          push rax
          push rax
          ; 35 get pointer to buffer
          mov rax, buf__profiler_stack
          push rax
          ; 35 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 35 push integer
          mov rax, 8
          push rax
          ; 35 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 35 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 35 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 35 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000021_end
          ; 36 duplicate
          pop rax
          push rax
          push rax
          ; 36 get pointer to buffer
          mov rax, buf__profiler_stack
          push rax
          ; 36 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_146
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_149
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 37 duplicate
          pop rax
          push rax
          push rax
          ; 37 push string
          mov rax, s_146
          push rax
          ; 37 push integer
          mov rax, 37
          push rax
          ; 37 push string
          mov rax, s_149
          push rax
          ; 37 push boolean
          mov rax, 1
          push rax
          ; 37 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 37 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 37 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000006f
          ; 38 push string
          mov rax, s_146
          push rax
          ; 38 push integer
          mov rax, 38
          push rax
          ; 38 push string
          mov rax, s_149
          push rax
          ; 38 push boolean
          mov rax, 1
          push rax
          ; 38 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 38 jump
          jmp end_0x000000000000006f
          ; 38 label
if_0x000000000000006f: 
          ; 40 drop
          pop rax
          ; 40 push string
          mov rax, s_150
          push rax
          ; 40 push string
          mov rax, s_146
          push rax
          ; 40 push integer
          mov rax, 40
          push rax
          ; 40 push string
          mov rax, s_149
          push rax
          ; 40 push boolean
          mov rax, 1
          push rax
          ; 40 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 40 label
end_0x000000000000006f: 
          ; 41 push string
          mov rax, s_7
          push rax
          ; 41 push string
          mov rax, s_146
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_149
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 42 push integer
          mov rax, 1
          push rax
          ; 42 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 35 end of while-loop
          jmp while_0x0000000000000021
while_0x0000000000000021_end: 
          ; 33 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 33 return
          ret
          ; 45 function definition
fn_profiler_init: 
          push rbp
          mov rbp, rsp
          ; 48 push integer
          mov rax, 14
          push rax
          ; 49 reference function
          mov rax, fn__profiler_signal_handler
          push rax
          ; 50 reference function
          mov rax, fn_rt_sigreturn
          push rax
          ; 51 push string
          mov rax, s_146
          push rax
          ; 51 push integer
          mov rax, 51
          push rax
          ; 51 push string
          mov rax, s_151
          push rax
          ; 51 push boolean
          mov rax, 1
          push rax
          ; 51 call
          call fn_setup_signal_handler
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 51 drop
          pop rax
          ; 54 push integer
          mov rax, 0
          push rax
          ; 54 push integer
          mov rax, 1000
          push rax
          ; 54 push integer
          mov rax, 0
          push rax
          ; 54 push integer
          mov rax, 1000
          push rax
          ; 54 push string
          mov rax, s_146
          push rax
          ; 54 push integer
          mov rax, 54
          push rax
          ; 54 push string
          mov rax, s_151
          push rax
          ; 54 push boolean
          mov rax, 1
          push rax
          ; 54 call
          call fn_set_timer
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 54 drop
          pop rax
          ; 57 push integer
          mov rax, 10
          push rax
          ; 58 push integer
          mov rax, 60
          push rax
          ; 58 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 59 push integer
          mov rax, 1000
          push rax
          ; 59 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 60 push integer
          mov rax, 8
          push rax
          ; 60 push string
          mov rax, s_146
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_151
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 60 get pointer to buffer
          mov rax, buf__profiler_stack
          push rax
          ; 60 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 62 push boolean
          mov rax, 0
          push rax
          ; 62 get pointer to buffer
          mov rax, buf__profiler_lock
          push rax
          ; 62 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 46 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 46 return
          ret
          ; 9 function definition
fn_format_to_str: 
          push rbp
          mov rbp, rsp
          ; 11 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 12 duplicate
          pop rax
          push rax
          push rax
          ; 12 push integer
          mov rax, 0
          push rax
          ; 12 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 12 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000070
          ; 13 push string
          mov rax, s_152
          push rax
          ; 13 jump
          jmp end_0x0000000000000070
          ; 13 label
if_0x0000000000000070: 
          ; 15 push string
          mov rax, s_153
          push rax
          ; 15 push string
          mov rax, s_154
          push rax
          ; 15 push integer
          mov rax, 15
          push rax
          ; 15 push string
          mov rax, s_155
          push rax
          ; 15 push boolean
          mov rax, 1
          push rax
          ; 15 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 15 push string
          mov rax, s_126
          push rax
          ; 15 label
end_0x0000000000000070: 
          ; 10 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 10 return
          ret
          ; 18 function definition
fn_str_to_format: 
          push rbp
          mov rbp, rsp
          ; 20 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 21 duplicate
          pop rax
          push rax
          push rax
          ; 21 push string
          mov rax, s_156
          push rax
          ; 21 push string
          mov rax, s_154
          push rax
          ; 21 push integer
          mov rax, 21
          push rax
          ; 21 push string
          mov rax, s_157
          push rax
          ; 21 push boolean
          mov rax, 1
          push rax
          ; 21 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 21 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000071
          ; 22 push integer
          mov rax, 0
          push rax
          ; 22 jump
          jmp end_0x0000000000000071
          ; 22 label
if_0x0000000000000071: 
          ; 24 push string
          mov rax, s_158
          push rax
          ; 24 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 24 push string
          mov rax, s_154
          push rax
          ; 24 push integer
          mov rax, 24
          push rax
          ; 24 push string
          mov rax, s_157
          push rax
          ; 24 push boolean
          mov rax, 1
          push rax
          ; 24 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 24 push string
          mov rax, s_154
          push rax
          ; 24 push integer
          mov rax, 24
          push rax
          ; 24 push string
          mov rax, s_157
          push rax
          ; 24 push boolean
          mov rax, 1
          push rax
          ; 24 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 24 push integer
          mov rax, 0
          push rax
          ; 24 label
end_0x0000000000000071: 
          ; 19 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 19 return
          ret
          ; 13 function definition
fn_textbuffer_create: 
          push rbp
          mov rbp, rsp
          ; 15 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 15 push integer
          mov rax, 16
          push rax
          ; 15 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 15 push string
          mov rax, s_159
          push rax
          ; 15 push integer
          mov rax, 15
          push rax
          ; 15 push string
          mov rax, s_160
          push rax
          ; 15 push boolean
          mov rax, 1
          push rax
          ; 15 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 16 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 16 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 16 push integer
          mov rax, 8
          push rax
          ; 16 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 16 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 17 push integer
          mov rax, 0
          push rax
          ; 17 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 17 push integer
          mov rax, 0
          push rax
          ; 17 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 17 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 18 push integer
          mov rax, 0
          push rax
          ; 18 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 18 push integer
          mov rax, 16
          push rax
          ; 18 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 18 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 14 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 14 return
          ret
          ; 21 function definition
fn_new_textbuffer: 
          push rbp
          mov rbp, rsp
          ; 23 push integer
          mov rax, 90
          push rax
          ; 23 push string
          mov rax, s_159
          push rax
          ; 23 push integer
          mov rax, 23
          push rax
          ; 23 push string
          mov rax, s_161
          push rax
          ; 23 push boolean
          mov rax, 1
          push rax
          ; 23 call
          call fn_textbuffer_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 22 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 22 return
          ret
          ; 26 function definition
fn_textbuffer_clear: 
          push rbp
          mov rbp, rsp
          ; 28 push integer
          mov rax, 0
          push rax
          ; 28 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 28 push integer
          mov rax, 0
          push rax
          ; 28 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 28 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 29 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 27 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 27 return
          ret
          ; 32 function definition
fn_textbuffer_append: 
          push rbp
          mov rbp, rsp
          ; 36 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_159
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_162
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 37 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 38 label
while_0x0000000000000022: 
          ; 38 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 38 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 38 push integer
          mov rax, 0
          push rax
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 38 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 38 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 38 push integer
          mov rax, 8
          push rax
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 38 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 38 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 38 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000022_end
          ; 40 duplicate
          pop rax
          push rax
          push rax
          ; 40 push integer
          mov rax, 8
          push rax
          ; 40 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 40 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 40 push integer
          mov rax, 2
          push rax
          ; 40 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 40 push string
          mov rax, s_159
          push rax
          ; 40 push integer
          mov rax, 40
          push rax
          ; 40 push string
          mov rax, s_162
          push rax
          ; 40 push boolean
          mov rax, 1
          push rax
          ; 40 call
          call fn_textbuffer_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 43 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 43 push integer
          mov rax, 16
          push rax
          ; 43 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 43 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 43 push integer
          mov rax, 16
          push rax
          ; 43 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 43 push string
          mov rax, s_159
          push rax
          ; 43 push integer
          mov rax, 43
          push rax
          ; 43 push string
          mov rax, s_162
          push rax
          ; 43 push boolean
          mov rax, 1
          push rax
          ; 43 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 43 drop
          pop rax
          ; 44 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 44 push integer
          mov rax, 0
          push rax
          ; 44 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 44 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 44 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 44 push integer
          mov rax, 0
          push rax
          ; 44 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 44 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 47 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 47 push string
          mov rax, s_159
          push rax
          ; 47 push integer
          mov rax, 47
          push rax
          ; 47 push string
          mov rax, s_162
          push rax
          ; 47 push boolean
          mov rax, 1
          push rax
          ; 47 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 38 end of while-loop
          jmp while_0x0000000000000022
while_0x0000000000000022_end: 
          ; 50 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 51 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 51 duplicate
          pop rax
          push rax
          push rax
          ; 51 push integer
          mov rax, 0
          push rax
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 push integer
          mov rax, 16
          push rax
          ; 51 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 52 push string
          mov rax, s_159
          push rax
          ; 52 push integer
          mov rax, 52
          push rax
          ; 52 push string
          mov rax, s_162
          push rax
          ; 52 push boolean
          mov rax, 1
          push rax
          ; 52 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 52 drop
          pop rax
          ; 55 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 55 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 55 push integer
          mov rax, 0
          push rax
          ; 55 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 55 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 55 push integer
          mov rax, 0
          push rax
          ; 55 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 33 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 33 return
          ret
          ; 56 function definition
fn_opcode_to_str: 
          push rbp
          mov rbp, rsp
          ; 58 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 59 duplicate
          pop rax
          push rax
          push rax
          ; 59 push integer
          mov rax, 0
          push rax
          ; 59 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 59 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000072
          ; 60 push string
          mov rax, s_163
          push rax
          ; 60 jump
          jmp end_0x0000000000000072
          ; 60 label
if_0x0000000000000072: 
          ; 61 duplicate
          pop rax
          push rax
          push rax
          ; 61 push integer
          mov rax, 1
          push rax
          ; 61 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 61 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000073
          ; 62 push string
          mov rax, s_164
          push rax
          ; 61 jump
          jmp end_0x0000000000000072
          ; 61 label
elif_0x0000000000000073: 
          ; 63 duplicate
          pop rax
          push rax
          push rax
          ; 63 push integer
          mov rax, 2
          push rax
          ; 63 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 63 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000074
          ; 64 push string
          mov rax, s_165
          push rax
          ; 63 jump
          jmp end_0x0000000000000072
          ; 63 label
elif_0x0000000000000074: 
          ; 65 duplicate
          pop rax
          push rax
          push rax
          ; 65 push integer
          mov rax, 3
          push rax
          ; 65 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 65 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000075
          ; 66 push string
          mov rax, s_166
          push rax
          ; 65 jump
          jmp end_0x0000000000000072
          ; 65 label
elif_0x0000000000000075: 
          ; 67 duplicate
          pop rax
          push rax
          push rax
          ; 67 push integer
          mov rax, 4
          push rax
          ; 67 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 67 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000076
          ; 68 push string
          mov rax, s_167
          push rax
          ; 67 jump
          jmp end_0x0000000000000072
          ; 67 label
elif_0x0000000000000076: 
          ; 69 duplicate
          pop rax
          push rax
          push rax
          ; 69 push integer
          mov rax, 5
          push rax
          ; 69 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 69 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000077
          ; 70 push string
          mov rax, s_168
          push rax
          ; 69 jump
          jmp end_0x0000000000000072
          ; 69 label
elif_0x0000000000000077: 
          ; 71 duplicate
          pop rax
          push rax
          push rax
          ; 71 push integer
          mov rax, 6
          push rax
          ; 71 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 71 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000078
          ; 72 push string
          mov rax, s_169
          push rax
          ; 71 jump
          jmp end_0x0000000000000072
          ; 71 label
elif_0x0000000000000078: 
          ; 73 duplicate
          pop rax
          push rax
          push rax
          ; 73 push integer
          mov rax, 7
          push rax
          ; 73 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 73 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000079
          ; 74 push string
          mov rax, s_170
          push rax
          ; 73 jump
          jmp end_0x0000000000000072
          ; 73 label
elif_0x0000000000000079: 
          ; 75 duplicate
          pop rax
          push rax
          push rax
          ; 75 push integer
          mov rax, 8
          push rax
          ; 75 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 75 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007a
          ; 76 push string
          mov rax, s_171
          push rax
          ; 75 jump
          jmp end_0x0000000000000072
          ; 75 label
elif_0x000000000000007a: 
          ; 77 duplicate
          pop rax
          push rax
          push rax
          ; 77 push integer
          mov rax, 9
          push rax
          ; 77 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 77 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007b
          ; 78 push string
          mov rax, s_172
          push rax
          ; 77 jump
          jmp end_0x0000000000000072
          ; 77 label
elif_0x000000000000007b: 
          ; 79 duplicate
          pop rax
          push rax
          push rax
          ; 79 push integer
          mov rax, 10
          push rax
          ; 79 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 79 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007c
          ; 80 push string
          mov rax, s_173
          push rax
          ; 79 jump
          jmp end_0x0000000000000072
          ; 79 label
elif_0x000000000000007c: 
          ; 81 duplicate
          pop rax
          push rax
          push rax
          ; 81 push integer
          mov rax, 11
          push rax
          ; 81 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 81 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007d
          ; 82 push string
          mov rax, s_174
          push rax
          ; 81 jump
          jmp end_0x0000000000000072
          ; 81 label
elif_0x000000000000007d: 
          ; 83 duplicate
          pop rax
          push rax
          push rax
          ; 83 push integer
          mov rax, 12
          push rax
          ; 83 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 83 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007e
          ; 84 push string
          mov rax, s_175
          push rax
          ; 83 jump
          jmp end_0x0000000000000072
          ; 83 label
elif_0x000000000000007e: 
          ; 85 duplicate
          pop rax
          push rax
          push rax
          ; 85 push integer
          mov rax, 13
          push rax
          ; 85 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 85 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000007f
          ; 86 push string
          mov rax, s_176
          push rax
          ; 85 jump
          jmp end_0x0000000000000072
          ; 85 label
elif_0x000000000000007f: 
          ; 87 duplicate
          pop rax
          push rax
          push rax
          ; 87 push integer
          mov rax, 14
          push rax
          ; 87 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 87 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000080
          ; 88 push string
          mov rax, s_177
          push rax
          ; 87 jump
          jmp end_0x0000000000000072
          ; 87 label
elif_0x0000000000000080: 
          ; 89 duplicate
          pop rax
          push rax
          push rax
          ; 89 push integer
          mov rax, 15
          push rax
          ; 89 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 89 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000081
          ; 90 push string
          mov rax, s_178
          push rax
          ; 89 jump
          jmp end_0x0000000000000072
          ; 89 label
elif_0x0000000000000081: 
          ; 91 duplicate
          pop rax
          push rax
          push rax
          ; 91 push integer
          mov rax, 16
          push rax
          ; 91 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 91 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000082
          ; 92 push string
          mov rax, s_179
          push rax
          ; 91 jump
          jmp end_0x0000000000000072
          ; 91 label
elif_0x0000000000000082: 
          ; 93 duplicate
          pop rax
          push rax
          push rax
          ; 93 push integer
          mov rax, 17
          push rax
          ; 93 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 93 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000083
          ; 94 push string
          mov rax, s_180
          push rax
          ; 93 jump
          jmp end_0x0000000000000072
          ; 93 label
elif_0x0000000000000083: 
          ; 95 duplicate
          pop rax
          push rax
          push rax
          ; 95 push integer
          mov rax, 18
          push rax
          ; 95 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 95 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000084
          ; 96 push string
          mov rax, s_181
          push rax
          ; 95 jump
          jmp end_0x0000000000000072
          ; 95 label
elif_0x0000000000000084: 
          ; 97 duplicate
          pop rax
          push rax
          push rax
          ; 97 push integer
          mov rax, 19
          push rax
          ; 97 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 97 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000085
          ; 98 push string
          mov rax, s_182
          push rax
          ; 97 jump
          jmp end_0x0000000000000072
          ; 97 label
elif_0x0000000000000085: 
          ; 99 duplicate
          pop rax
          push rax
          push rax
          ; 99 push integer
          mov rax, 20
          push rax
          ; 99 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 99 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000086
          ; 100 push string
          mov rax, s_183
          push rax
          ; 99 jump
          jmp end_0x0000000000000072
          ; 99 label
elif_0x0000000000000086: 
          ; 101 duplicate
          pop rax
          push rax
          push rax
          ; 101 push integer
          mov rax, 21
          push rax
          ; 101 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 101 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000087
          ; 102 push string
          mov rax, s_184
          push rax
          ; 101 jump
          jmp end_0x0000000000000072
          ; 101 label
elif_0x0000000000000087: 
          ; 103 duplicate
          pop rax
          push rax
          push rax
          ; 103 push integer
          mov rax, 22
          push rax
          ; 103 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 103 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000088
          ; 104 push string
          mov rax, s_185
          push rax
          ; 103 jump
          jmp end_0x0000000000000072
          ; 103 label
elif_0x0000000000000088: 
          ; 105 duplicate
          pop rax
          push rax
          push rax
          ; 105 push integer
          mov rax, 23
          push rax
          ; 105 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 105 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000089
          ; 106 push string
          mov rax, s_186
          push rax
          ; 105 jump
          jmp end_0x0000000000000072
          ; 105 label
elif_0x0000000000000089: 
          ; 107 duplicate
          pop rax
          push rax
          push rax
          ; 107 push integer
          mov rax, 24
          push rax
          ; 107 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 107 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008a
          ; 108 push string
          mov rax, s_187
          push rax
          ; 107 jump
          jmp end_0x0000000000000072
          ; 107 label
elif_0x000000000000008a: 
          ; 109 duplicate
          pop rax
          push rax
          push rax
          ; 109 push integer
          mov rax, 25
          push rax
          ; 109 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 109 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008b
          ; 110 push string
          mov rax, s_188
          push rax
          ; 109 jump
          jmp end_0x0000000000000072
          ; 109 label
elif_0x000000000000008b: 
          ; 111 duplicate
          pop rax
          push rax
          push rax
          ; 111 push integer
          mov rax, 27
          push rax
          ; 111 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 111 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008c
          ; 112 push string
          mov rax, s_189
          push rax
          ; 111 jump
          jmp end_0x0000000000000072
          ; 111 label
elif_0x000000000000008c: 
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 push integer
          mov rax, 26
          push rax
          ; 113 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 113 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008d
          ; 114 push string
          mov rax, s_190
          push rax
          ; 113 jump
          jmp end_0x0000000000000072
          ; 113 label
elif_0x000000000000008d: 
          ; 115 duplicate
          pop rax
          push rax
          push rax
          ; 115 push integer
          mov rax, 28
          push rax
          ; 115 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 115 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008e
          ; 116 push string
          mov rax, s_191
          push rax
          ; 115 jump
          jmp end_0x0000000000000072
          ; 115 label
elif_0x000000000000008e: 
          ; 117 duplicate
          pop rax
          push rax
          push rax
          ; 117 push integer
          mov rax, 29
          push rax
          ; 117 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 117 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000008f
          ; 118 push string
          mov rax, s_192
          push rax
          ; 117 jump
          jmp end_0x0000000000000072
          ; 117 label
elif_0x000000000000008f: 
          ; 119 duplicate
          pop rax
          push rax
          push rax
          ; 119 push integer
          mov rax, 30
          push rax
          ; 119 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 119 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000090
          ; 120 push string
          mov rax, s_193
          push rax
          ; 119 jump
          jmp end_0x0000000000000072
          ; 119 label
elif_0x0000000000000090: 
          ; 121 duplicate
          pop rax
          push rax
          push rax
          ; 121 push integer
          mov rax, 31
          push rax
          ; 121 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 121 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000091
          ; 122 push string
          mov rax, s_194
          push rax
          ; 121 jump
          jmp end_0x0000000000000072
          ; 121 label
elif_0x0000000000000091: 
          ; 123 duplicate
          pop rax
          push rax
          push rax
          ; 123 push integer
          mov rax, 32
          push rax
          ; 123 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 123 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000092
          ; 124 push string
          mov rax, s_195
          push rax
          ; 123 jump
          jmp end_0x0000000000000072
          ; 123 label
elif_0x0000000000000092: 
          ; 125 duplicate
          pop rax
          push rax
          push rax
          ; 125 push integer
          mov rax, 33
          push rax
          ; 125 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 125 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000093
          ; 126 push string
          mov rax, s_196
          push rax
          ; 125 jump
          jmp end_0x0000000000000072
          ; 125 label
elif_0x0000000000000093: 
          ; 127 duplicate
          pop rax
          push rax
          push rax
          ; 127 push integer
          mov rax, 34
          push rax
          ; 127 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 127 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000094
          ; 128 push string
          mov rax, s_197
          push rax
          ; 127 jump
          jmp end_0x0000000000000072
          ; 127 label
elif_0x0000000000000094: 
          ; 129 duplicate
          pop rax
          push rax
          push rax
          ; 129 push integer
          mov rax, 35
          push rax
          ; 129 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 129 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000095
          ; 130 push string
          mov rax, s_198
          push rax
          ; 129 jump
          jmp end_0x0000000000000072
          ; 129 label
elif_0x0000000000000095: 
          ; 131 duplicate
          pop rax
          push rax
          push rax
          ; 131 push integer
          mov rax, 36
          push rax
          ; 131 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 131 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000096
          ; 132 push string
          mov rax, s_199
          push rax
          ; 131 jump
          jmp end_0x0000000000000072
          ; 131 label
elif_0x0000000000000096: 
          ; 133 duplicate
          pop rax
          push rax
          push rax
          ; 133 push integer
          mov rax, 37
          push rax
          ; 133 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 133 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000097
          ; 134 push string
          mov rax, s_200
          push rax
          ; 133 jump
          jmp end_0x0000000000000072
          ; 133 label
elif_0x0000000000000097: 
          ; 135 duplicate
          pop rax
          push rax
          push rax
          ; 135 push integer
          mov rax, 38
          push rax
          ; 135 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 135 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000098
          ; 136 push string
          mov rax, s_201
          push rax
          ; 135 jump
          jmp end_0x0000000000000072
          ; 135 label
elif_0x0000000000000098: 
          ; 137 duplicate
          pop rax
          push rax
          push rax
          ; 137 push integer
          mov rax, 39
          push rax
          ; 137 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 137 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000099
          ; 138 push string
          mov rax, s_202
          push rax
          ; 137 jump
          jmp end_0x0000000000000072
          ; 137 label
elif_0x0000000000000099: 
          ; 139 duplicate
          pop rax
          push rax
          push rax
          ; 139 push integer
          mov rax, 40
          push rax
          ; 139 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 139 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009a
          ; 140 push string
          mov rax, s_203
          push rax
          ; 139 jump
          jmp end_0x0000000000000072
          ; 139 label
elif_0x000000000000009a: 
          ; 141 duplicate
          pop rax
          push rax
          push rax
          ; 141 push integer
          mov rax, 41
          push rax
          ; 141 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 141 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009b
          ; 142 push string
          mov rax, s_204
          push rax
          ; 141 jump
          jmp end_0x0000000000000072
          ; 141 label
elif_0x000000000000009b: 
          ; 143 duplicate
          pop rax
          push rax
          push rax
          ; 143 push integer
          mov rax, 42
          push rax
          ; 143 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 143 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009c
          ; 144 push string
          mov rax, s_205
          push rax
          ; 143 jump
          jmp end_0x0000000000000072
          ; 143 label
elif_0x000000000000009c: 
          ; 145 duplicate
          pop rax
          push rax
          push rax
          ; 145 push integer
          mov rax, 43
          push rax
          ; 145 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 145 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009d
          ; 146 push string
          mov rax, s_206
          push rax
          ; 145 jump
          jmp end_0x0000000000000072
          ; 145 label
elif_0x000000000000009d: 
          ; 147 duplicate
          pop rax
          push rax
          push rax
          ; 147 push integer
          mov rax, 44
          push rax
          ; 147 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 147 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009e
          ; 148 push string
          mov rax, s_207
          push rax
          ; 147 jump
          jmp end_0x0000000000000072
          ; 147 label
elif_0x000000000000009e: 
          ; 149 duplicate
          pop rax
          push rax
          push rax
          ; 149 push integer
          mov rax, 45
          push rax
          ; 149 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 149 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000009f
          ; 150 push string
          mov rax, s_208
          push rax
          ; 149 jump
          jmp end_0x0000000000000072
          ; 149 label
elif_0x000000000000009f: 
          ; 151 duplicate
          pop rax
          push rax
          push rax
          ; 151 push integer
          mov rax, 46
          push rax
          ; 151 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 151 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a0
          ; 152 push string
          mov rax, s_209
          push rax
          ; 151 jump
          jmp end_0x0000000000000072
          ; 151 label
elif_0x00000000000000a0: 
          ; 153 duplicate
          pop rax
          push rax
          push rax
          ; 153 push integer
          mov rax, 47
          push rax
          ; 153 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 153 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a1
          ; 154 push string
          mov rax, s_210
          push rax
          ; 153 jump
          jmp end_0x0000000000000072
          ; 153 label
elif_0x00000000000000a1: 
          ; 156 push string
          mov rax, s_211
          push rax
          ; 156 push string
          mov rax, s_212
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_213
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 156 push string
          mov rax, s_126
          push rax
          ; 156 label
end_0x0000000000000072: 
          ; 57 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 57 return
          ret
          ; 170 create buffer
          ; 173 function definition
fn_create_opcode: 
          push rbp
          mov rbp, rsp
          ; 175 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 175 get pointer to buffer
          mov rax, buf__opcode
          push rax
          ; 175 push integer
          mov rax, 0
          push rax
          ; 175 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 175 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 176 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 176 get pointer to buffer
          mov rax, buf__opcode
          push rax
          ; 176 push integer
          mov rax, 8
          push rax
          ; 176 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 176 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 177 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 177 get pointer to buffer
          mov rax, buf__opcode
          push rax
          ; 177 push integer
          mov rax, 16
          push rax
          ; 177 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 177 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 178 get pointer to buffer
          mov rax, buf__opcode
          push rax
          ; 178 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 178 push string
          mov rax, s_212
          push rax
          ; 178 push integer
          mov rax, 178
          push rax
          ; 178 push string
          mov rax, s_214
          push rax
          ; 178 push boolean
          mov rax, 1
          push rax
          ; 178 call
          call fn_list_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 174 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 174 return
          ret
          ; 181 function definition
fn_dump_opcodes: 
          push rbp
          mov rbp, rsp
          ; 183 push string
          mov rax, s_215
          push rax
          ; 183 push string
          mov rax, s_212
          push rax
          ; 183 push integer
          mov rax, 183
          push rax
          ; 183 push string
          mov rax, s_216
          push rax
          ; 183 push boolean
          mov rax, 1
          push rax
          ; 183 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 184 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 184 push integer
          mov rax, 8
          push rax
          ; 184 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 184 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 184 push string
          mov rax, s_212
          push rax
          ; 184 push integer
          mov rax, 184
          push rax
          ; 184 push string
          mov rax, s_216
          push rax
          ; 184 push boolean
          mov rax, 1
          push rax
          ; 184 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 185 push string
          mov rax, s_7
          push rax
          ; 185 push string
          mov rax, s_212
          push rax
          ; 185 push integer
          mov rax, 185
          push rax
          ; 185 push string
          mov rax, s_216
          push rax
          ; 185 push boolean
          mov rax, 1
          push rax
          ; 185 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 187 push string
          mov rax, s_217
          push rax
          ; 187 push string
          mov rax, s_212
          push rax
          ; 187 push integer
          mov rax, 187
          push rax
          ; 187 push string
          mov rax, s_216
          push rax
          ; 187 push boolean
          mov rax, 1
          push rax
          ; 187 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 188 push integer
          mov rax, 0
          push rax
          ; 189 label
while_0x0000000000000023: 
          ; 189 duplicate
          pop rax
          push rax
          push rax
          ; 189 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 189 push integer
          mov rax, 8
          push rax
          ; 189 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 189 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 189 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000023_end
          ; 190 push string
          mov rax, s_218
          push rax
          ; 190 push string
          mov rax, s_212
          push rax
          ; 190 push integer
          mov rax, 190
          push rax
          ; 190 push string
          mov rax, s_216
          push rax
          ; 190 push boolean
          mov rax, 1
          push rax
          ; 190 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 191 duplicate
          pop rax
          push rax
          push rax
          ; 191 push integer
          mov rax, 24
          push rax
          ; 191 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 192 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 192 push integer
          mov rax, 24
          push rax
          ; 192 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 192 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 193 push integer
          mov rax, 0
          push rax
          ; 193 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 193 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 193 push string
          mov rax, s_212
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_216
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_opcode_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 193 push string
          mov rax, s_212
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_216
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 193 push string
          mov rax, s_134
          push rax
          ; 193 push string
          mov rax, s_212
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_216
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 194 duplicate
          pop rax
          push rax
          push rax
          ; 194 push integer
          mov rax, 24
          push rax
          ; 194 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 195 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 195 push integer
          mov rax, 24
          push rax
          ; 195 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 195 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 196 push integer
          mov rax, 8
          push rax
          ; 196 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 196 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 197 duplicate
          pop rax
          push rax
          push rax
          ; 197 push string
          mov rax, s_212
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_216
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 197 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 197 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000a2
          ; 198 push string
          mov rax, s_212
          push rax
          ; 198 push integer
          mov rax, 198
          push rax
          ; 198 push string
          mov rax, s_216
          push rax
          ; 198 push boolean
          mov rax, 1
          push rax
          ; 198 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 198 push string
          mov rax, s_134
          push rax
          ; 198 push string
          mov rax, s_212
          push rax
          ; 198 push integer
          mov rax, 198
          push rax
          ; 198 push string
          mov rax, s_216
          push rax
          ; 198 push boolean
          mov rax, 1
          push rax
          ; 198 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 198 jump
          jmp end_0x00000000000000a2
          ; 198 label
if_0x00000000000000a2: 
          ; 200 drop
          pop rax
          ; 200 label
end_0x00000000000000a2: 
          ; 201 duplicate
          pop rax
          push rax
          push rax
          ; 201 push integer
          mov rax, 24
          push rax
          ; 201 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 202 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 202 push integer
          mov rax, 24
          push rax
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 203 push integer
          mov rax, 16
          push rax
          ; 203 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 203 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 203 push string
          mov rax, s_212
          push rax
          ; 203 push integer
          mov rax, 203
          push rax
          ; 203 push string
          mov rax, s_216
          push rax
          ; 203 push boolean
          mov rax, 1
          push rax
          ; 203 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 203 push string
          mov rax, s_134
          push rax
          ; 203 push string
          mov rax, s_212
          push rax
          ; 203 push integer
          mov rax, 203
          push rax
          ; 203 push string
          mov rax, s_216
          push rax
          ; 203 push boolean
          mov rax, 1
          push rax
          ; 203 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 204 push string
          mov rax, s_7
          push rax
          ; 204 push string
          mov rax, s_212
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_216
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 205 push integer
          mov rax, 1
          push rax
          ; 205 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 end of while-loop
          jmp while_0x0000000000000023
while_0x0000000000000023_end: 
          ; 206 drop
          pop rax
          ; 182 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 182 return
          ret
          ; 12 function definition
fn_type_to_str: 
          push rbp
          mov rbp, rsp
          ; 14 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 14 push integer
          mov rax, 1
          push rax
          ; 14 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 14 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000a3
          ; 15 push string
          mov rax, s_219
          push rax
          ; 15 jump
          jmp end_0x00000000000000a3
          ; 15 label
if_0x00000000000000a3: 
          ; 16 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 16 push integer
          mov rax, 2
          push rax
          ; 16 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 16 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a4
          ; 17 push string
          mov rax, s_220
          push rax
          ; 16 jump
          jmp end_0x00000000000000a3
          ; 16 label
elif_0x00000000000000a4: 
          ; 18 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 18 push integer
          mov rax, 3
          push rax
          ; 18 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 18 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a5
          ; 19 push string
          mov rax, s_221
          push rax
          ; 18 jump
          jmp end_0x00000000000000a3
          ; 18 label
elif_0x00000000000000a5: 
          ; 20 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 20 push integer
          mov rax, 4
          push rax
          ; 20 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 20 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a6
          ; 21 push string
          mov rax, s_222
          push rax
          ; 20 jump
          jmp end_0x00000000000000a3
          ; 20 label
elif_0x00000000000000a6: 
          ; 22 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 22 push integer
          mov rax, 5
          push rax
          ; 22 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 22 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a7
          ; 23 push string
          mov rax, s_223
          push rax
          ; 22 jump
          jmp end_0x00000000000000a3
          ; 22 label
elif_0x00000000000000a7: 
          ; 25 push string
          mov rax, s_224
          push rax
          ; 25 push string
          mov rax, s_225
          push rax
          ; 25 push integer
          mov rax, 25
          push rax
          ; 25 push string
          mov rax, s_226
          push rax
          ; 25 push boolean
          mov rax, 1
          push rax
          ; 25 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 25 push string
          mov rax, s_126
          push rax
          ; 25 label
end_0x00000000000000a3: 
          ; 13 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 13 return
          ret
          ; 28 function definition
fn_str_to_type: 
          push rbp
          mov rbp, rsp
          ; 30 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 30 push string
          mov rax, s_227
          push rax
          ; 30 push string
          mov rax, s_225
          push rax
          ; 30 push integer
          mov rax, 30
          push rax
          ; 30 push string
          mov rax, s_228
          push rax
          ; 30 push boolean
          mov rax, 1
          push rax
          ; 30 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 30 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 30 push string
          mov rax, s_219
          push rax
          ; 30 push string
          mov rax, s_225
          push rax
          ; 30 push integer
          mov rax, 30
          push rax
          ; 30 push string
          mov rax, s_228
          push rax
          ; 30 push boolean
          mov rax, 1
          push rax
          ; 30 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 30 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 30 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000a8
          ; 31 push integer
          mov rax, 1
          push rax
          ; 31 jump
          jmp end_0x00000000000000a8
          ; 31 label
if_0x00000000000000a8: 
          ; 32 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 32 push string
          mov rax, s_229
          push rax
          ; 32 push string
          mov rax, s_225
          push rax
          ; 32 push integer
          mov rax, 32
          push rax
          ; 32 push string
          mov rax, s_228
          push rax
          ; 32 push boolean
          mov rax, 1
          push rax
          ; 32 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 32 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 32 push string
          mov rax, s_220
          push rax
          ; 32 push string
          mov rax, s_225
          push rax
          ; 32 push integer
          mov rax, 32
          push rax
          ; 32 push string
          mov rax, s_228
          push rax
          ; 32 push boolean
          mov rax, 1
          push rax
          ; 32 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 32 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 32 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000a9
          ; 33 push integer
          mov rax, 2
          push rax
          ; 32 jump
          jmp end_0x00000000000000a8
          ; 32 label
elif_0x00000000000000a9: 
          ; 34 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 34 push string
          mov rax, s_230
          push rax
          ; 34 push string
          mov rax, s_225
          push rax
          ; 34 push integer
          mov rax, 34
          push rax
          ; 34 push string
          mov rax, s_228
          push rax
          ; 34 push boolean
          mov rax, 1
          push rax
          ; 34 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 34 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 34 push string
          mov rax, s_221
          push rax
          ; 34 push string
          mov rax, s_225
          push rax
          ; 34 push integer
          mov rax, 34
          push rax
          ; 34 push string
          mov rax, s_228
          push rax
          ; 34 push boolean
          mov rax, 1
          push rax
          ; 34 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 34 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 34 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000aa
          ; 35 push integer
          mov rax, 3
          push rax
          ; 34 jump
          jmp end_0x00000000000000a8
          ; 34 label
elif_0x00000000000000aa: 
          ; 36 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_231
          push rax
          ; 36 push string
          mov rax, s_225
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_228
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_222
          push rax
          ; 36 push string
          mov rax, s_225
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_228
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 36 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ab
          ; 37 push integer
          mov rax, 4
          push rax
          ; 36 jump
          jmp end_0x00000000000000a8
          ; 36 label
elif_0x00000000000000ab: 
          ; 38 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 38 push string
          mov rax, s_232
          push rax
          ; 38 push string
          mov rax, s_225
          push rax
          ; 38 push integer
          mov rax, 38
          push rax
          ; 38 push string
          mov rax, s_228
          push rax
          ; 38 push boolean
          mov rax, 1
          push rax
          ; 38 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 38 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 38 push string
          mov rax, s_223
          push rax
          ; 38 push string
          mov rax, s_225
          push rax
          ; 38 push integer
          mov rax, 38
          push rax
          ; 38 push string
          mov rax, s_228
          push rax
          ; 38 push boolean
          mov rax, 1
          push rax
          ; 38 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 38 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 38 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ac
          ; 39 push integer
          mov rax, 5
          push rax
          ; 38 jump
          jmp end_0x00000000000000a8
          ; 38 label
elif_0x00000000000000ac: 
          ; 41 push string
          mov rax, s_233
          push rax
          ; 41 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 41 push string
          mov rax, s_225
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_228
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 41 push string
          mov rax, s_225
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_228
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 42 push integer
          mov rax, 0
          push rax
          ; 41 label
end_0x00000000000000a8: 
          ; 29 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 29 return
          ret
          ; 24 create buffer
          ; 27 function definition
fn_create_function: 
          push rbp
          mov rbp, rsp
          ; 29 push integer
          mov rax, 24
          push rax
          ; 29 push string
          mov rax, s_234
          push rax
          ; 29 push integer
          mov rax, 29
          push rax
          ; 29 push string
          mov rax, s_235
          push rax
          ; 29 push boolean
          mov rax, 1
          push rax
          ; 29 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 30 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 30 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 30 push integer
          mov rax, 0
          push rax
          ; 30 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 30 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 31 push integer
          mov rax, 24
          push rax
          ; 31 push string
          mov rax, s_234
          push rax
          ; 31 push integer
          mov rax, 31
          push rax
          ; 31 push string
          mov rax, s_235
          push rax
          ; 31 push boolean
          mov rax, 1
          push rax
          ; 31 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 31 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 31 push integer
          mov rax, 8
          push rax
          ; 31 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 31 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 32 push integer
          mov rax, 5
          push rax
          ; 32 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 32 push integer
          mov rax, 16
          push rax
          ; 32 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 32 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 28 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 28 return
          ret
          ; 35 function definition
fn_function_add_argument: 
          push rbp
          mov rbp, rsp
          ; 37 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 37 get pointer to buffer
          mov rax, buf__argument
          push rax
          ; 37 push integer
          mov rax, 0
          push rax
          ; 37 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 37 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 38 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 38 get pointer to buffer
          mov rax, buf__argument
          push rax
          ; 38 push integer
          mov rax, 8
          push rax
          ; 38 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 38 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 39 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 39 push integer
          mov rax, 8
          push rax
          ; 39 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 39 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 39 push integer
          mov rax, 8
          push rax
          ; 39 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 39 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 39 get pointer to buffer
          mov rax, buf__argument
          push rax
          ; 39 push integer
          mov rax, 16
          push rax
          ; 39 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 39 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 41 get pointer to buffer
          mov rax, buf__argument
          push rax
          ; 42 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 42 push integer
          mov rax, 8
          push rax
          ; 42 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 42 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 42 push string
          mov rax, s_234
          push rax
          ; 42 push integer
          mov rax, 42
          push rax
          ; 42 push string
          mov rax, s_236
          push rax
          ; 42 push boolean
          mov rax, 1
          push rax
          ; 42 call
          call fn_list_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 43 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 43 push integer
          mov rax, 8
          push rax
          ; 43 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 43 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 36 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 36 return
          ret
          ; 46 function definition
fn_function_set_return_type: 
          push rbp
          mov rbp, rsp
          ; 48 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 48 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 48 push integer
          mov rax, 16
          push rax
          ; 48 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 48 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 47 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 47 return
          ret
          ; 51 function definition
fn_function_get_arg: 
          push rbp
          mov rbp, rsp
          ; 53 push string
          mov rax, s_234
          push rax
          ; 53 push integer
          mov rax, 53
          push rax
          ; 53 push string
          mov rax, s_237
          push rax
          ; 53 push boolean
          mov rax, 1
          push rax
          ; 53 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 54 push integer
          mov rax, 0
          push rax
          ; 55 label
while_0x0000000000000024: 
          ; 55 duplicate
          pop rax
          push rax
          push rax
          ; 55 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 55 push integer
          mov rax, 8
          push rax
          ; 55 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 55 push integer
          mov rax, 8
          push rax
          ; 55 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 55 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 55 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000024_end
          ; 56 duplicate
          pop rax
          push rax
          push rax
          ; 56 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 56 push integer
          mov rax, 8
          push rax
          ; 56 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 56 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 56 push string
          mov rax, s_234
          push rax
          ; 56 push integer
          mov rax, 56
          push rax
          ; 56 push string
          mov rax, s_237
          push rax
          ; 56 push boolean
          mov rax, 1
          push rax
          ; 56 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 57 duplicate
          pop rax
          push rax
          push rax
          ; 57 push integer
          mov rax, 0
          push rax
          ; 57 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 57 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 57 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 57 push string
          mov rax, s_234
          push rax
          ; 57 push integer
          mov rax, 57
          push rax
          ; 57 push string
          mov rax, s_237
          push rax
          ; 57 push boolean
          mov rax, 1
          push rax
          ; 57 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 57 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000ad
          ; 58 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 58 drop
          pop rax
          ; 58 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 58 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 58 jump
          jmp end_0x00000000000000ad
          ; 58 label
if_0x00000000000000ad: 
          ; 58 label
end_0x00000000000000ad: 
          ; 59 drop
          pop rax
          ; 60 push integer
          mov rax, 1
          push rax
          ; 60 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 end of while-loop
          jmp while_0x0000000000000024
while_0x0000000000000024_end: 
          ; 61 drop
          pop rax
          ; 52 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 52 return
          ret
          ; 64 function definition
fn_function_get_arg_offset: 
          push rbp
          mov rbp, rsp
          ; 66 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 66 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 66 push string
          mov rax, s_234
          push rax
          ; 66 push integer
          mov rax, 66
          push rax
          ; 66 push string
          mov rax, s_238
          push rax
          ; 66 push boolean
          mov rax, 1
          push rax
          ; 66 call
          call fn_function_get_arg
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 67 duplicate
          pop rax
          push rax
          push rax
          ; 67 push string
          mov rax, s_234
          push rax
          ; 67 push integer
          mov rax, 67
          push rax
          ; 67 push string
          mov rax, s_238
          push rax
          ; 67 push boolean
          mov rax, 1
          push rax
          ; 67 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 67 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 67 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000ae
          ; 68 push integer
          mov rax, 0
          push rax
          ; 68 push integer
          mov rax, 1
          push rax
          ; 68 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 68 jump
          jmp end_0x00000000000000ae
          ; 68 label
if_0x00000000000000ae: 
          ; 70 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 70 push integer
          mov rax, 8
          push rax
          ; 70 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 70 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 70 push integer
          mov rax, 8
          push rax
          ; 70 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 70 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 71 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 71 push integer
          mov rax, 16
          push rax
          ; 71 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 71 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 71 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 72 push integer
          mov rax, 5
          push rax
          ; 72 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 73 push integer
          mov rax, 8
          push rax
          ; 73 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 70 label
end_0x00000000000000ae: 
          ; 65 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 65 return
          ret
          ; 4 function definition
fn_syntax_error: 
          push rbp
          mov rbp, rsp
          ; 6 push string
          mov rax, s_239
          push rax
          ; 6 push string
          mov rax, s_240
          push rax
          ; 6 push integer
          mov rax, 6
          push rax
          ; 6 push string
          mov rax, s_241
          push rax
          ; 6 push boolean
          mov rax, 1
          push rax
          ; 6 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 7 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 7 push string
          mov rax, s_240
          push rax
          ; 7 push integer
          mov rax, 7
          push rax
          ; 7 push string
          mov rax, s_241
          push rax
          ; 7 push boolean
          mov rax, 1
          push rax
          ; 7 call
          call fn_errori
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 8 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 8 push string
          mov rax, s_240
          push rax
          ; 8 push integer
          mov rax, 8
          push rax
          ; 8 push string
          mov rax, s_241
          push rax
          ; 8 push boolean
          mov rax, 1
          push rax
          ; 8 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 8 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 8 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000af
          ; 9 push string
          mov rax, s_242
          push rax
          ; 9 push string
          mov rax, s_240
          push rax
          ; 9 push integer
          mov rax, 9
          push rax
          ; 9 push string
          mov rax, s_241
          push rax
          ; 9 push boolean
          mov rax, 1
          push rax
          ; 9 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 10 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 10 push string
          mov rax, s_240
          push rax
          ; 10 push integer
          mov rax, 10
          push rax
          ; 10 push string
          mov rax, s_241
          push rax
          ; 10 push boolean
          mov rax, 1
          push rax
          ; 10 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 9 jump
          jmp end_0x00000000000000af
          ; 9 label
if_0x00000000000000af: 
          ; 9 label
end_0x00000000000000af: 
          ; 11 push string
          mov rax, s_7
          push rax
          ; 11 push string
          mov rax, s_240
          push rax
          ; 11 push integer
          mov rax, 11
          push rax
          ; 11 push string
          mov rax, s_241
          push rax
          ; 11 push boolean
          mov rax, 1
          push rax
          ; 11 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 12 push integer
          mov rax, 1
          push rax
          ; 12 push string
          mov rax, s_240
          push rax
          ; 12 push integer
          mov rax, 12
          push rax
          ; 12 push string
          mov rax, s_241
          push rax
          ; 12 push boolean
          mov rax, 1
          push rax
          ; 12 call
          call fn_exit
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 5 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 5 return
          ret
          ; 15 function definition
fn_is_int: 
          push rbp
          mov rbp, rsp
          ; 17 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 17 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 17 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 17 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 17 push character
          mov rax, 57
          mov rax, 57
          push rax
          ; 17 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 17 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 16 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 16 return
          ret
          ; 20 function definition
fn_is_alphabet: 
          push rbp
          mov rbp, rsp
          ; 22 push character
          mov rax, 65
          mov rax, 65
          push rax
          ; 22 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 22 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 22 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 22 push character
          mov rax, 90
          mov rax, 90
          push rax
          ; 22 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 22 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 23 push character
          mov rax, 97
          mov rax, 97
          push rax
          ; 23 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 23 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 23 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 23 push character
          mov rax, 122
          mov rax, 122
          push rax
          ; 23 is less or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovle rax, rbx
          push rax
          ; 23 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 23 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 24 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 24 push character
          mov rax, 45
          mov rax, 45
          push rax
          ; 24 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 24 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 25 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 25 push character
          mov rax, 95
          mov rax, 95
          push rax
          ; 25 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 25 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 26 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 26 push character
          mov rax, 46
          mov rax, 46
          push rax
          ; 26 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 26 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 21 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 21 return
          ret
          ; 29 function definition
fn_is_alphanumeric: 
          push rbp
          mov rbp, rsp
          ; 31 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 31 push string
          mov rax, s_240
          push rax
          ; 31 push integer
          mov rax, 31
          push rax
          ; 31 push string
          mov rax, s_243
          push rax
          ; 31 push boolean
          mov rax, 1
          push rax
          ; 31 call
          call fn_is_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 31 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 31 push string
          mov rax, s_240
          push rax
          ; 31 push integer
          mov rax, 31
          push rax
          ; 31 push string
          mov rax, s_243
          push rax
          ; 31 push boolean
          mov rax, 1
          push rax
          ; 31 call
          call fn_is_alphabet
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 31 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 30 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 30 return
          ret
          ; 34 function definition
fn_count_indent: 
          push rbp
          mov rbp, rsp
          ; 36 push integer
          mov rax, 0
          push rax
          ; 37 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 38 label
while_0x0000000000000025: 
          ; 38 duplicate
          pop rax
          push rax
          push rax
          ; 38 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 38 push character
          mov rax, 32
          mov rax, 32
          push rax
          ; 38 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 38 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 38 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 38 push integer
          mov rax, 9
          push rax
          ; 38 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 38 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 38 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000025_end
          ; 39 push integer
          mov rax, 1
          push rax
          ; 39 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 39 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 40 push integer
          mov rax, 1
          push rax
          ; 40 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 40 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 38 end of while-loop
          jmp while_0x0000000000000025
while_0x0000000000000025_end: 
          ; 41 drop
          pop rax
          ; 35 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 35 return
          ret
          ; 44 function definition
fn_is_word: 
          push rbp
          mov rbp, rsp
          ; 46 push integer
          mov rax, 0
          push rax
          ; 47 label
while_0x0000000000000026: 
          ; 47 duplicate
          pop rax
          push rax
          push rax
          ; 47 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 47 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 47 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 47 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 47 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 47 push integer
          mov rax, 0
          push rax
          ; 47 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 47 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 47 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000026_end
          ; 48 push integer
          mov rax, 1
          push rax
          ; 48 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 47 end of while-loop
          jmp while_0x0000000000000026
while_0x0000000000000026_end: 
          ; 49 duplicate
          pop rax
          push rax
          push rax
          ; 49 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 49 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 49 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 49 push integer
          mov rax, 0
          push rax
          ; 49 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 50 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 50 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 50 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 50 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 50 push string
          mov rax, s_240
          push rax
          ; 50 push integer
          mov rax, 50
          push rax
          ; 50 push string
          mov rax, s_244
          push rax
          ; 50 push boolean
          mov rax, 1
          push rax
          ; 50 call
          call fn_is_alphanumeric
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 50 push boolean
          mov rax, 0
          push rax
          ; 50 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 50 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 45 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 45 return
          ret
          ; 25 function definition
fn_token_to_str: 
          push rbp
          mov rbp, rsp
          ; 27 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 27 push integer
          mov rax, 0
          push rax
          ; 27 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 27 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000b0
          ; 28 push string
          mov rax, s_245
          push rax
          ; 28 jump
          jmp end_0x00000000000000b0
          ; 28 label
if_0x00000000000000b0: 
          ; 29 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 29 push integer
          mov rax, 1
          push rax
          ; 29 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 29 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b1
          ; 30 push string
          mov rax, s_246
          push rax
          ; 29 jump
          jmp end_0x00000000000000b0
          ; 29 label
elif_0x00000000000000b1: 
          ; 31 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 31 push integer
          mov rax, 2
          push rax
          ; 31 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 31 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b2
          ; 32 push string
          mov rax, s_247
          push rax
          ; 31 jump
          jmp end_0x00000000000000b0
          ; 31 label
elif_0x00000000000000b2: 
          ; 33 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 33 push integer
          mov rax, 3
          push rax
          ; 33 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 33 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b3
          ; 34 push string
          mov rax, s_248
          push rax
          ; 33 jump
          jmp end_0x00000000000000b0
          ; 33 label
elif_0x00000000000000b3: 
          ; 35 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 35 push integer
          mov rax, 4
          push rax
          ; 35 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 35 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b4
          ; 36 push string
          mov rax, s_249
          push rax
          ; 35 jump
          jmp end_0x00000000000000b0
          ; 35 label
elif_0x00000000000000b4: 
          ; 37 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 37 push integer
          mov rax, 5
          push rax
          ; 37 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 37 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b5
          ; 38 push string
          mov rax, s_219
          push rax
          ; 37 jump
          jmp end_0x00000000000000b0
          ; 37 label
elif_0x00000000000000b5: 
          ; 39 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 39 push integer
          mov rax, 6
          push rax
          ; 39 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 39 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b6
          ; 40 push string
          mov rax, s_220
          push rax
          ; 39 jump
          jmp end_0x00000000000000b0
          ; 39 label
elif_0x00000000000000b6: 
          ; 41 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 41 push integer
          mov rax, 7
          push rax
          ; 41 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 41 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b7
          ; 42 push string
          mov rax, s_250
          push rax
          ; 41 jump
          jmp end_0x00000000000000b0
          ; 41 label
elif_0x00000000000000b7: 
          ; 43 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 43 push integer
          mov rax, 8
          push rax
          ; 43 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 43 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b8
          ; 44 push string
          mov rax, s_251
          push rax
          ; 43 jump
          jmp end_0x00000000000000b0
          ; 43 label
elif_0x00000000000000b8: 
          ; 45 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 45 push integer
          mov rax, 9
          push rax
          ; 45 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 45 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000b9
          ; 46 push string
          mov rax, s_252
          push rax
          ; 45 jump
          jmp end_0x00000000000000b0
          ; 45 label
elif_0x00000000000000b9: 
          ; 47 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 47 push integer
          mov rax, 10
          push rax
          ; 47 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 47 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ba
          ; 48 push string
          mov rax, s_253
          push rax
          ; 47 jump
          jmp end_0x00000000000000b0
          ; 47 label
elif_0x00000000000000ba: 
          ; 49 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 49 push integer
          mov rax, 11
          push rax
          ; 49 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 49 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000bb
          ; 50 push string
          mov rax, s_221
          push rax
          ; 49 jump
          jmp end_0x00000000000000b0
          ; 49 label
elif_0x00000000000000bb: 
          ; 51 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 51 push integer
          mov rax, 12
          push rax
          ; 51 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 51 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000bc
          ; 52 push string
          mov rax, s_254
          push rax
          ; 51 jump
          jmp end_0x00000000000000b0
          ; 51 label
elif_0x00000000000000bc: 
          ; 53 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 53 push integer
          mov rax, 13
          push rax
          ; 53 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 53 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000bd
          ; 54 push string
          mov rax, s_255
          push rax
          ; 53 jump
          jmp end_0x00000000000000b0
          ; 53 label
elif_0x00000000000000bd: 
          ; 55 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 55 push integer
          mov rax, 14
          push rax
          ; 55 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 55 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000be
          ; 56 push string
          mov rax, s_256
          push rax
          ; 55 jump
          jmp end_0x00000000000000b0
          ; 55 label
elif_0x00000000000000be: 
          ; 57 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 57 push integer
          mov rax, 99
          push rax
          ; 57 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 57 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000bf
          ; 58 push string
          mov rax, s_257
          push rax
          ; 57 jump
          jmp end_0x00000000000000b0
          ; 57 label
elif_0x00000000000000bf: 
          ; 60 push string
          mov rax, s_258
          push rax
          ; 60 push string
          mov rax, s_259
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_260
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 60 push string
          mov rax, s_259
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_260
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 60 label
end_0x00000000000000b0: 
          ; 26 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 26 return
          ret
          ; 73 create buffer
          ; 76 function definition
fn_create_token: 
          push rbp
          mov rbp, rsp
          ; 78 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 78 get pointer to buffer
          mov rax, buf__token
          push rax
          ; 78 push integer
          mov rax, 16
          push rax
          ; 78 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 78 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 79 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 79 get pointer to buffer
          mov rax, buf__token
          push rax
          ; 79 push integer
          mov rax, 0
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 80 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 80 get pointer to buffer
          mov rax, buf__token
          push rax
          ; 80 push integer
          mov rax, 8
          push rax
          ; 80 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 80 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 81 get pointer to buffer
          mov rax, buf__token
          push rax
          ; 81 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 81 push string
          mov rax, s_259
          push rax
          ; 81 push integer
          mov rax, 81
          push rax
          ; 81 push string
          mov rax, s_261
          push rax
          ; 81 push boolean
          mov rax, 1
          push rax
          ; 81 call
          call fn_list_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 77 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 77 return
          ret
          ; 83 function definition
fn_dump_tokens: 
          push rbp
          mov rbp, rsp
          ; 85 push string
          mov rax, s_262
          push rax
          ; 85 push string
          mov rax, s_259
          push rax
          ; 85 push integer
          mov rax, 85
          push rax
          ; 85 push string
          mov rax, s_263
          push rax
          ; 85 push boolean
          mov rax, 1
          push rax
          ; 85 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 86 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 86 push integer
          mov rax, 8
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 86 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 86 push string
          mov rax, s_259
          push rax
          ; 86 push integer
          mov rax, 86
          push rax
          ; 86 push string
          mov rax, s_263
          push rax
          ; 86 push boolean
          mov rax, 1
          push rax
          ; 86 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 87 push string
          mov rax, s_7
          push rax
          ; 87 push string
          mov rax, s_259
          push rax
          ; 87 push integer
          mov rax, 87
          push rax
          ; 87 push string
          mov rax, s_263
          push rax
          ; 87 push boolean
          mov rax, 1
          push rax
          ; 87 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 89 push string
          mov rax, s_264
          push rax
          ; 89 push string
          mov rax, s_259
          push rax
          ; 89 push integer
          mov rax, 89
          push rax
          ; 89 push string
          mov rax, s_263
          push rax
          ; 89 push boolean
          mov rax, 1
          push rax
          ; 89 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 90 push integer
          mov rax, 0
          push rax
          ; 91 label
while_0x0000000000000027: 
          ; 91 duplicate
          pop rax
          push rax
          push rax
          ; 91 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 91 push integer
          mov rax, 8
          push rax
          ; 91 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 91 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 91 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 91 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000027_end
          ; 92 push string
          mov rax, s_218
          push rax
          ; 92 push string
          mov rax, s_259
          push rax
          ; 92 push integer
          mov rax, 92
          push rax
          ; 92 push string
          mov rax, s_263
          push rax
          ; 92 push boolean
          mov rax, 1
          push rax
          ; 92 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 93 duplicate
          pop rax
          push rax
          push rax
          ; 93 push integer
          mov rax, 24
          push rax
          ; 93 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 94 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 94 push integer
          mov rax, 24
          push rax
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 push integer
          mov rax, 0
          push rax
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 95 push string
          mov rax, s_259
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_263
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn_token_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 95 push string
          mov rax, s_259
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_263
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 95 push string
          mov rax, s_134
          push rax
          ; 95 push string
          mov rax, s_259
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_263
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 96 duplicate
          pop rax
          push rax
          push rax
          ; 96 push integer
          mov rax, 24
          push rax
          ; 96 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 97 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 97 push integer
          mov rax, 24
          push rax
          ; 97 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 97 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 98 push integer
          mov rax, 8
          push rax
          ; 98 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 98 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 99 duplicate
          pop rax
          push rax
          push rax
          ; 99 push string
          mov rax, s_259
          push rax
          ; 99 push integer
          mov rax, 99
          push rax
          ; 99 push string
          mov rax, s_263
          push rax
          ; 99 push boolean
          mov rax, 1
          push rax
          ; 99 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 99 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 99 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c0
          ; 100 push string
          mov rax, s_259
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_263
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 push string
          mov rax, s_134
          push rax
          ; 100 push string
          mov rax, s_259
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_263
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 jump
          jmp end_0x00000000000000c0
          ; 100 label
if_0x00000000000000c0: 
          ; 102 drop
          pop rax
          ; 102 label
end_0x00000000000000c0: 
          ; 103 duplicate
          pop rax
          push rax
          push rax
          ; 103 push integer
          mov rax, 24
          push rax
          ; 103 multiply
          pop rax
          pop rbx
          imul rbx, rax
          push rbx
          ; 104 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 104 push integer
          mov rax, 24
          push rax
          ; 104 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 104 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 105 push integer
          mov rax, 16
          push rax
          ; 105 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 105 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 105 push string
          mov rax, s_259
          push rax
          ; 105 push integer
          mov rax, 105
          push rax
          ; 105 push string
          mov rax, s_263
          push rax
          ; 105 push boolean
          mov rax, 1
          push rax
          ; 105 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 105 push string
          mov rax, s_134
          push rax
          ; 105 push string
          mov rax, s_259
          push rax
          ; 105 push integer
          mov rax, 105
          push rax
          ; 105 push string
          mov rax, s_263
          push rax
          ; 105 push boolean
          mov rax, 1
          push rax
          ; 105 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 106 push string
          mov rax, s_7
          push rax
          ; 106 push string
          mov rax, s_259
          push rax
          ; 106 push integer
          mov rax, 106
          push rax
          ; 106 push string
          mov rax, s_263
          push rax
          ; 106 push boolean
          mov rax, 1
          push rax
          ; 106 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 107 push integer
          mov rax, 1
          push rax
          ; 107 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 91 end of while-loop
          jmp while_0x0000000000000027
while_0x0000000000000027_end: 
          ; 108 drop
          pop rax
          ; 84 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 84 return
          ret
          ; 7 create buffer
          ; 8 create buffer
          ; 11 function definition
fn__tokenize: 
          push rbp
          mov rbp, rsp
          ; 15 push integer
          mov rax, 24
          push rax
          ; 15 push string
          mov rax, s_265
          push rax
          ; 15 push integer
          mov rax, 15
          push rax
          ; 15 push string
          mov rax, s_266
          push rax
          ; 15 push boolean
          mov rax, 1
          push rax
          ; 15 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 15 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 15 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 17 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 17 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 17 push string
          mov rax, s_265
          push rax
          ; 17 push integer
          mov rax, 17
          push rax
          ; 17 push string
          mov rax, s_266
          push rax
          ; 17 push boolean
          mov rax, 1
          push rax
          ; 17 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 17 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 17 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c1
          ; 18 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 18 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 18 push string
          mov rax, s_265
          push rax
          ; 18 push integer
          mov rax, 18
          push rax
          ; 18 push string
          mov rax, s_266
          push rax
          ; 18 push boolean
          mov rax, 1
          push rax
          ; 18 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 18 jump
          jmp end_0x00000000000000c1
          ; 18 label
if_0x00000000000000c1: 
          ; 18 label
end_0x00000000000000c1: 
          ; 19 push integer
          mov rax, 0
          push rax
          ; 19 push integer
          mov rax, 8
          push rax
          ; 19 push string
          mov rax, s_265
          push rax
          ; 19 push integer
          mov rax, 19
          push rax
          ; 19 push string
          mov rax, s_266
          push rax
          ; 19 push boolean
          mov rax, 1
          push rax
          ; 19 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 19 push string
          mov rax, s_265
          push rax
          ; 19 push integer
          mov rax, 19
          push rax
          ; 19 push string
          mov rax, s_266
          push rax
          ; 19 push boolean
          mov rax, 1
          push rax
          ; 19 call
          call fn_list_append_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 19 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 19 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 21 push boolean
          mov rax, 1
          push rax
          ; 21 get pointer to buffer
          mov rax, buf__at_start
          push rax
          ; 21 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 24 push integer
          mov rax, 1
          push rax
          ; 25 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 27 label
while_0x0000000000000028: 
          ; 27 duplicate
          pop rax
          push rax
          push rax
          ; 27 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 27 push integer
          mov rax, 0
          push rax
          ; 27 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 27 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000028_end
          ; 29 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 29 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 29 push integer
          mov rax, 8
          push rax
          ; 29 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 29 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 29 push integer
          mov rax, 0
          push rax
          ; 29 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 30 push string
          mov rax, s_267
          push rax
          ; 30 push string
          mov rax, s_265
          push rax
          ; 30 push integer
          mov rax, 30
          push rax
          ; 30 push string
          mov rax, s_266
          push rax
          ; 30 push boolean
          mov rax, 1
          push rax
          ; 30 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 32 duplicate
          pop rax
          push rax
          push rax
          ; 32 push string
          mov rax, s_265
          push rax
          ; 32 push integer
          mov rax, 32
          push rax
          ; 32 push string
          mov rax, s_266
          push rax
          ; 32 push boolean
          mov rax, 1
          push rax
          ; 32 call
          call fn_count_indent
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 33 get pointer to buffer
          mov rax, buf__at_start
          push rax
          ; 33 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 33 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c2
          ; 34 push boolean
          mov rax, 0
          push rax
          ; 34 get pointer to buffer
          mov rax, buf__at_start
          push rax
          ; 34 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 36 duplicate
          pop rax
          push rax
          push rax
          ; 36 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 36 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_265
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_266
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_list_peek_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 36 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c3
          ; 37 duplicate
          pop rax
          push rax
          push rax
          ; 37 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 37 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 37 push string
          mov rax, s_265
          push rax
          ; 37 push integer
          mov rax, 37
          push rax
          ; 37 push string
          mov rax, s_266
          push rax
          ; 37 push boolean
          mov rax, 1
          push rax
          ; 37 call
          call fn_list_append_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 37 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 37 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 38 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 38 duplicate
          pop rax
          push rax
          push rax
          ; 38 push integer
          mov rax, 3
          push rax
          ; 38 push string
          mov rax, s_265
          push rax
          ; 38 push integer
          mov rax, 38
          push rax
          ; 38 push string
          mov rax, s_266
          push rax
          ; 38 push boolean
          mov rax, 1
          push rax
          ; 38 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 39 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 39 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 39 push string
          mov rax, s_265
          push rax
          ; 39 push integer
          mov rax, 39
          push rax
          ; 39 push string
          mov rax, s_266
          push rax
          ; 39 push boolean
          mov rax, 1
          push rax
          ; 39 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 39 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 39 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 40 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 40 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 37 jump
          jmp end_0x00000000000000c3
          ; 37 label
if_0x00000000000000c3: 
          ; 37 label
end_0x00000000000000c3: 
          ; 41 duplicate
          pop rax
          push rax
          push rax
          ; 41 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 41 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 41 push string
          mov rax, s_265
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_266
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_list_peek_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 41 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 41 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c4
          ; 42 label
while_0x0000000000000029: 
          ; 42 duplicate
          pop rax
          push rax
          push rax
          ; 42 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 42 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 42 push string
          mov rax, s_265
          push rax
          ; 42 push integer
          mov rax, 42
          push rax
          ; 42 push string
          mov rax, s_266
          push rax
          ; 42 push boolean
          mov rax, 1
          push rax
          ; 42 call
          call fn_list_pop_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 42 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 42 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000029_end
          ; 43 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 43 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 43 push integer
          mov rax, 8
          push rax
          ; 43 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 43 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 43 push integer
          mov rax, 0
          push rax
          ; 43 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 43 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c5
          ; 44 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 44 duplicate
          pop rax
          push rax
          push rax
          ; 44 push string
          mov rax, s_268
          push rax
          ; 44 push string
          mov rax, s_265
          push rax
          ; 44 push integer
          mov rax, 44
          push rax
          ; 44 push string
          mov rax, s_266
          push rax
          ; 44 push boolean
          mov rax, 1
          push rax
          ; 44 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 44 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 44 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 44 jump
          jmp end_0x00000000000000c5
          ; 44 label
if_0x00000000000000c5: 
          ; 44 label
end_0x00000000000000c5: 
          ; 45 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 45 duplicate
          pop rax
          push rax
          push rax
          ; 45 push integer
          mov rax, 4
          push rax
          ; 45 push string
          mov rax, s_265
          push rax
          ; 45 push integer
          mov rax, 45
          push rax
          ; 45 push string
          mov rax, s_266
          push rax
          ; 45 push boolean
          mov rax, 1
          push rax
          ; 45 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 46 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 46 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 46 push string
          mov rax, s_265
          push rax
          ; 46 push integer
          mov rax, 46
          push rax
          ; 46 push string
          mov rax, s_266
          push rax
          ; 46 push boolean
          mov rax, 1
          push rax
          ; 46 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 46 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 46 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 47 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 47 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 42 end of while-loop
          jmp while_0x0000000000000029
while_0x0000000000000029_end: 
          ; 48 duplicate
          pop rax
          push rax
          push rax
          ; 48 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 48 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 48 push string
          mov rax, s_265
          push rax
          ; 48 push integer
          mov rax, 48
          push rax
          ; 48 push string
          mov rax, s_266
          push rax
          ; 48 push boolean
          mov rax, 1
          push rax
          ; 48 call
          call fn_list_append_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 48 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 48 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 42 jump
          jmp end_0x00000000000000c4
          ; 42 label
if_0x00000000000000c4: 
          ; 42 label
end_0x00000000000000c4: 
          ; 34 jump
          jmp end_0x00000000000000c2
          ; 34 label
if_0x00000000000000c2: 
          ; 34 label
end_0x00000000000000c2: 
          ; 49 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 51 duplicate
          pop rax
          push rax
          push rax
          ; 51 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 51 push character
          mov rax, 35
          mov rax, 35
          push rax
          ; 51 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 51 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000c6
          ; 52 label
while_0x000000000000002a: 
          ; 52 duplicate
          pop rax
          push rax
          push rax
          ; 52 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 52 push integer
          mov rax, 10
          push rax
          ; 52 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 52 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 52 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 52 push integer
          mov rax, 0
          push rax
          ; 52 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 52 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 52 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002a_end
          ; 53 push integer
          mov rax, 1
          push rax
          ; 53 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 52 end of while-loop
          jmp while_0x000000000000002a
while_0x000000000000002a_end: 
          ; 52 jump
          jmp end_0x00000000000000c6
          ; 52 label
if_0x00000000000000c6: 
          ; 54 duplicate
          pop rax
          push rax
          push rax
          ; 54 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 54 push character
          mov rax, 92
          mov rax, 92
          push rax
          ; 54 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 54 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000c7
          ; 55 label
while_0x000000000000002b: 
          ; 55 duplicate
          pop rax
          push rax
          push rax
          ; 55 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 55 push integer
          mov rax, 10
          push rax
          ; 55 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 55 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 55 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 55 push integer
          mov rax, 0
          push rax
          ; 55 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 55 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 55 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002b_end
          ; 56 push integer
          mov rax, 1
          push rax
          ; 56 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 55 end of while-loop
          jmp while_0x000000000000002b
while_0x000000000000002b_end: 
          ; 57 push integer
          mov rax, 1
          push rax
          ; 57 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 57 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 57 push integer
          mov rax, 1
          push rax
          ; 57 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 57 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 54 jump
          jmp end_0x00000000000000c6
          ; 54 label
elif_0x00000000000000c7: 
          ; 58 duplicate
          pop rax
          push rax
          push rax
          ; 58 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 58 push string
          mov rax, s_265
          push rax
          ; 58 push integer
          mov rax, 58
          push rax
          ; 58 push string
          mov rax, s_266
          push rax
          ; 58 push boolean
          mov rax, 1
          push rax
          ; 58 call
          call fn_is_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 58 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000c8
          ; 59 duplicate
          pop rax
          push rax
          push rax
          ; 62 push integer
          mov rax, 0
          push rax
          ; 62 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 63 label
while_0x000000000000002c: 
          ; 63 duplicate
          pop rax
          push rax
          push rax
          ; 63 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 63 push string
          mov rax, s_265
          push rax
          ; 63 push integer
          mov rax, 63
          push rax
          ; 63 push string
          mov rax, s_266
          push rax
          ; 63 push boolean
          mov rax, 1
          push rax
          ; 63 call
          call fn_is_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 63 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002c_end
          ; 64 push integer
          mov rax, 1
          push rax
          ; 64 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 64 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 64 push integer
          mov rax, 1
          push rax
          ; 64 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 64 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 63 end of while-loop
          jmp while_0x000000000000002c
while_0x000000000000002c_end: 
          ; 65 drop
          pop rax
          ; 68 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 68 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 68 push string
          mov rax, s_265
          push rax
          ; 68 push integer
          mov rax, 68
          push rax
          ; 68 push string
          mov rax, s_266
          push rax
          ; 68 push boolean
          mov rax, 1
          push rax
          ; 68 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 71 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 71 duplicate
          pop rax
          push rax
          push rax
          ; 71 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 71 duplicate
          pop rax
          push rax
          push rax
          ; 71 push string
          mov rax, s_265
          push rax
          ; 71 push integer
          mov rax, 71
          push rax
          ; 71 push string
          mov rax, s_266
          push rax
          ; 71 push boolean
          mov rax, 1
          push rax
          ; 71 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 71 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 71 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 71 push integer
          mov rax, 11
          push rax
          ; 71 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 72 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 72 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 72 push string
          mov rax, s_265
          push rax
          ; 72 push integer
          mov rax, 72
          push rax
          ; 72 push string
          mov rax, s_266
          push rax
          ; 72 push boolean
          mov rax, 1
          push rax
          ; 72 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 72 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 72 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 75 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 75 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 58 jump
          jmp end_0x00000000000000c6
          ; 58 label
elif_0x00000000000000c8: 
          ; 76 duplicate
          pop rax
          push rax
          push rax
          ; 76 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 76 push character
          mov rax, 39
          mov rax, 39
          push rax
          ; 76 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 76 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000c9
          ; 77 push integer
          mov rax, 1
          push rax
          ; 77 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 78 duplicate
          pop rax
          push rax
          push rax
          ; 78 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 78 push character
          mov rax, 92
          mov rax, 92
          push rax
          ; 78 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 78 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000ca
          ; 79 push integer
          mov rax, 1
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 jump
          jmp end_0x00000000000000ca
          ; 79 label
if_0x00000000000000ca: 
          ; 79 label
end_0x00000000000000ca: 
          ; 80 duplicate
          pop rax
          push rax
          push rax
          ; 80 push integer
          mov rax, 1
          push rax
          ; 80 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 80 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 80 push character
          mov rax, 39
          mov rax, 39
          push rax
          ; 80 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 80 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000cb
          ; 81 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 81 push string
          mov rax, s_269
          push rax
          ; 81 push string
          mov rax, s_265
          push rax
          ; 81 push integer
          mov rax, 81
          push rax
          ; 81 push string
          mov rax, s_266
          push rax
          ; 81 push boolean
          mov rax, 1
          push rax
          ; 81 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 81 push integer
          mov rax, 0
          push rax
          ; 81 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 81 jump
          jmp end_0x00000000000000cb
          ; 81 label
if_0x00000000000000cb: 
          ; 81 label
end_0x00000000000000cb: 
          ; 82 duplicate
          pop rax
          push rax
          push rax
          ; 82 push integer
          mov rax, 1
          push rax
          ; 82 push string
          mov rax, s_265
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_266
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 82 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 82 duplicate
          pop rax
          push rax
          push rax
          ; 82 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 82 push integer
          mov rax, 6
          push rax
          ; 82 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 83 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 83 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 83 push string
          mov rax, s_265
          push rax
          ; 83 push integer
          mov rax, 83
          push rax
          ; 83 push string
          mov rax, s_266
          push rax
          ; 83 push boolean
          mov rax, 1
          push rax
          ; 83 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 83 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 83 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 84 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 84 push integer
          mov rax, 2
          push rax
          ; 84 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 jump
          jmp end_0x00000000000000c6
          ; 76 label
elif_0x00000000000000c9: 
          ; 85 duplicate
          pop rax
          push rax
          push rax
          ; 85 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 85 push character
          mov rax, 34
          mov rax, 34
          push rax
          ; 85 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 85 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000cc
          ; 86 push integer
          mov rax, 1
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 89 push integer
          mov rax, 0
          push rax
          ; 90 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 91 label
while_0x000000000000002d: 
          ; 91 duplicate
          pop rax
          push rax
          push rax
          ; 91 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 91 push character
          mov rax, 34
          mov rax, 34
          push rax
          ; 91 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 91 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002d_end
          ; 92 duplicate
          pop rax
          push rax
          push rax
          ; 92 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 92 push character
          mov rax, 92
          mov rax, 92
          push rax
          ; 92 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 92 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000000cd
          ; 93 push integer
          mov rax, 1
          push rax
          ; 93 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 93 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 93 push integer
          mov rax, 1
          push rax
          ; 93 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 93 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 93 jump
          jmp end_0x00000000000000cd
          ; 93 label
if_0x00000000000000cd: 
          ; 93 label
end_0x00000000000000cd: 
          ; 94 push integer
          mov rax, 1
          push rax
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 94 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 94 push integer
          mov rax, 1
          push rax
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 94 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 91 end of while-loop
          jmp while_0x000000000000002d
while_0x000000000000002d_end: 
          ; 99 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 99 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 99 push string
          mov rax, s_265
          push rax
          ; 99 push integer
          mov rax, 99
          push rax
          ; 99 push string
          mov rax, s_266
          push rax
          ; 99 push boolean
          mov rax, 1
          push rax
          ; 99 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 102 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 102 duplicate
          pop rax
          push rax
          push rax
          ; 102 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 102 push integer
          mov rax, 13
          push rax
          ; 102 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 103 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 103 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 103 push string
          mov rax, s_265
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_266
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 103 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 103 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 104 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 105 push integer
          mov rax, 1
          push rax
          ; 105 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 85 jump
          jmp end_0x00000000000000c6
          ; 85 label
elif_0x00000000000000cc: 
          ; 106 duplicate
          pop rax
          push rax
          push rax
          ; 106 push string
          mov rax, s_270
          push rax
          ; 106 push string
          mov rax, s_265
          push rax
          ; 106 push integer
          mov rax, 106
          push rax
          ; 106 push string
          mov rax, s_266
          push rax
          ; 106 push boolean
          mov rax, 1
          push rax
          ; 106 call
          call fn_startswith
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 106 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ce
          ; 107 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 107 push integer
          mov rax, 2
          push rax
          ; 107 push string
          mov rax, s_265
          push rax
          ; 107 push integer
          mov rax, 107
          push rax
          ; 107 push string
          mov rax, s_266
          push rax
          ; 107 push boolean
          mov rax, 1
          push rax
          ; 107 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 108 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 108 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 108 push string
          mov rax, s_265
          push rax
          ; 108 push integer
          mov rax, 108
          push rax
          ; 108 push string
          mov rax, s_266
          push rax
          ; 108 push boolean
          mov rax, 1
          push rax
          ; 108 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 108 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 108 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 109 push integer
          mov rax, 2
          push rax
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 106 jump
          jmp end_0x00000000000000c6
          ; 106 label
elif_0x00000000000000ce: 
          ; 110 duplicate
          pop rax
          push rax
          push rax
          ; 110 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 110 push character
          mov rax, 43
          mov rax, 43
          push rax
          ; 110 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 110 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000cf
          ; 111 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 111 push integer
          mov rax, 1
          push rax
          ; 111 push string
          mov rax, s_271
          push rax
          ; 112 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 112 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 112 push string
          mov rax, s_265
          push rax
          ; 112 push integer
          mov rax, 112
          push rax
          ; 112 push string
          mov rax, s_266
          push rax
          ; 112 push boolean
          mov rax, 1
          push rax
          ; 112 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 112 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 112 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 113 push integer
          mov rax, 1
          push rax
          ; 113 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 110 jump
          jmp end_0x00000000000000c6
          ; 110 label
elif_0x00000000000000cf: 
          ; 114 duplicate
          pop rax
          push rax
          push rax
          ; 114 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 114 push character
          mov rax, 45
          mov rax, 45
          push rax
          ; 114 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 114 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d0
          ; 115 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 115 push integer
          mov rax, 1
          push rax
          ; 115 push string
          mov rax, s_142
          push rax
          ; 116 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 116 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 116 push string
          mov rax, s_265
          push rax
          ; 116 push integer
          mov rax, 116
          push rax
          ; 116 push string
          mov rax, s_266
          push rax
          ; 116 push boolean
          mov rax, 1
          push rax
          ; 116 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 116 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 116 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 117 push integer
          mov rax, 1
          push rax
          ; 117 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 114 jump
          jmp end_0x00000000000000c6
          ; 114 label
elif_0x00000000000000d0: 
          ; 118 duplicate
          pop rax
          push rax
          push rax
          ; 118 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 118 push character
          mov rax, 42
          mov rax, 42
          push rax
          ; 118 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 118 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d1
          ; 119 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 119 push integer
          mov rax, 1
          push rax
          ; 119 push string
          mov rax, s_272
          push rax
          ; 120 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 120 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 120 push string
          mov rax, s_265
          push rax
          ; 120 push integer
          mov rax, 120
          push rax
          ; 120 push string
          mov rax, s_266
          push rax
          ; 120 push boolean
          mov rax, 1
          push rax
          ; 120 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 120 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 120 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 121 push integer
          mov rax, 1
          push rax
          ; 121 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 118 jump
          jmp end_0x00000000000000c6
          ; 118 label
elif_0x00000000000000d1: 
          ; 122 duplicate
          pop rax
          push rax
          push rax
          ; 122 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 122 push character
          mov rax, 47
          mov rax, 47
          push rax
          ; 122 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 122 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d2
          ; 123 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 123 push integer
          mov rax, 1
          push rax
          ; 123 push string
          mov rax, s_273
          push rax
          ; 124 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 124 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 124 push string
          mov rax, s_265
          push rax
          ; 124 push integer
          mov rax, 124
          push rax
          ; 124 push string
          mov rax, s_266
          push rax
          ; 124 push boolean
          mov rax, 1
          push rax
          ; 124 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 124 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 124 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 125 push integer
          mov rax, 1
          push rax
          ; 125 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 122 jump
          jmp end_0x00000000000000c6
          ; 122 label
elif_0x00000000000000d2: 
          ; 126 duplicate
          pop rax
          push rax
          push rax
          ; 126 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 126 push character
          mov rax, 37
          mov rax, 37
          push rax
          ; 126 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 126 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d3
          ; 127 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 127 push integer
          mov rax, 1
          push rax
          ; 127 push string
          mov rax, s_274
          push rax
          ; 128 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 128 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 128 push string
          mov rax, s_265
          push rax
          ; 128 push integer
          mov rax, 128
          push rax
          ; 128 push string
          mov rax, s_266
          push rax
          ; 128 push boolean
          mov rax, 1
          push rax
          ; 128 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 128 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 128 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 129 push integer
          mov rax, 1
          push rax
          ; 129 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 126 jump
          jmp end_0x00000000000000c6
          ; 126 label
elif_0x00000000000000d3: 
          ; 130 duplicate
          pop rax
          push rax
          push rax
          ; 130 push string
          mov rax, s_275
          push rax
          ; 130 push string
          mov rax, s_265
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_266
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d4
          ; 131 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 131 push integer
          mov rax, 1
          push rax
          ; 131 push string
          mov rax, s_275
          push rax
          ; 132 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 132 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 132 push string
          mov rax, s_265
          push rax
          ; 132 push integer
          mov rax, 132
          push rax
          ; 132 push string
          mov rax, s_266
          push rax
          ; 132 push boolean
          mov rax, 1
          push rax
          ; 132 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 132 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 132 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 133 push integer
          mov rax, 3
          push rax
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 130 jump
          jmp end_0x00000000000000c6
          ; 130 label
elif_0x00000000000000d4: 
          ; 134 duplicate
          pop rax
          push rax
          push rax
          ; 134 push string
          mov rax, s_276
          push rax
          ; 134 push string
          mov rax, s_265
          push rax
          ; 134 push integer
          mov rax, 134
          push rax
          ; 134 push string
          mov rax, s_266
          push rax
          ; 134 push boolean
          mov rax, 1
          push rax
          ; 134 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 134 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d5
          ; 135 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 135 push integer
          mov rax, 1
          push rax
          ; 135 push string
          mov rax, s_276
          push rax
          ; 136 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 136 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 136 push string
          mov rax, s_265
          push rax
          ; 136 push integer
          mov rax, 136
          push rax
          ; 136 push string
          mov rax, s_266
          push rax
          ; 136 push boolean
          mov rax, 1
          push rax
          ; 136 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 136 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 136 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 137 push integer
          mov rax, 2
          push rax
          ; 137 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 134 jump
          jmp end_0x00000000000000c6
          ; 134 label
elif_0x00000000000000d5: 
          ; 138 duplicate
          pop rax
          push rax
          push rax
          ; 138 push string
          mov rax, s_277
          push rax
          ; 138 push string
          mov rax, s_265
          push rax
          ; 138 push integer
          mov rax, 138
          push rax
          ; 138 push string
          mov rax, s_266
          push rax
          ; 138 push boolean
          mov rax, 1
          push rax
          ; 138 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 138 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d6
          ; 139 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 139 push integer
          mov rax, 1
          push rax
          ; 139 push string
          mov rax, s_277
          push rax
          ; 140 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 140 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 140 push string
          mov rax, s_265
          push rax
          ; 140 push integer
          mov rax, 140
          push rax
          ; 140 push string
          mov rax, s_266
          push rax
          ; 140 push boolean
          mov rax, 1
          push rax
          ; 140 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 140 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 140 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 141 push integer
          mov rax, 3
          push rax
          ; 141 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 138 jump
          jmp end_0x00000000000000c6
          ; 138 label
elif_0x00000000000000d6: 
          ; 142 duplicate
          pop rax
          push rax
          push rax
          ; 142 push string
          mov rax, s_278
          push rax
          ; 142 push string
          mov rax, s_265
          push rax
          ; 142 push integer
          mov rax, 142
          push rax
          ; 142 push string
          mov rax, s_266
          push rax
          ; 142 push boolean
          mov rax, 1
          push rax
          ; 142 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 142 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d7
          ; 143 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 143 push integer
          mov rax, 1
          push rax
          ; 143 push string
          mov rax, s_278
          push rax
          ; 144 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 144 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 144 push string
          mov rax, s_265
          push rax
          ; 144 push integer
          mov rax, 144
          push rax
          ; 144 push string
          mov rax, s_266
          push rax
          ; 144 push boolean
          mov rax, 1
          push rax
          ; 144 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 144 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 144 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 145 push integer
          mov rax, 3
          push rax
          ; 145 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 142 jump
          jmp end_0x00000000000000c6
          ; 142 label
elif_0x00000000000000d7: 
          ; 146 duplicate
          pop rax
          push rax
          push rax
          ; 146 push string
          mov rax, s_279
          push rax
          ; 146 push string
          mov rax, s_265
          push rax
          ; 146 push integer
          mov rax, 146
          push rax
          ; 146 push string
          mov rax, s_266
          push rax
          ; 146 push boolean
          mov rax, 1
          push rax
          ; 146 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 146 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d8
          ; 147 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 147 push integer
          mov rax, 5
          push rax
          ; 147 push string
          mov rax, s_280
          push rax
          ; 148 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 148 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 148 push string
          mov rax, s_265
          push rax
          ; 148 push integer
          mov rax, 148
          push rax
          ; 148 push string
          mov rax, s_266
          push rax
          ; 148 push boolean
          mov rax, 1
          push rax
          ; 148 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 148 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 148 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 149 push integer
          mov rax, 4
          push rax
          ; 149 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 146 jump
          jmp end_0x00000000000000c6
          ; 146 label
elif_0x00000000000000d8: 
          ; 150 duplicate
          pop rax
          push rax
          push rax
          ; 150 push string
          mov rax, s_281
          push rax
          ; 150 push string
          mov rax, s_265
          push rax
          ; 150 push integer
          mov rax, 150
          push rax
          ; 150 push string
          mov rax, s_266
          push rax
          ; 150 push boolean
          mov rax, 1
          push rax
          ; 150 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000d9
          ; 151 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 151 push integer
          mov rax, 5
          push rax
          ; 151 push string
          mov rax, s_1
          push rax
          ; 152 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 152 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 152 push string
          mov rax, s_265
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_266
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 152 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 153 push integer
          mov rax, 5
          push rax
          ; 153 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 150 jump
          jmp end_0x00000000000000c6
          ; 150 label
elif_0x00000000000000d9: 
          ; 154 duplicate
          pop rax
          push rax
          push rax
          ; 154 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 154 push character
          mov rax, 58
          mov rax, 58
          push rax
          ; 154 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 154 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000da
          ; 155 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 155 push integer
          mov rax, 7
          push rax
          ; 155 push string
          mov rax, s_265
          push rax
          ; 155 push integer
          mov rax, 155
          push rax
          ; 155 push string
          mov rax, s_266
          push rax
          ; 155 push boolean
          mov rax, 1
          push rax
          ; 155 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 156 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 156 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 156 push string
          mov rax, s_265
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_266
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 156 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 156 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 157 push integer
          mov rax, 1
          push rax
          ; 157 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 154 jump
          jmp end_0x00000000000000c6
          ; 154 label
elif_0x00000000000000da: 
          ; 158 duplicate
          pop rax
          push rax
          push rax
          ; 158 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 158 push character
          mov rax, 44
          mov rax, 44
          push rax
          ; 158 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 158 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000db
          ; 159 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 159 push integer
          mov rax, 8
          push rax
          ; 159 push string
          mov rax, s_265
          push rax
          ; 159 push integer
          mov rax, 159
          push rax
          ; 159 push string
          mov rax, s_266
          push rax
          ; 159 push boolean
          mov rax, 1
          push rax
          ; 159 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 160 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 160 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 160 push string
          mov rax, s_265
          push rax
          ; 160 push integer
          mov rax, 160
          push rax
          ; 160 push string
          mov rax, s_266
          push rax
          ; 160 push boolean
          mov rax, 1
          push rax
          ; 160 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 160 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 160 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 161 push integer
          mov rax, 1
          push rax
          ; 161 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 158 jump
          jmp end_0x00000000000000c6
          ; 158 label
elif_0x00000000000000db: 
          ; 162 duplicate
          pop rax
          push rax
          push rax
          ; 162 push string
          mov rax, s_282
          push rax
          ; 162 push string
          mov rax, s_265
          push rax
          ; 162 push integer
          mov rax, 162
          push rax
          ; 162 push string
          mov rax, s_266
          push rax
          ; 162 push boolean
          mov rax, 1
          push rax
          ; 162 call
          call fn_startswith
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 162 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000dc
          ; 163 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 163 push integer
          mov rax, 9
          push rax
          ; 163 push string
          mov rax, s_282
          push rax
          ; 164 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 164 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 164 push string
          mov rax, s_265
          push rax
          ; 164 push integer
          mov rax, 164
          push rax
          ; 164 push string
          mov rax, s_266
          push rax
          ; 164 push boolean
          mov rax, 1
          push rax
          ; 164 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 164 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 164 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 165 push integer
          mov rax, 2
          push rax
          ; 165 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 162 jump
          jmp end_0x00000000000000c6
          ; 162 label
elif_0x00000000000000dc: 
          ; 166 duplicate
          pop rax
          push rax
          push rax
          ; 166 push string
          mov rax, s_283
          push rax
          ; 166 push string
          mov rax, s_265
          push rax
          ; 166 push integer
          mov rax, 166
          push rax
          ; 166 push string
          mov rax, s_266
          push rax
          ; 166 push boolean
          mov rax, 1
          push rax
          ; 166 call
          call fn_startswith
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 166 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000dd
          ; 167 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 167 push integer
          mov rax, 9
          push rax
          ; 167 push string
          mov rax, s_283
          push rax
          ; 168 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 168 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 168 push string
          mov rax, s_265
          push rax
          ; 168 push integer
          mov rax, 168
          push rax
          ; 168 push string
          mov rax, s_266
          push rax
          ; 168 push boolean
          mov rax, 1
          push rax
          ; 168 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 168 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 168 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 169 push integer
          mov rax, 2
          push rax
          ; 169 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 166 jump
          jmp end_0x00000000000000c6
          ; 166 label
elif_0x00000000000000dd: 
          ; 170 duplicate
          pop rax
          push rax
          push rax
          ; 170 push string
          mov rax, s_284
          push rax
          ; 170 push string
          mov rax, s_265
          push rax
          ; 170 push integer
          mov rax, 170
          push rax
          ; 170 push string
          mov rax, s_266
          push rax
          ; 170 push boolean
          mov rax, 1
          push rax
          ; 170 call
          call fn_startswith
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 170 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000de
          ; 171 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 171 push integer
          mov rax, 9
          push rax
          ; 171 push string
          mov rax, s_284
          push rax
          ; 172 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 172 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 172 push string
          mov rax, s_265
          push rax
          ; 172 push integer
          mov rax, 172
          push rax
          ; 172 push string
          mov rax, s_266
          push rax
          ; 172 push boolean
          mov rax, 1
          push rax
          ; 172 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 172 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 172 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 173 push integer
          mov rax, 2
          push rax
          ; 173 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 jump
          jmp end_0x00000000000000c6
          ; 170 label
elif_0x00000000000000de: 
          ; 174 duplicate
          pop rax
          push rax
          push rax
          ; 174 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 174 push character
          mov rax, 61
          mov rax, 61
          push rax
          ; 174 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 174 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000df
          ; 175 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 175 push integer
          mov rax, 9
          push rax
          ; 175 push string
          mov rax, s_285
          push rax
          ; 176 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 176 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 176 push string
          mov rax, s_265
          push rax
          ; 176 push integer
          mov rax, 176
          push rax
          ; 176 push string
          mov rax, s_266
          push rax
          ; 176 push boolean
          mov rax, 1
          push rax
          ; 176 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 176 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 176 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 177 push integer
          mov rax, 1
          push rax
          ; 177 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 174 jump
          jmp end_0x00000000000000c6
          ; 174 label
elif_0x00000000000000df: 
          ; 178 duplicate
          pop rax
          push rax
          push rax
          ; 178 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 178 push character
          mov rax, 60
          mov rax, 60
          push rax
          ; 178 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 178 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e0
          ; 179 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 179 push integer
          mov rax, 9
          push rax
          ; 179 push string
          mov rax, s_286
          push rax
          ; 180 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 180 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 180 push string
          mov rax, s_265
          push rax
          ; 180 push integer
          mov rax, 180
          push rax
          ; 180 push string
          mov rax, s_266
          push rax
          ; 180 push boolean
          mov rax, 1
          push rax
          ; 180 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 180 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 180 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 181 push integer
          mov rax, 1
          push rax
          ; 181 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 178 jump
          jmp end_0x00000000000000c6
          ; 178 label
elif_0x00000000000000e0: 
          ; 182 duplicate
          pop rax
          push rax
          push rax
          ; 182 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 182 push character
          mov rax, 62
          mov rax, 62
          push rax
          ; 182 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 182 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e1
          ; 183 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 183 push integer
          mov rax, 9
          push rax
          ; 183 push string
          mov rax, s_287
          push rax
          ; 184 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 184 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 184 push string
          mov rax, s_265
          push rax
          ; 184 push integer
          mov rax, 184
          push rax
          ; 184 push string
          mov rax, s_266
          push rax
          ; 184 push boolean
          mov rax, 1
          push rax
          ; 184 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 184 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 184 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 185 push integer
          mov rax, 1
          push rax
          ; 185 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 182 jump
          jmp end_0x00000000000000c6
          ; 182 label
elif_0x00000000000000e1: 
          ; 186 duplicate
          pop rax
          push rax
          push rax
          ; 186 push string
          mov rax, s_288
          push rax
          ; 186 push string
          mov rax, s_265
          push rax
          ; 186 push integer
          mov rax, 186
          push rax
          ; 186 push string
          mov rax, s_266
          push rax
          ; 186 push boolean
          mov rax, 1
          push rax
          ; 186 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 186 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e2
          ; 187 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 187 push integer
          mov rax, 12
          push rax
          ; 187 push string
          mov rax, s_288
          push rax
          ; 188 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 188 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 188 push string
          mov rax, s_265
          push rax
          ; 188 push integer
          mov rax, 188
          push rax
          ; 188 push string
          mov rax, s_266
          push rax
          ; 188 push boolean
          mov rax, 1
          push rax
          ; 188 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 188 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 188 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 189 push integer
          mov rax, 6
          push rax
          ; 189 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 186 jump
          jmp end_0x00000000000000c6
          ; 186 label
elif_0x00000000000000e2: 
          ; 190 duplicate
          pop rax
          push rax
          push rax
          ; 190 push string
          mov rax, s_289
          push rax
          ; 190 push string
          mov rax, s_265
          push rax
          ; 190 push integer
          mov rax, 190
          push rax
          ; 190 push string
          mov rax, s_266
          push rax
          ; 190 push boolean
          mov rax, 1
          push rax
          ; 190 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 190 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e3
          ; 191 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 191 push integer
          mov rax, 12
          push rax
          ; 191 push string
          mov rax, s_289
          push rax
          ; 192 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 192 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 192 push string
          mov rax, s_265
          push rax
          ; 192 push integer
          mov rax, 192
          push rax
          ; 192 push string
          mov rax, s_266
          push rax
          ; 192 push boolean
          mov rax, 1
          push rax
          ; 192 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 192 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 192 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 193 push integer
          mov rax, 5
          push rax
          ; 193 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 190 jump
          jmp end_0x00000000000000c6
          ; 190 label
elif_0x00000000000000e3: 
          ; 194 duplicate
          pop rax
          push rax
          push rax
          ; 194 push string
          mov rax, s_290
          push rax
          ; 194 push string
          mov rax, s_265
          push rax
          ; 194 push integer
          mov rax, 194
          push rax
          ; 194 push string
          mov rax, s_266
          push rax
          ; 194 push boolean
          mov rax, 1
          push rax
          ; 194 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 194 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e4
          ; 195 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 195 push integer
          mov rax, 12
          push rax
          ; 195 push string
          mov rax, s_290
          push rax
          ; 196 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 196 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 196 push string
          mov rax, s_265
          push rax
          ; 196 push integer
          mov rax, 196
          push rax
          ; 196 push string
          mov rax, s_266
          push rax
          ; 196 push boolean
          mov rax, 1
          push rax
          ; 196 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 196 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 196 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 197 push integer
          mov rax, 5
          push rax
          ; 197 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 194 jump
          jmp end_0x00000000000000c6
          ; 194 label
elif_0x00000000000000e4: 
          ; 198 duplicate
          pop rax
          push rax
          push rax
          ; 198 push string
          mov rax, s_291
          push rax
          ; 198 push string
          mov rax, s_265
          push rax
          ; 198 push integer
          mov rax, 198
          push rax
          ; 198 push string
          mov rax, s_266
          push rax
          ; 198 push boolean
          mov rax, 1
          push rax
          ; 198 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 198 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e5
          ; 199 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 199 push integer
          mov rax, 12
          push rax
          ; 199 push string
          mov rax, s_291
          push rax
          ; 200 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 200 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 200 push string
          mov rax, s_265
          push rax
          ; 200 push integer
          mov rax, 200
          push rax
          ; 200 push string
          mov rax, s_266
          push rax
          ; 200 push boolean
          mov rax, 1
          push rax
          ; 200 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 200 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 200 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 201 push integer
          mov rax, 5
          push rax
          ; 201 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 198 jump
          jmp end_0x00000000000000c6
          ; 198 label
elif_0x00000000000000e5: 
          ; 202 duplicate
          pop rax
          push rax
          push rax
          ; 202 push string
          mov rax, s_292
          push rax
          ; 202 push string
          mov rax, s_265
          push rax
          ; 202 push integer
          mov rax, 202
          push rax
          ; 202 push string
          mov rax, s_266
          push rax
          ; 202 push boolean
          mov rax, 1
          push rax
          ; 202 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 202 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e6
          ; 203 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 203 push integer
          mov rax, 12
          push rax
          ; 203 push string
          mov rax, s_292
          push rax
          ; 204 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 204 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 204 push string
          mov rax, s_265
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_266
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 204 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 204 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 205 push integer
          mov rax, 5
          push rax
          ; 205 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 jump
          jmp end_0x00000000000000c6
          ; 202 label
elif_0x00000000000000e6: 
          ; 206 duplicate
          pop rax
          push rax
          push rax
          ; 206 push string
          mov rax, s_293
          push rax
          ; 206 push string
          mov rax, s_265
          push rax
          ; 206 push integer
          mov rax, 206
          push rax
          ; 206 push string
          mov rax, s_266
          push rax
          ; 206 push boolean
          mov rax, 1
          push rax
          ; 206 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 206 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e7
          ; 207 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 207 push integer
          mov rax, 12
          push rax
          ; 207 push string
          mov rax, s_293
          push rax
          ; 208 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 208 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 208 push string
          mov rax, s_265
          push rax
          ; 208 push integer
          mov rax, 208
          push rax
          ; 208 push string
          mov rax, s_266
          push rax
          ; 208 push boolean
          mov rax, 1
          push rax
          ; 208 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 208 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 208 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 209 push integer
          mov rax, 5
          push rax
          ; 209 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 206 jump
          jmp end_0x00000000000000c6
          ; 206 label
elif_0x00000000000000e7: 
          ; 210 duplicate
          pop rax
          push rax
          push rax
          ; 210 push string
          mov rax, s_294
          push rax
          ; 210 push string
          mov rax, s_265
          push rax
          ; 210 push integer
          mov rax, 210
          push rax
          ; 210 push string
          mov rax, s_266
          push rax
          ; 210 push boolean
          mov rax, 1
          push rax
          ; 210 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 210 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e8
          ; 211 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 211 push integer
          mov rax, 12
          push rax
          ; 211 push string
          mov rax, s_294
          push rax
          ; 212 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 212 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 212 push string
          mov rax, s_265
          push rax
          ; 212 push integer
          mov rax, 212
          push rax
          ; 212 push string
          mov rax, s_266
          push rax
          ; 212 push boolean
          mov rax, 1
          push rax
          ; 212 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 212 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 212 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 213 push integer
          mov rax, 5
          push rax
          ; 213 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 jump
          jmp end_0x00000000000000c6
          ; 210 label
elif_0x00000000000000e8: 
          ; 214 duplicate
          pop rax
          push rax
          push rax
          ; 214 push string
          mov rax, s_295
          push rax
          ; 214 push string
          mov rax, s_265
          push rax
          ; 214 push integer
          mov rax, 214
          push rax
          ; 214 push string
          mov rax, s_266
          push rax
          ; 214 push boolean
          mov rax, 1
          push rax
          ; 214 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 214 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000e9
          ; 215 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 215 push integer
          mov rax, 12
          push rax
          ; 215 push string
          mov rax, s_295
          push rax
          ; 216 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 216 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 216 push string
          mov rax, s_265
          push rax
          ; 216 push integer
          mov rax, 216
          push rax
          ; 216 push string
          mov rax, s_266
          push rax
          ; 216 push boolean
          mov rax, 1
          push rax
          ; 216 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 216 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 216 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 217 push integer
          mov rax, 2
          push rax
          ; 217 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 214 jump
          jmp end_0x00000000000000c6
          ; 214 label
elif_0x00000000000000e9: 
          ; 218 duplicate
          pop rax
          push rax
          push rax
          ; 218 push string
          mov rax, s_296
          push rax
          ; 218 push string
          mov rax, s_265
          push rax
          ; 218 push integer
          mov rax, 218
          push rax
          ; 218 push string
          mov rax, s_266
          push rax
          ; 218 push boolean
          mov rax, 1
          push rax
          ; 218 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 218 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ea
          ; 219 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 219 push integer
          mov rax, 12
          push rax
          ; 219 push string
          mov rax, s_296
          push rax
          ; 220 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 220 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 220 push string
          mov rax, s_265
          push rax
          ; 220 push integer
          mov rax, 220
          push rax
          ; 220 push string
          mov rax, s_266
          push rax
          ; 220 push boolean
          mov rax, 1
          push rax
          ; 220 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 220 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 220 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 221 push integer
          mov rax, 6
          push rax
          ; 221 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 218 jump
          jmp end_0x00000000000000c6
          ; 218 label
elif_0x00000000000000ea: 
          ; 222 duplicate
          pop rax
          push rax
          push rax
          ; 222 push string
          mov rax, s_297
          push rax
          ; 222 push string
          mov rax, s_265
          push rax
          ; 222 push integer
          mov rax, 222
          push rax
          ; 222 push string
          mov rax, s_266
          push rax
          ; 222 push boolean
          mov rax, 1
          push rax
          ; 222 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 222 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000eb
          ; 223 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 223 push integer
          mov rax, 12
          push rax
          ; 223 push string
          mov rax, s_297
          push rax
          ; 224 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 224 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 224 push string
          mov rax, s_265
          push rax
          ; 224 push integer
          mov rax, 224
          push rax
          ; 224 push string
          mov rax, s_266
          push rax
          ; 224 push boolean
          mov rax, 1
          push rax
          ; 224 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 224 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 224 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 225 push integer
          mov rax, 6
          push rax
          ; 225 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 222 jump
          jmp end_0x00000000000000c6
          ; 222 label
elif_0x00000000000000eb: 
          ; 226 duplicate
          pop rax
          push rax
          push rax
          ; 226 push string
          mov rax, s_298
          push rax
          ; 226 push string
          mov rax, s_265
          push rax
          ; 226 push integer
          mov rax, 226
          push rax
          ; 226 push string
          mov rax, s_266
          push rax
          ; 226 push boolean
          mov rax, 1
          push rax
          ; 226 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 226 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ec
          ; 227 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 227 push integer
          mov rax, 12
          push rax
          ; 227 push string
          mov rax, s_298
          push rax
          ; 228 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 228 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 228 push string
          mov rax, s_265
          push rax
          ; 228 push integer
          mov rax, 228
          push rax
          ; 228 push string
          mov rax, s_266
          push rax
          ; 228 push boolean
          mov rax, 1
          push rax
          ; 228 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 228 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 228 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 229 push integer
          mov rax, 6
          push rax
          ; 229 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 226 jump
          jmp end_0x00000000000000c6
          ; 226 label
elif_0x00000000000000ec: 
          ; 230 duplicate
          pop rax
          push rax
          push rax
          ; 230 push string
          mov rax, s_299
          push rax
          ; 230 push string
          mov rax, s_265
          push rax
          ; 230 push integer
          mov rax, 230
          push rax
          ; 230 push string
          mov rax, s_266
          push rax
          ; 230 push boolean
          mov rax, 1
          push rax
          ; 230 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 230 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ed
          ; 231 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 231 push integer
          mov rax, 12
          push rax
          ; 231 push string
          mov rax, s_299
          push rax
          ; 232 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 232 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 232 push string
          mov rax, s_265
          push rax
          ; 232 push integer
          mov rax, 232
          push rax
          ; 232 push string
          mov rax, s_266
          push rax
          ; 232 push boolean
          mov rax, 1
          push rax
          ; 232 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 232 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 232 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 233 push integer
          mov rax, 6
          push rax
          ; 233 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 230 jump
          jmp end_0x00000000000000c6
          ; 230 label
elif_0x00000000000000ed: 
          ; 234 duplicate
          pop rax
          push rax
          push rax
          ; 234 push string
          mov rax, s_300
          push rax
          ; 234 push string
          mov rax, s_265
          push rax
          ; 234 push integer
          mov rax, 234
          push rax
          ; 234 push string
          mov rax, s_266
          push rax
          ; 234 push boolean
          mov rax, 1
          push rax
          ; 234 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 234 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ee
          ; 235 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 235 push integer
          mov rax, 12
          push rax
          ; 235 push string
          mov rax, s_300
          push rax
          ; 236 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 236 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 236 push string
          mov rax, s_265
          push rax
          ; 236 push integer
          mov rax, 236
          push rax
          ; 236 push string
          mov rax, s_266
          push rax
          ; 236 push boolean
          mov rax, 1
          push rax
          ; 236 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 236 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 236 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 237 push integer
          mov rax, 6
          push rax
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 234 jump
          jmp end_0x00000000000000c6
          ; 234 label
elif_0x00000000000000ee: 
          ; 238 duplicate
          pop rax
          push rax
          push rax
          ; 238 push string
          mov rax, s_175
          push rax
          ; 238 push string
          mov rax, s_265
          push rax
          ; 238 push integer
          mov rax, 238
          push rax
          ; 238 push string
          mov rax, s_266
          push rax
          ; 238 push boolean
          mov rax, 1
          push rax
          ; 238 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 238 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ef
          ; 239 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 239 push integer
          mov rax, 12
          push rax
          ; 239 push string
          mov rax, s_175
          push rax
          ; 240 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 240 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 240 push string
          mov rax, s_265
          push rax
          ; 240 push integer
          mov rax, 240
          push rax
          ; 240 push string
          mov rax, s_266
          push rax
          ; 240 push boolean
          mov rax, 1
          push rax
          ; 240 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 240 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 240 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 241 push integer
          mov rax, 4
          push rax
          ; 241 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 238 jump
          jmp end_0x00000000000000c6
          ; 238 label
elif_0x00000000000000ef: 
          ; 242 duplicate
          pop rax
          push rax
          push rax
          ; 242 push string
          mov rax, s_301
          push rax
          ; 242 push string
          mov rax, s_265
          push rax
          ; 242 push integer
          mov rax, 242
          push rax
          ; 242 push string
          mov rax, s_266
          push rax
          ; 242 push boolean
          mov rax, 1
          push rax
          ; 242 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 242 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f0
          ; 243 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 243 push integer
          mov rax, 12
          push rax
          ; 243 push string
          mov rax, s_301
          push rax
          ; 244 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 244 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 244 push string
          mov rax, s_265
          push rax
          ; 244 push integer
          mov rax, 244
          push rax
          ; 244 push string
          mov rax, s_266
          push rax
          ; 244 push boolean
          mov rax, 1
          push rax
          ; 244 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 244 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 244 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 245 push integer
          mov rax, 3
          push rax
          ; 245 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 242 jump
          jmp end_0x00000000000000c6
          ; 242 label
elif_0x00000000000000f0: 
          ; 246 duplicate
          pop rax
          push rax
          push rax
          ; 246 push string
          mov rax, s_302
          push rax
          ; 246 push string
          mov rax, s_265
          push rax
          ; 246 push integer
          mov rax, 246
          push rax
          ; 246 push string
          mov rax, s_266
          push rax
          ; 246 push boolean
          mov rax, 1
          push rax
          ; 246 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 246 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f1
          ; 247 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 247 push integer
          mov rax, 12
          push rax
          ; 247 push string
          mov rax, s_302
          push rax
          ; 248 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 248 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 248 push string
          mov rax, s_265
          push rax
          ; 248 push integer
          mov rax, 248
          push rax
          ; 248 push string
          mov rax, s_266
          push rax
          ; 248 push boolean
          mov rax, 1
          push rax
          ; 248 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 248 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 248 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 249 push integer
          mov rax, 4
          push rax
          ; 249 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 246 jump
          jmp end_0x00000000000000c6
          ; 246 label
elif_0x00000000000000f1: 
          ; 250 duplicate
          pop rax
          push rax
          push rax
          ; 250 push string
          mov rax, s_303
          push rax
          ; 250 push string
          mov rax, s_265
          push rax
          ; 250 push integer
          mov rax, 250
          push rax
          ; 250 push string
          mov rax, s_266
          push rax
          ; 250 push boolean
          mov rax, 1
          push rax
          ; 250 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 250 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f2
          ; 251 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 251 push integer
          mov rax, 12
          push rax
          ; 251 push string
          mov rax, s_303
          push rax
          ; 252 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 252 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 252 push string
          mov rax, s_265
          push rax
          ; 252 push integer
          mov rax, 252
          push rax
          ; 252 push string
          mov rax, s_266
          push rax
          ; 252 push boolean
          mov rax, 1
          push rax
          ; 252 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 252 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 252 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 253 push integer
          mov rax, 4
          push rax
          ; 253 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 250 jump
          jmp end_0x00000000000000c6
          ; 250 label
elif_0x00000000000000f2: 
          ; 254 duplicate
          pop rax
          push rax
          push rax
          ; 254 push string
          mov rax, s_304
          push rax
          ; 254 push string
          mov rax, s_265
          push rax
          ; 254 push integer
          mov rax, 254
          push rax
          ; 254 push string
          mov rax, s_266
          push rax
          ; 254 push boolean
          mov rax, 1
          push rax
          ; 254 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 254 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f3
          ; 255 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 255 push integer
          mov rax, 12
          push rax
          ; 255 push string
          mov rax, s_304
          push rax
          ; 256 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 256 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 256 push string
          mov rax, s_265
          push rax
          ; 256 push integer
          mov rax, 256
          push rax
          ; 256 push string
          mov rax, s_266
          push rax
          ; 256 push boolean
          mov rax, 1
          push rax
          ; 256 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 256 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 256 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 257 push integer
          mov rax, 2
          push rax
          ; 257 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 254 jump
          jmp end_0x00000000000000c6
          ; 254 label
elif_0x00000000000000f3: 
          ; 258 duplicate
          pop rax
          push rax
          push rax
          ; 258 push string
          mov rax, s_305
          push rax
          ; 258 push string
          mov rax, s_265
          push rax
          ; 258 push integer
          mov rax, 258
          push rax
          ; 258 push string
          mov rax, s_266
          push rax
          ; 258 push boolean
          mov rax, 1
          push rax
          ; 258 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 258 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f4
          ; 259 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 259 push integer
          mov rax, 12
          push rax
          ; 259 push string
          mov rax, s_305
          push rax
          ; 260 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 260 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 260 push string
          mov rax, s_265
          push rax
          ; 260 push integer
          mov rax, 260
          push rax
          ; 260 push string
          mov rax, s_266
          push rax
          ; 260 push boolean
          mov rax, 1
          push rax
          ; 260 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 260 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 260 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 261 push integer
          mov rax, 6
          push rax
          ; 261 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 258 jump
          jmp end_0x00000000000000c6
          ; 258 label
elif_0x00000000000000f4: 
          ; 262 duplicate
          pop rax
          push rax
          push rax
          ; 262 push string
          mov rax, s_306
          push rax
          ; 262 push string
          mov rax, s_265
          push rax
          ; 262 push integer
          mov rax, 262
          push rax
          ; 262 push string
          mov rax, s_266
          push rax
          ; 262 push boolean
          mov rax, 1
          push rax
          ; 262 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 262 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f5
          ; 263 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 263 push integer
          mov rax, 12
          push rax
          ; 263 push string
          mov rax, s_306
          push rax
          ; 264 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 264 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 264 push string
          mov rax, s_265
          push rax
          ; 264 push integer
          mov rax, 264
          push rax
          ; 264 push string
          mov rax, s_266
          push rax
          ; 264 push boolean
          mov rax, 1
          push rax
          ; 264 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 264 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 264 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 265 push integer
          mov rax, 8
          push rax
          ; 265 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 262 jump
          jmp end_0x00000000000000c6
          ; 262 label
elif_0x00000000000000f5: 
          ; 266 duplicate
          pop rax
          push rax
          push rax
          ; 266 push string
          mov rax, s_191
          push rax
          ; 266 push string
          mov rax, s_265
          push rax
          ; 266 push integer
          mov rax, 266
          push rax
          ; 266 push string
          mov rax, s_266
          push rax
          ; 266 push boolean
          mov rax, 1
          push rax
          ; 266 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 266 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f6
          ; 267 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 267 push integer
          mov rax, 12
          push rax
          ; 267 push string
          mov rax, s_191
          push rax
          ; 268 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 268 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 268 push string
          mov rax, s_265
          push rax
          ; 268 push integer
          mov rax, 268
          push rax
          ; 268 push string
          mov rax, s_266
          push rax
          ; 268 push boolean
          mov rax, 1
          push rax
          ; 268 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 268 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 268 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 269 push integer
          mov rax, 4
          push rax
          ; 269 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 266 jump
          jmp end_0x00000000000000c6
          ; 266 label
elif_0x00000000000000f6: 
          ; 270 duplicate
          pop rax
          push rax
          push rax
          ; 270 push string
          mov rax, s_199
          push rax
          ; 270 push string
          mov rax, s_265
          push rax
          ; 270 push integer
          mov rax, 270
          push rax
          ; 270 push string
          mov rax, s_266
          push rax
          ; 270 push boolean
          mov rax, 1
          push rax
          ; 270 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 270 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f7
          ; 271 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 271 push integer
          mov rax, 12
          push rax
          ; 271 push string
          mov rax, s_199
          push rax
          ; 272 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 272 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 272 push string
          mov rax, s_265
          push rax
          ; 272 push integer
          mov rax, 272
          push rax
          ; 272 push string
          mov rax, s_266
          push rax
          ; 272 push boolean
          mov rax, 1
          push rax
          ; 272 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 272 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 272 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 273 push integer
          mov rax, 3
          push rax
          ; 273 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 270 jump
          jmp end_0x00000000000000c6
          ; 270 label
elif_0x00000000000000f7: 
          ; 274 duplicate
          pop rax
          push rax
          push rax
          ; 274 push string
          mov rax, s_307
          push rax
          ; 274 push string
          mov rax, s_265
          push rax
          ; 274 push integer
          mov rax, 274
          push rax
          ; 274 push string
          mov rax, s_266
          push rax
          ; 274 push boolean
          mov rax, 1
          push rax
          ; 274 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 274 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f8
          ; 275 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 275 push integer
          mov rax, 12
          push rax
          ; 275 push string
          mov rax, s_307
          push rax
          ; 276 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 276 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 276 push string
          mov rax, s_265
          push rax
          ; 276 push integer
          mov rax, 276
          push rax
          ; 276 push string
          mov rax, s_266
          push rax
          ; 276 push boolean
          mov rax, 1
          push rax
          ; 276 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 276 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 276 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 277 push integer
          mov rax, 4
          push rax
          ; 277 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 274 jump
          jmp end_0x00000000000000c6
          ; 274 label
elif_0x00000000000000f8: 
          ; 278 duplicate
          pop rax
          push rax
          push rax
          ; 278 push string
          mov rax, s_308
          push rax
          ; 278 push string
          mov rax, s_265
          push rax
          ; 278 push integer
          mov rax, 278
          push rax
          ; 278 push string
          mov rax, s_266
          push rax
          ; 278 push boolean
          mov rax, 1
          push rax
          ; 278 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 278 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000f9
          ; 279 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 279 push integer
          mov rax, 12
          push rax
          ; 279 push string
          mov rax, s_308
          push rax
          ; 280 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 280 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 280 push string
          mov rax, s_265
          push rax
          ; 280 push integer
          mov rax, 280
          push rax
          ; 280 push string
          mov rax, s_266
          push rax
          ; 280 push boolean
          mov rax, 1
          push rax
          ; 280 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 280 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 280 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 281 push integer
          mov rax, 4
          push rax
          ; 281 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 278 jump
          jmp end_0x00000000000000c6
          ; 278 label
elif_0x00000000000000f9: 
          ; 282 duplicate
          pop rax
          push rax
          push rax
          ; 282 push string
          mov rax, s_309
          push rax
          ; 282 push string
          mov rax, s_265
          push rax
          ; 282 push integer
          mov rax, 282
          push rax
          ; 282 push string
          mov rax, s_266
          push rax
          ; 282 push boolean
          mov rax, 1
          push rax
          ; 282 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 282 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000fa
          ; 283 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 283 push integer
          mov rax, 12
          push rax
          ; 283 push string
          mov rax, s_309
          push rax
          ; 284 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 284 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 284 push string
          mov rax, s_265
          push rax
          ; 284 push integer
          mov rax, 284
          push rax
          ; 284 push string
          mov rax, s_266
          push rax
          ; 284 push boolean
          mov rax, 1
          push rax
          ; 284 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 284 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 284 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 285 push integer
          mov rax, 4
          push rax
          ; 285 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 282 jump
          jmp end_0x00000000000000c6
          ; 282 label
elif_0x00000000000000fa: 
          ; 286 duplicate
          pop rax
          push rax
          push rax
          ; 286 push string
          mov rax, s_310
          push rax
          ; 286 push string
          mov rax, s_265
          push rax
          ; 286 push integer
          mov rax, 286
          push rax
          ; 286 push string
          mov rax, s_266
          push rax
          ; 286 push boolean
          mov rax, 1
          push rax
          ; 286 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 286 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000fb
          ; 287 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 287 push integer
          mov rax, 12
          push rax
          ; 287 push string
          mov rax, s_310
          push rax
          ; 288 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 288 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 288 push string
          mov rax, s_265
          push rax
          ; 288 push integer
          mov rax, 288
          push rax
          ; 288 push string
          mov rax, s_266
          push rax
          ; 288 push boolean
          mov rax, 1
          push rax
          ; 288 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 288 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 288 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 289 push integer
          mov rax, 4
          push rax
          ; 289 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 286 jump
          jmp end_0x00000000000000c6
          ; 286 label
elif_0x00000000000000fb: 
          ; 290 duplicate
          pop rax
          push rax
          push rax
          ; 290 push string
          mov rax, s_207
          push rax
          ; 290 push string
          mov rax, s_265
          push rax
          ; 290 push integer
          mov rax, 290
          push rax
          ; 290 push string
          mov rax, s_266
          push rax
          ; 290 push boolean
          mov rax, 1
          push rax
          ; 290 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 290 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000fc
          ; 291 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 291 push integer
          mov rax, 12
          push rax
          ; 291 push string
          mov rax, s_207
          push rax
          ; 292 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 292 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 292 push string
          mov rax, s_265
          push rax
          ; 292 push integer
          mov rax, 292
          push rax
          ; 292 push string
          mov rax, s_266
          push rax
          ; 292 push boolean
          mov rax, 1
          push rax
          ; 292 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 292 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 292 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 293 push integer
          mov rax, 4
          push rax
          ; 293 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 290 jump
          jmp end_0x00000000000000c6
          ; 290 label
elif_0x00000000000000fc: 
          ; 294 duplicate
          pop rax
          push rax
          push rax
          ; 294 push string
          mov rax, s_208
          push rax
          ; 294 push string
          mov rax, s_265
          push rax
          ; 294 push integer
          mov rax, 294
          push rax
          ; 294 push string
          mov rax, s_266
          push rax
          ; 294 push boolean
          mov rax, 1
          push rax
          ; 294 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 294 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000fd
          ; 295 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 295 push integer
          mov rax, 12
          push rax
          ; 295 push string
          mov rax, s_208
          push rax
          ; 296 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 296 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 296 push string
          mov rax, s_265
          push rax
          ; 296 push integer
          mov rax, 296
          push rax
          ; 296 push string
          mov rax, s_266
          push rax
          ; 296 push boolean
          mov rax, 1
          push rax
          ; 296 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 296 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 296 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 297 push integer
          mov rax, 7
          push rax
          ; 297 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 294 jump
          jmp end_0x00000000000000c6
          ; 294 label
elif_0x00000000000000fd: 
          ; 298 duplicate
          pop rax
          push rax
          push rax
          ; 298 push string
          mov rax, s_311
          push rax
          ; 298 push string
          mov rax, s_265
          push rax
          ; 298 push integer
          mov rax, 298
          push rax
          ; 298 push string
          mov rax, s_266
          push rax
          ; 298 push boolean
          mov rax, 1
          push rax
          ; 298 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 298 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000fe
          ; 299 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 299 push integer
          mov rax, 12
          push rax
          ; 299 push string
          mov rax, s_311
          push rax
          ; 300 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 300 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 300 push string
          mov rax, s_265
          push rax
          ; 300 push integer
          mov rax, 300
          push rax
          ; 300 push string
          mov rax, s_266
          push rax
          ; 300 push boolean
          mov rax, 1
          push rax
          ; 300 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 300 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 300 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 301 push integer
          mov rax, 4
          push rax
          ; 301 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 298 jump
          jmp end_0x00000000000000c6
          ; 298 label
elif_0x00000000000000fe: 
          ; 302 duplicate
          pop rax
          push rax
          push rax
          ; 302 push string
          mov rax, s_227
          push rax
          ; 302 push string
          mov rax, s_265
          push rax
          ; 302 push integer
          mov rax, 302
          push rax
          ; 302 push string
          mov rax, s_266
          push rax
          ; 302 push boolean
          mov rax, 1
          push rax
          ; 302 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 302 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000000ff
          ; 303 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 303 push integer
          mov rax, 14
          push rax
          ; 303 push string
          mov rax, s_227
          push rax
          ; 304 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 304 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 304 push string
          mov rax, s_265
          push rax
          ; 304 push integer
          mov rax, 304
          push rax
          ; 304 push string
          mov rax, s_266
          push rax
          ; 304 push boolean
          mov rax, 1
          push rax
          ; 304 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 304 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 304 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 305 push integer
          mov rax, 4
          push rax
          ; 305 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 302 jump
          jmp end_0x00000000000000c6
          ; 302 label
elif_0x00000000000000ff: 
          ; 306 duplicate
          pop rax
          push rax
          push rax
          ; 306 push string
          mov rax, s_229
          push rax
          ; 306 push string
          mov rax, s_265
          push rax
          ; 306 push integer
          mov rax, 306
          push rax
          ; 306 push string
          mov rax, s_266
          push rax
          ; 306 push boolean
          mov rax, 1
          push rax
          ; 306 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 306 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000100
          ; 307 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 307 push integer
          mov rax, 14
          push rax
          ; 307 push string
          mov rax, s_229
          push rax
          ; 308 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 308 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 308 push string
          mov rax, s_265
          push rax
          ; 308 push integer
          mov rax, 308
          push rax
          ; 308 push string
          mov rax, s_266
          push rax
          ; 308 push boolean
          mov rax, 1
          push rax
          ; 308 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 308 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 308 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 309 push integer
          mov rax, 4
          push rax
          ; 309 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 306 jump
          jmp end_0x00000000000000c6
          ; 306 label
elif_0x0000000000000100: 
          ; 310 duplicate
          pop rax
          push rax
          push rax
          ; 310 push string
          mov rax, s_230
          push rax
          ; 310 push string
          mov rax, s_265
          push rax
          ; 310 push integer
          mov rax, 310
          push rax
          ; 310 push string
          mov rax, s_266
          push rax
          ; 310 push boolean
          mov rax, 1
          push rax
          ; 310 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 310 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000101
          ; 311 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 311 push integer
          mov rax, 14
          push rax
          ; 311 push string
          mov rax, s_230
          push rax
          ; 312 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 312 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 312 push string
          mov rax, s_265
          push rax
          ; 312 push integer
          mov rax, 312
          push rax
          ; 312 push string
          mov rax, s_266
          push rax
          ; 312 push boolean
          mov rax, 1
          push rax
          ; 312 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 312 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 312 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 313 push integer
          mov rax, 3
          push rax
          ; 313 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 310 jump
          jmp end_0x00000000000000c6
          ; 310 label
elif_0x0000000000000101: 
          ; 314 duplicate
          pop rax
          push rax
          push rax
          ; 314 push string
          mov rax, s_231
          push rax
          ; 314 push string
          mov rax, s_265
          push rax
          ; 314 push integer
          mov rax, 314
          push rax
          ; 314 push string
          mov rax, s_266
          push rax
          ; 314 push boolean
          mov rax, 1
          push rax
          ; 314 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 314 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000102
          ; 315 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 315 push integer
          mov rax, 14
          push rax
          ; 315 push string
          mov rax, s_231
          push rax
          ; 316 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 316 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 316 push string
          mov rax, s_265
          push rax
          ; 316 push integer
          mov rax, 316
          push rax
          ; 316 push string
          mov rax, s_266
          push rax
          ; 316 push boolean
          mov rax, 1
          push rax
          ; 316 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 316 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 316 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 317 push integer
          mov rax, 3
          push rax
          ; 317 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 314 jump
          jmp end_0x00000000000000c6
          ; 314 label
elif_0x0000000000000102: 
          ; 318 duplicate
          pop rax
          push rax
          push rax
          ; 318 push string
          mov rax, s_232
          push rax
          ; 318 push string
          mov rax, s_265
          push rax
          ; 318 push integer
          mov rax, 318
          push rax
          ; 318 push string
          mov rax, s_266
          push rax
          ; 318 push boolean
          mov rax, 1
          push rax
          ; 318 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 318 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000103
          ; 319 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 319 push integer
          mov rax, 14
          push rax
          ; 319 push string
          mov rax, s_232
          push rax
          ; 320 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 320 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 320 push string
          mov rax, s_265
          push rax
          ; 320 push integer
          mov rax, 320
          push rax
          ; 320 push string
          mov rax, s_266
          push rax
          ; 320 push boolean
          mov rax, 1
          push rax
          ; 320 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 320 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 320 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 321 push integer
          mov rax, 4
          push rax
          ; 321 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 318 jump
          jmp end_0x00000000000000c6
          ; 318 label
elif_0x0000000000000103: 
          ; 322 duplicate
          pop rax
          push rax
          push rax
          ; 322 push string
          mov rax, s_312
          push rax
          ; 322 push string
          mov rax, s_265
          push rax
          ; 322 push integer
          mov rax, 322
          push rax
          ; 322 push string
          mov rax, s_266
          push rax
          ; 322 push boolean
          mov rax, 1
          push rax
          ; 322 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 322 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000104
          ; 323 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 323 push integer
          mov rax, 12
          push rax
          ; 323 push string
          mov rax, s_312
          push rax
          ; 324 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 324 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 324 push string
          mov rax, s_265
          push rax
          ; 324 push integer
          mov rax, 324
          push rax
          ; 324 push string
          mov rax, s_266
          push rax
          ; 324 push boolean
          mov rax, 1
          push rax
          ; 324 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 324 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 324 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 325 push integer
          mov rax, 5
          push rax
          ; 325 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 322 jump
          jmp end_0x00000000000000c6
          ; 322 label
elif_0x0000000000000104: 
          ; 326 duplicate
          pop rax
          push rax
          push rax
          ; 326 push string
          mov rax, s_313
          push rax
          ; 326 push string
          mov rax, s_265
          push rax
          ; 326 push integer
          mov rax, 326
          push rax
          ; 326 push string
          mov rax, s_266
          push rax
          ; 326 push boolean
          mov rax, 1
          push rax
          ; 326 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 326 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000105
          ; 327 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 327 push integer
          mov rax, 12
          push rax
          ; 327 push string
          mov rax, s_313
          push rax
          ; 328 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 328 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 328 push string
          mov rax, s_265
          push rax
          ; 328 push integer
          mov rax, 328
          push rax
          ; 328 push string
          mov rax, s_266
          push rax
          ; 328 push boolean
          mov rax, 1
          push rax
          ; 328 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 328 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 328 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 329 push integer
          mov rax, 9
          push rax
          ; 329 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 326 jump
          jmp end_0x00000000000000c6
          ; 326 label
elif_0x0000000000000105: 
          ; 330 duplicate
          pop rax
          push rax
          push rax
          ; 330 push string
          mov rax, s_314
          push rax
          ; 330 push string
          mov rax, s_265
          push rax
          ; 330 push integer
          mov rax, 330
          push rax
          ; 330 push string
          mov rax, s_266
          push rax
          ; 330 push boolean
          mov rax, 1
          push rax
          ; 330 call
          call fn_is_word
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 330 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000106
          ; 331 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 331 push integer
          mov rax, 12
          push rax
          ; 331 push string
          mov rax, s_314
          push rax
          ; 332 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 332 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 332 push string
          mov rax, s_265
          push rax
          ; 332 push integer
          mov rax, 332
          push rax
          ; 332 push string
          mov rax, s_266
          push rax
          ; 332 push boolean
          mov rax, 1
          push rax
          ; 332 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 332 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 332 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 333 push integer
          mov rax, 15
          push rax
          ; 333 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 330 jump
          jmp end_0x00000000000000c6
          ; 330 label
elif_0x0000000000000106: 
          ; 334 duplicate
          pop rax
          push rax
          push rax
          ; 334 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 334 push string
          mov rax, s_265
          push rax
          ; 334 push integer
          mov rax, 334
          push rax
          ; 334 push string
          mov rax, s_266
          push rax
          ; 334 push boolean
          mov rax, 1
          push rax
          ; 334 call
          call fn_is_alphabet
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 334 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000107
          ; 335 duplicate
          pop rax
          push rax
          push rax
          ; 338 push integer
          mov rax, 0
          push rax
          ; 338 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 339 label
while_0x000000000000002e: 
          ; 339 duplicate
          pop rax
          push rax
          push rax
          ; 339 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 339 push string
          mov rax, s_265
          push rax
          ; 339 push integer
          mov rax, 339
          push rax
          ; 339 push string
          mov rax, s_266
          push rax
          ; 339 push boolean
          mov rax, 1
          push rax
          ; 339 call
          call fn_is_alphabet
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 339 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 339 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 339 push string
          mov rax, s_265
          push rax
          ; 339 push integer
          mov rax, 339
          push rax
          ; 339 push string
          mov rax, s_266
          push rax
          ; 339 push boolean
          mov rax, 1
          push rax
          ; 339 call
          call fn_is_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 339 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 339 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002e_end
          ; 340 push integer
          mov rax, 1
          push rax
          ; 340 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 340 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 340 push integer
          mov rax, 1
          push rax
          ; 340 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 340 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 339 end of while-loop
          jmp while_0x000000000000002e
while_0x000000000000002e_end: 
          ; 341 drop
          pop rax
          ; 344 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 344 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 344 push string
          mov rax, s_265
          push rax
          ; 344 push integer
          mov rax, 344
          push rax
          ; 344 push string
          mov rax, s_266
          push rax
          ; 344 push boolean
          mov rax, 1
          push rax
          ; 344 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 347 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 347 duplicate
          pop rax
          push rax
          push rax
          ; 347 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 347 duplicate
          pop rax
          push rax
          push rax
          ; 347 push string
          mov rax, s_265
          push rax
          ; 347 push integer
          mov rax, 347
          push rax
          ; 347 push string
          mov rax, s_266
          push rax
          ; 347 push boolean
          mov rax, 1
          push rax
          ; 347 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 347 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 347 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 347 push integer
          mov rax, 10
          push rax
          ; 347 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 348 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 348 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 348 push string
          mov rax, s_265
          push rax
          ; 348 push integer
          mov rax, 348
          push rax
          ; 348 push string
          mov rax, s_266
          push rax
          ; 348 push boolean
          mov rax, 1
          push rax
          ; 348 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 348 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 348 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 351 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 351 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 334 jump
          jmp end_0x00000000000000c6
          ; 334 label
elif_0x0000000000000107: 
          ; 352 duplicate
          pop rax
          push rax
          push rax
          ; 352 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 352 push integer
          mov rax, 10
          push rax
          ; 352 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 352 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000108
          ; 353 label
while_0x000000000000002f: 
          ; 353 duplicate
          pop rax
          push rax
          push rax
          ; 353 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 353 push integer
          mov rax, 10
          push rax
          ; 353 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 353 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000002f_end
          ; 354 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 354 push integer
          mov rax, 1
          push rax
          ; 354 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 354 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 354 push integer
          mov rax, 1
          push rax
          ; 354 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 353 end of while-loop
          jmp while_0x000000000000002f
while_0x000000000000002f_end: 
          ; 355 push boolean
          mov rax, 1
          push rax
          ; 355 get pointer to buffer
          mov rax, buf__at_start
          push rax
          ; 355 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 352 jump
          jmp end_0x00000000000000c6
          ; 352 label
elif_0x0000000000000108: 
          ; 357 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 357 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 357 push integer
          mov rax, 1
          push rax
          ; 357 push string
          mov rax, s_265
          push rax
          ; 357 push integer
          mov rax, 357
          push rax
          ; 357 push string
          mov rax, s_266
          push rax
          ; 357 push boolean
          mov rax, 1
          push rax
          ; 357 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 357 push string
          mov rax, s_315
          push rax
          ; 357 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 357 push string
          mov rax, s_265
          push rax
          ; 357 push integer
          mov rax, 357
          push rax
          ; 357 push string
          mov rax, s_266
          push rax
          ; 357 push boolean
          mov rax, 1
          push rax
          ; 357 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 357 push string
          mov rax, s_265
          push rax
          ; 357 push integer
          mov rax, 357
          push rax
          ; 357 push string
          mov rax, s_266
          push rax
          ; 357 push boolean
          mov rax, 1
          push rax
          ; 357 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 357 label
end_0x00000000000000c6: 
          ; 27 end of while-loop
          jmp while_0x0000000000000028
while_0x0000000000000028_end: 
          ; 358 drop
          pop rax
          ; 360 label
while_0x0000000000000030: 
          ; 360 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 360 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 360 push string
          mov rax, s_265
          push rax
          ; 360 push integer
          mov rax, 360
          push rax
          ; 360 push string
          mov rax, s_266
          push rax
          ; 360 push boolean
          mov rax, 1
          push rax
          ; 360 call
          call fn_list_peek_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 360 push integer
          mov rax, 0
          push rax
          ; 360 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 360 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000030_end
          ; 361 get pointer to buffer
          mov rax, buf__indent_stack
          push rax
          ; 361 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 361 push string
          mov rax, s_265
          push rax
          ; 361 push integer
          mov rax, 361
          push rax
          ; 361 push string
          mov rax, s_266
          push rax
          ; 361 push boolean
          mov rax, 1
          push rax
          ; 361 call
          call fn_list_pop_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 361 drop
          pop rax
          ; 362 duplicate
          pop rax
          push rax
          push rax
          ; 362 push integer
          mov rax, 4
          push rax
          ; 362 push string
          mov rax, s_265
          push rax
          ; 362 push integer
          mov rax, 362
          push rax
          ; 362 push string
          mov rax, s_266
          push rax
          ; 362 push boolean
          mov rax, 1
          push rax
          ; 362 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 363 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 363 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 363 push string
          mov rax, s_265
          push rax
          ; 363 push integer
          mov rax, 363
          push rax
          ; 363 push string
          mov rax, s_266
          push rax
          ; 363 push boolean
          mov rax, 1
          push rax
          ; 363 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 363 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 363 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 360 end of while-loop
          jmp while_0x0000000000000030
while_0x0000000000000030_end: 
          ; 365 duplicate
          pop rax
          push rax
          push rax
          ; 365 push integer
          mov rax, 99
          push rax
          ; 365 push string
          mov rax, s_265
          push rax
          ; 365 push integer
          mov rax, 365
          push rax
          ; 365 push string
          mov rax, s_266
          push rax
          ; 365 push boolean
          mov rax, 1
          push rax
          ; 365 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 365 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 365 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 365 push string
          mov rax, s_265
          push rax
          ; 365 push integer
          mov rax, 365
          push rax
          ; 365 push string
          mov rax, s_266
          push rax
          ; 365 push boolean
          mov rax, 1
          push rax
          ; 365 call
          call fn_create_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 365 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 365 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 368 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 368 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 369 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 369 push string
          mov rax, s_265
          push rax
          ; 369 push integer
          mov rax, 369
          push rax
          ; 369 push string
          mov rax, s_266
          push rax
          ; 369 push boolean
          mov rax, 1
          push rax
          ; 369 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 12 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 12 return
          ret
          ; 372 function definition
fn_tokenize: 
          push rbp
          mov rbp, rsp
          ; 374 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 374 push integer
          mov rax, 8
          push rax
          ; 374 push string
          mov rax, s_265
          push rax
          ; 374 push integer
          mov rax, 374
          push rax
          ; 374 push string
          mov rax, s_316
          push rax
          ; 374 push boolean
          mov rax, 1
          push rax
          ; 374 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 374 push string
          mov rax, s_265
          push rax
          ; 374 push integer
          mov rax, 374
          push rax
          ; 374 push string
          mov rax, s_316
          push rax
          ; 374 push boolean
          mov rax, 1
          push rax
          ; 374 call
          call fn__tokenize
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 373 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 373 return
          ret
          ; 12 create buffer
          ; 13 create buffer
          ; 14 create buffer
          ; 15 create buffer
          ; 16 create buffer
          ; 17 create buffer
          ; 18 create buffer
          ; 19 create buffer
          ; 20 create buffer
          ; 21 create buffer
          ; 24 function definition
fn__current_function_contains_arg: 
          push rbp
          mov rbp, rsp
          ; 26 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 26 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 26 push string
          mov rax, s_317
          push rax
          ; 26 push integer
          mov rax, 26
          push rax
          ; 26 push string
          mov rax, s_318
          push rax
          ; 26 push boolean
          mov rax, 1
          push rax
          ; 26 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 26 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 26 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000109
          ; 27 push boolean
          mov rax, 0
          push rax
          ; 27 jump
          jmp end_0x0000000000000109
          ; 27 label
if_0x0000000000000109: 
          ; 29 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 29 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 29 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 29 push string
          mov rax, s_317
          push rax
          ; 29 push integer
          mov rax, 29
          push rax
          ; 29 push string
          mov rax, s_318
          push rax
          ; 29 push boolean
          mov rax, 1
          push rax
          ; 29 call
          call fn_function_get_arg
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 29 push string
          mov rax, s_317
          push rax
          ; 29 push integer
          mov rax, 29
          push rax
          ; 29 push string
          mov rax, s_318
          push rax
          ; 29 push boolean
          mov rax, 1
          push rax
          ; 29 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 29 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 29 label
end_0x0000000000000109: 
          ; 25 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 25 return
          ret
          ; 32 function definition
fn__peek_next_token: 
          push rbp
          mov rbp, rsp
          ; 34 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 34 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 34 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 34 push integer
          mov rax, 8
          push rax
          ; 34 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 34 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 34 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 34 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000010a
          ; 35 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 35 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 35 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 35 push string
          mov rax, s_317
          push rax
          ; 35 push integer
          mov rax, 35
          push rax
          ; 35 push string
          mov rax, s_319
          push rax
          ; 35 push boolean
          mov rax, 1
          push rax
          ; 35 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 35 jump
          jmp end_0x000000000000010a
          ; 35 label
if_0x000000000000010a: 
          ; 37 push string
          mov rax, s_317
          push rax
          ; 37 push integer
          mov rax, 37
          push rax
          ; 37 push string
          mov rax, s_319
          push rax
          ; 37 push boolean
          mov rax, 1
          push rax
          ; 37 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 37 label
end_0x000000000000010a: 
          ; 33 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 33 return
          ret
          ; 40 function definition
fn__get_next_token: 
          push rbp
          mov rbp, rsp
          ; 42 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 42 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 42 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 42 push integer
          mov rax, 8
          push rax
          ; 42 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 42 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 42 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 42 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000010b
          ; 43 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 43 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 43 duplicate
          pop rax
          push rax
          push rax
          ; 43 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 43 push string
          mov rax, s_317
          push rax
          ; 43 push integer
          mov rax, 43
          push rax
          ; 43 push string
          mov rax, s_320
          push rax
          ; 43 push boolean
          mov rax, 1
          push rax
          ; 43 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 44 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 44 push integer
          mov rax, 1
          push rax
          ; 44 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 44 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 44 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 43 jump
          jmp end_0x000000000000010b
          ; 43 label
if_0x000000000000010b: 
          ; 46 push string
          mov rax, s_317
          push rax
          ; 46 push integer
          mov rax, 46
          push rax
          ; 46 push string
          mov rax, s_320
          push rax
          ; 46 push boolean
          mov rax, 1
          push rax
          ; 46 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 46 label
end_0x000000000000010b: 
          ; 41 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 41 return
          ret
          ; 49 function definition
fn__push_type: 
          push rbp
          mov rbp, rsp
          ; 51 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 51 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 51 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 51 push string
          mov rax, s_317
          push rax
          ; 51 push integer
          mov rax, 51
          push rax
          ; 51 push string
          mov rax, s_321
          push rax
          ; 51 push boolean
          mov rax, 1
          push rax
          ; 51 call
          call fn_list_append_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 51 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 51 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 50 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 50 return
          ret
          ; 54 function definition
fn__pop_type: 
          push rbp
          mov rbp, rsp
          ; 56 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 56 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 56 push integer
          mov rax, 8
          push rax
          ; 56 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 56 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 56 push integer
          mov rax, 0
          push rax
          ; 56 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 56 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000010c
          ; 57 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 57 push string
          mov rax, s_322
          push rax
          ; 57 push string
          mov rax, s_317
          push rax
          ; 57 push integer
          mov rax, 57
          push rax
          ; 57 push string
          mov rax, s_323
          push rax
          ; 57 push boolean
          mov rax, 1
          push rax
          ; 57 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 57 jump
          jmp end_0x000000000000010c
          ; 57 label
if_0x000000000000010c: 
          ; 57 label
end_0x000000000000010c: 
          ; 58 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 58 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 58 push string
          mov rax, s_317
          push rax
          ; 58 push integer
          mov rax, 58
          push rax
          ; 58 push string
          mov rax, s_323
          push rax
          ; 58 push boolean
          mov rax, 1
          push rax
          ; 58 call
          call fn_list_pop_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 55 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 55 return
          ret
          ; 61 function definition
fn__pop_args: 
          push rbp
          mov rbp, rsp
          ; 63 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 63 push integer
          mov rax, 8
          push rax
          ; 63 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 63 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 63 push integer
          mov rax, 1
          push rax
          ; 63 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 64 label
while_0x0000000000000031: 
          ; 64 duplicate
          pop rax
          push rax
          push rax
          ; 64 push integer
          mov rax, 0
          push rax
          ; 64 is greater or equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovge rax, rbx
          push rax
          ; 64 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000031_end
          ; 65 duplicate
          pop rax
          push rax
          push rax
          ; 65 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 65 push string
          mov rax, s_317
          push rax
          ; 65 push integer
          mov rax, 65
          push rax
          ; 65 push string
          mov rax, s_324
          push rax
          ; 65 push boolean
          mov rax, 1
          push rax
          ; 65 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 65 push integer
          mov rax, 8
          push rax
          ; 65 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 65 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 65 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 65 push string
          mov rax, s_317
          push rax
          ; 65 push integer
          mov rax, 65
          push rax
          ; 65 push string
          mov rax, s_324
          push rax
          ; 65 push boolean
          mov rax, 1
          push rax
          ; 65 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 65 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 65 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000010d
          ; 66 duplicate
          pop rax
          push rax
          push rax
          ; 66 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 66 push string
          mov rax, s_317
          push rax
          ; 66 push integer
          mov rax, 66
          push rax
          ; 66 push string
          mov rax, s_324
          push rax
          ; 66 push boolean
          mov rax, 1
          push rax
          ; 66 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 67 push string
          mov rax, s_325
          push rax
          ; 68 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 68 push integer
          mov rax, 8
          push rax
          ; 68 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 68 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 68 push string
          mov rax, s_317
          push rax
          ; 68 push integer
          mov rax, 68
          push rax
          ; 68 push string
          mov rax, s_324
          push rax
          ; 68 push boolean
          mov rax, 1
          push rax
          ; 68 call
          call fn_type_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 68 push string
          mov rax, s_317
          push rax
          ; 68 push integer
          mov rax, 68
          push rax
          ; 68 push string
          mov rax, s_324
          push rax
          ; 68 push boolean
          mov rax, 1
          push rax
          ; 68 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 69 push string
          mov rax, s_326
          push rax
          ; 69 push string
          mov rax, s_317
          push rax
          ; 69 push integer
          mov rax, 69
          push rax
          ; 69 push string
          mov rax, s_324
          push rax
          ; 69 push boolean
          mov rax, 1
          push rax
          ; 69 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 70 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 70 push integer
          mov rax, 0
          push rax
          ; 70 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 70 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 70 push string
          mov rax, s_317
          push rax
          ; 70 push integer
          mov rax, 70
          push rax
          ; 70 push string
          mov rax, s_324
          push rax
          ; 70 push boolean
          mov rax, 1
          push rax
          ; 70 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 71 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 71 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 71 push string
          mov rax, s_317
          push rax
          ; 71 push integer
          mov rax, 71
          push rax
          ; 71 push string
          mov rax, s_324
          push rax
          ; 71 push boolean
          mov rax, 1
          push rax
          ; 71 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 72 drop
          pop rax
          ; 66 jump
          jmp end_0x000000000000010d
          ; 66 label
if_0x000000000000010d: 
          ; 66 label
end_0x000000000000010d: 
          ; 73 push integer
          mov rax, 1
          push rax
          ; 73 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 64 end of while-loop
          jmp while_0x0000000000000031
while_0x0000000000000031_end: 
          ; 62 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 62 return
          ret
          ; 80 function definition
fn__create_buffer_operand: 
          push rbp
          mov rbp, rsp
          ; 82 push integer
          mov rax, 16
          push rax
          ; 82 push string
          mov rax, s_317
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_327
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 83 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 83 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 83 push integer
          mov rax, 0
          push rax
          ; 83 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 83 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 84 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 84 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 84 push integer
          mov rax, 8
          push rax
          ; 84 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 84 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 81 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 81 return
          ret
          ; 87 function definition
fn__parse: 
          push rbp
          mov rbp, rsp
          ; 95 label
while_0x0000000000000032: 
          ; 95 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 95 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 95 push string
          mov rax, s_317
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_328
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn__peek_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 95 push integer
          mov rax, 0
          push rax
          ; 95 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 95 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 95 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 95 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 95 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000032_end
          ; 96 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 96 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 96 push string
          mov rax, s_317
          push rax
          ; 96 push integer
          mov rax, 96
          push rax
          ; 96 push string
          mov rax, s_328
          push rax
          ; 96 push boolean
          mov rax, 1
          push rax
          ; 96 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 98 duplicate
          pop rax
          push rax
          push rax
          ; 98 push integer
          mov rax, 0
          push rax
          ; 98 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 98 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 98 push integer
          mov rax, 5
          push rax
          ; 98 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 98 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000010e
          ; 99 push integer
          mov rax, 29
          push rax
          ; 100 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 100 duplicate
          pop rax
          push rax
          push rax
          ; 100 push integer
          mov rax, 8
          push rax
          ; 100 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 100 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 101 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 101 push integer
          mov rax, 16
          push rax
          ; 101 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 101 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 102 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 102 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 102 push string
          mov rax, s_317
          push rax
          ; 102 push integer
          mov rax, 102
          push rax
          ; 102 push string
          mov rax, s_328
          push rax
          ; 102 push boolean
          mov rax, 1
          push rax
          ; 102 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 102 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 102 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 104 push integer
          mov rax, 1
          push rax
          ; 104 push string
          mov rax, s_317
          push rax
          ; 104 push integer
          mov rax, 104
          push rax
          ; 104 push string
          mov rax, s_328
          push rax
          ; 104 push boolean
          mov rax, 1
          push rax
          ; 104 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 99 jump
          jmp end_0x000000000000010e
          ; 99 label
if_0x000000000000010e: 
          ; 105 duplicate
          pop rax
          push rax
          push rax
          ; 105 push integer
          mov rax, 0
          push rax
          ; 105 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 105 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 105 push integer
          mov rax, 6
          push rax
          ; 105 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 105 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000010f
          ; 106 push integer
          mov rax, 30
          push rax
          ; 107 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 107 duplicate
          pop rax
          push rax
          push rax
          ; 107 push integer
          mov rax, 8
          push rax
          ; 107 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 107 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 108 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 108 push integer
          mov rax, 16
          push rax
          ; 108 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 108 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 109 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 push string
          mov rax, s_317
          push rax
          ; 109 push integer
          mov rax, 109
          push rax
          ; 109 push string
          mov rax, s_328
          push rax
          ; 109 push boolean
          mov rax, 1
          push rax
          ; 109 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 109 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 109 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 111 push integer
          mov rax, 2
          push rax
          ; 111 push string
          mov rax, s_317
          push rax
          ; 111 push integer
          mov rax, 111
          push rax
          ; 111 push string
          mov rax, s_328
          push rax
          ; 111 push boolean
          mov rax, 1
          push rax
          ; 111 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 105 jump
          jmp end_0x000000000000010e
          ; 105 label
elif_0x000000000000010f: 
          ; 112 duplicate
          pop rax
          push rax
          push rax
          ; 112 push integer
          mov rax, 0
          push rax
          ; 112 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 112 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 112 push integer
          mov rax, 11
          push rax
          ; 112 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 112 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000110
          ; 113 push integer
          mov rax, 31
          push rax
          ; 114 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 114 duplicate
          pop rax
          push rax
          push rax
          ; 114 push integer
          mov rax, 8
          push rax
          ; 114 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 114 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 115 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 115 push integer
          mov rax, 16
          push rax
          ; 115 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 115 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 116 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 116 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 116 push string
          mov rax, s_317
          push rax
          ; 116 push integer
          mov rax, 116
          push rax
          ; 116 push string
          mov rax, s_328
          push rax
          ; 116 push boolean
          mov rax, 1
          push rax
          ; 116 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 116 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 116 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 118 push integer
          mov rax, 3
          push rax
          ; 118 push string
          mov rax, s_317
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_328
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 112 jump
          jmp end_0x000000000000010e
          ; 112 label
elif_0x0000000000000110: 
          ; 119 duplicate
          pop rax
          push rax
          push rax
          ; 119 push integer
          mov rax, 0
          push rax
          ; 119 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 119 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 119 push integer
          mov rax, 13
          push rax
          ; 119 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 119 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000111
          ; 120 push integer
          mov rax, 32
          push rax
          ; 121 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 121 duplicate
          pop rax
          push rax
          push rax
          ; 121 push integer
          mov rax, 8
          push rax
          ; 121 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 121 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 122 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 122 push integer
          mov rax, 16
          push rax
          ; 122 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 122 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 123 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 123 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 123 push string
          mov rax, s_317
          push rax
          ; 123 push integer
          mov rax, 123
          push rax
          ; 123 push string
          mov rax, s_328
          push rax
          ; 123 push boolean
          mov rax, 1
          push rax
          ; 123 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 123 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 123 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 125 push integer
          mov rax, 4
          push rax
          ; 125 push string
          mov rax, s_317
          push rax
          ; 125 push integer
          mov rax, 125
          push rax
          ; 125 push string
          mov rax, s_328
          push rax
          ; 125 push boolean
          mov rax, 1
          push rax
          ; 125 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 119 jump
          jmp end_0x000000000000010e
          ; 119 label
elif_0x0000000000000111: 
          ; 126 duplicate
          pop rax
          push rax
          push rax
          ; 126 push integer
          mov rax, 0
          push rax
          ; 126 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 126 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 126 push integer
          mov rax, 1
          push rax
          ; 126 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 126 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000112
          ; 127 duplicate
          pop rax
          push rax
          push rax
          ; 127 push integer
          mov rax, 8
          push rax
          ; 127 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 127 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 127 push string
          mov rax, s_271
          push rax
          ; 127 push string
          mov rax, s_317
          push rax
          ; 127 push integer
          mov rax, 127
          push rax
          ; 127 push string
          mov rax, s_328
          push rax
          ; 127 push boolean
          mov rax, 1
          push rax
          ; 127 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 127 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000113
          ; 128 push integer
          mov rax, 1
          push rax
          ; 129 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 129 push integer
          mov rax, 16
          push rax
          ; 129 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 129 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 130 push string
          mov rax, s_317
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_328
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 131 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 131 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 131 push string
          mov rax, s_317
          push rax
          ; 131 push integer
          mov rax, 131
          push rax
          ; 131 push string
          mov rax, s_328
          push rax
          ; 131 push boolean
          mov rax, 1
          push rax
          ; 131 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 131 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 131 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 133 duplicate
          pop rax
          push rax
          push rax
          ; 133 push integer
          mov rax, 16
          push rax
          ; 133 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 133 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 133 push string
          mov rax, s_317
          push rax
          ; 133 push integer
          mov rax, 133
          push rax
          ; 133 push string
          mov rax, s_328
          push rax
          ; 133 push boolean
          mov rax, 1
          push rax
          ; 133 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 134 duplicate
          pop rax
          push rax
          push rax
          ; 134 push integer
          mov rax, 3
          push rax
          ; 134 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 134 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 134 push integer
          mov rax, 4
          push rax
          ; 134 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 134 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 134 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000114
          ; 135 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 135 push integer
          mov rax, 16
          push rax
          ; 135 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 135 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 136 push string
          mov rax, s_329
          push rax
          ; 136 push string
          mov rax, s_317
          push rax
          ; 136 push integer
          mov rax, 136
          push rax
          ; 136 push string
          mov rax, s_328
          push rax
          ; 136 push boolean
          mov rax, 1
          push rax
          ; 136 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 135 jump
          jmp end_0x0000000000000114
          ; 135 label
if_0x0000000000000114: 
          ; 135 label
end_0x0000000000000114: 
          ; 138 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 138 push integer
          mov rax, 16
          push rax
          ; 138 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 138 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 138 push string
          mov rax, s_317
          push rax
          ; 138 push integer
          mov rax, 138
          push rax
          ; 138 push string
          mov rax, s_328
          push rax
          ; 138 push boolean
          mov rax, 1
          push rax
          ; 138 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 139 duplicate
          pop rax
          push rax
          push rax
          ; 139 push integer
          mov rax, 3
          push rax
          ; 139 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 139 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 139 push integer
          mov rax, 4
          push rax
          ; 139 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 139 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 139 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000115
          ; 140 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 140 push integer
          mov rax, 16
          push rax
          ; 140 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 140 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 141 push string
          mov rax, s_329
          push rax
          ; 141 push string
          mov rax, s_317
          push rax
          ; 141 push integer
          mov rax, 141
          push rax
          ; 141 push string
          mov rax, s_328
          push rax
          ; 141 push boolean
          mov rax, 1
          push rax
          ; 141 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 142 push string
          mov rax, s_317
          push rax
          ; 142 push integer
          mov rax, 142
          push rax
          ; 142 push string
          mov rax, s_328
          push rax
          ; 142 push boolean
          mov rax, 1
          push rax
          ; 142 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 142 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 142 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 140 jump
          jmp end_0x0000000000000115
          ; 140 label
if_0x0000000000000115: 
          ; 140 label
end_0x0000000000000115: 
          ; 144 push integer
          mov rax, 4
          push rax
          ; 144 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 144 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 144 push integer
          mov rax, 4
          push rax
          ; 144 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 144 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 144 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000116
          ; 145 push integer
          mov rax, 4
          push rax
          ; 145 push string
          mov rax, s_317
          push rax
          ; 145 push integer
          mov rax, 145
          push rax
          ; 145 push string
          mov rax, s_328
          push rax
          ; 145 push boolean
          mov rax, 1
          push rax
          ; 145 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 145 jump
          jmp end_0x0000000000000116
          ; 145 label
if_0x0000000000000116: 
          ; 147 push integer
          mov rax, 3
          push rax
          ; 147 push string
          mov rax, s_317
          push rax
          ; 147 push integer
          mov rax, 147
          push rax
          ; 147 push string
          mov rax, s_328
          push rax
          ; 147 push boolean
          mov rax, 1
          push rax
          ; 147 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 147 label
end_0x0000000000000116: 
          ; 128 jump
          jmp end_0x0000000000000113
          ; 128 label
if_0x0000000000000113: 
          ; 148 duplicate
          pop rax
          push rax
          push rax
          ; 148 push integer
          mov rax, 8
          push rax
          ; 148 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 148 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 148 push string
          mov rax, s_142
          push rax
          ; 148 push string
          mov rax, s_317
          push rax
          ; 148 push integer
          mov rax, 148
          push rax
          ; 148 push string
          mov rax, s_328
          push rax
          ; 148 push boolean
          mov rax, 1
          push rax
          ; 148 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 148 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000117
          ; 149 push integer
          mov rax, 43
          push rax
          ; 150 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 150 push integer
          mov rax, 16
          push rax
          ; 150 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 150 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 151 push string
          mov rax, s_317
          push rax
          ; 151 push integer
          mov rax, 151
          push rax
          ; 151 push string
          mov rax, s_328
          push rax
          ; 151 push boolean
          mov rax, 1
          push rax
          ; 151 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 151 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 152 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 152 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 152 push string
          mov rax, s_317
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_328
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 152 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 154 duplicate
          pop rax
          push rax
          push rax
          ; 154 push integer
          mov rax, 16
          push rax
          ; 154 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 154 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 154 push string
          mov rax, s_317
          push rax
          ; 154 push integer
          mov rax, 154
          push rax
          ; 154 push string
          mov rax, s_328
          push rax
          ; 154 push boolean
          mov rax, 1
          push rax
          ; 154 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 154 push integer
          mov rax, 3
          push rax
          ; 154 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 154 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000118
          ; 155 duplicate
          pop rax
          push rax
          push rax
          ; 155 push integer
          mov rax, 16
          push rax
          ; 155 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 155 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 156 push string
          mov rax, s_330
          push rax
          ; 156 push string
          mov rax, s_317
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_328
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 155 jump
          jmp end_0x0000000000000118
          ; 155 label
if_0x0000000000000118: 
          ; 155 label
end_0x0000000000000118: 
          ; 158 duplicate
          pop rax
          push rax
          push rax
          ; 158 push integer
          mov rax, 16
          push rax
          ; 158 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 158 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 158 push string
          mov rax, s_317
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_328
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 159 duplicate
          pop rax
          push rax
          push rax
          ; 159 duplicate
          pop rax
          push rax
          push rax
          ; 159 push integer
          mov rax, 3
          push rax
          ; 159 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 159 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 159 push integer
          mov rax, 4
          push rax
          ; 159 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 159 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 159 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000119
          ; 160 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 160 push integer
          mov rax, 16
          push rax
          ; 160 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 160 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 161 push string
          mov rax, s_331
          push rax
          ; 161 push string
          mov rax, s_317
          push rax
          ; 161 push integer
          mov rax, 161
          push rax
          ; 161 push string
          mov rax, s_328
          push rax
          ; 161 push boolean
          mov rax, 1
          push rax
          ; 161 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 160 jump
          jmp end_0x0000000000000119
          ; 160 label
if_0x0000000000000119: 
          ; 160 label
end_0x0000000000000119: 
          ; 163 push string
          mov rax, s_317
          push rax
          ; 163 push integer
          mov rax, 163
          push rax
          ; 163 push string
          mov rax, s_328
          push rax
          ; 163 push boolean
          mov rax, 1
          push rax
          ; 163 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 148 jump
          jmp end_0x0000000000000113
          ; 148 label
elif_0x0000000000000117: 
          ; 164 duplicate
          pop rax
          push rax
          push rax
          ; 164 push integer
          mov rax, 8
          push rax
          ; 164 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 164 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 164 push string
          mov rax, s_272
          push rax
          ; 164 push string
          mov rax, s_317
          push rax
          ; 164 push integer
          mov rax, 164
          push rax
          ; 164 push string
          mov rax, s_328
          push rax
          ; 164 push boolean
          mov rax, 1
          push rax
          ; 164 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 164 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000011a
          ; 165 push integer
          mov rax, 26
          push rax
          ; 166 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 166 push integer
          mov rax, 16
          push rax
          ; 166 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 166 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 167 push string
          mov rax, s_317
          push rax
          ; 167 push integer
          mov rax, 167
          push rax
          ; 167 push string
          mov rax, s_328
          push rax
          ; 167 push boolean
          mov rax, 1
          push rax
          ; 167 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 167 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 168 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 168 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 168 push string
          mov rax, s_317
          push rax
          ; 168 push integer
          mov rax, 168
          push rax
          ; 168 push string
          mov rax, s_328
          push rax
          ; 168 push boolean
          mov rax, 1
          push rax
          ; 168 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 168 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 168 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 170 duplicate
          pop rax
          push rax
          push rax
          ; 170 push integer
          mov rax, 16
          push rax
          ; 170 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 170 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 170 push string
          mov rax, s_317
          push rax
          ; 170 push integer
          mov rax, 170
          push rax
          ; 170 push string
          mov rax, s_328
          push rax
          ; 170 push boolean
          mov rax, 1
          push rax
          ; 170 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 170 push integer
          mov rax, 3
          push rax
          ; 170 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 171 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 171 push integer
          mov rax, 16
          push rax
          ; 171 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 171 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 171 push string
          mov rax, s_317
          push rax
          ; 171 push integer
          mov rax, 171
          push rax
          ; 171 push string
          mov rax, s_328
          push rax
          ; 171 push boolean
          mov rax, 1
          push rax
          ; 171 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 171 push integer
          mov rax, 3
          push rax
          ; 171 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 171 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 171 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000011b
          ; 172 duplicate
          pop rax
          push rax
          push rax
          ; 172 push integer
          mov rax, 16
          push rax
          ; 172 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 172 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 173 push string
          mov rax, s_332
          push rax
          ; 173 push string
          mov rax, s_317
          push rax
          ; 173 push integer
          mov rax, 173
          push rax
          ; 173 push string
          mov rax, s_328
          push rax
          ; 173 push boolean
          mov rax, 1
          push rax
          ; 173 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 172 jump
          jmp end_0x000000000000011b
          ; 172 label
if_0x000000000000011b: 
          ; 172 label
end_0x000000000000011b: 
          ; 175 push integer
          mov rax, 3
          push rax
          ; 175 push string
          mov rax, s_317
          push rax
          ; 175 push integer
          mov rax, 175
          push rax
          ; 175 push string
          mov rax, s_328
          push rax
          ; 175 push boolean
          mov rax, 1
          push rax
          ; 175 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 164 jump
          jmp end_0x0000000000000113
          ; 164 label
elif_0x000000000000011a: 
          ; 176 duplicate
          pop rax
          push rax
          push rax
          ; 176 push integer
          mov rax, 8
          push rax
          ; 176 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 176 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 176 push string
          mov rax, s_273
          push rax
          ; 176 push string
          mov rax, s_317
          push rax
          ; 176 push integer
          mov rax, 176
          push rax
          ; 176 push string
          mov rax, s_328
          push rax
          ; 176 push boolean
          mov rax, 1
          push rax
          ; 176 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 176 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000011c
          ; 177 push integer
          mov rax, 11
          push rax
          ; 178 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 178 push integer
          mov rax, 16
          push rax
          ; 178 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 178 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 179 push string
          mov rax, s_317
          push rax
          ; 179 push integer
          mov rax, 179
          push rax
          ; 179 push string
          mov rax, s_328
          push rax
          ; 179 push boolean
          mov rax, 1
          push rax
          ; 179 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 179 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 180 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 180 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 180 push string
          mov rax, s_317
          push rax
          ; 180 push integer
          mov rax, 180
          push rax
          ; 180 push string
          mov rax, s_328
          push rax
          ; 180 push boolean
          mov rax, 1
          push rax
          ; 180 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 180 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 180 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 182 duplicate
          pop rax
          push rax
          push rax
          ; 182 push integer
          mov rax, 16
          push rax
          ; 182 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 182 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 push string
          mov rax, s_317
          push rax
          ; 182 push integer
          mov rax, 182
          push rax
          ; 182 push string
          mov rax, s_328
          push rax
          ; 182 push boolean
          mov rax, 1
          push rax
          ; 182 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 182 push integer
          mov rax, 3
          push rax
          ; 182 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 183 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 183 push integer
          mov rax, 16
          push rax
          ; 183 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 183 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 183 push string
          mov rax, s_317
          push rax
          ; 183 push integer
          mov rax, 183
          push rax
          ; 183 push string
          mov rax, s_328
          push rax
          ; 183 push boolean
          mov rax, 1
          push rax
          ; 183 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 183 push integer
          mov rax, 3
          push rax
          ; 183 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 183 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 183 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000011d
          ; 184 duplicate
          pop rax
          push rax
          push rax
          ; 184 push integer
          mov rax, 16
          push rax
          ; 184 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 184 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 185 push string
          mov rax, s_333
          push rax
          ; 185 push string
          mov rax, s_317
          push rax
          ; 185 push integer
          mov rax, 185
          push rax
          ; 185 push string
          mov rax, s_328
          push rax
          ; 185 push boolean
          mov rax, 1
          push rax
          ; 185 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 184 jump
          jmp end_0x000000000000011d
          ; 184 label
if_0x000000000000011d: 
          ; 184 label
end_0x000000000000011d: 
          ; 187 push integer
          mov rax, 3
          push rax
          ; 187 push string
          mov rax, s_317
          push rax
          ; 187 push integer
          mov rax, 187
          push rax
          ; 187 push string
          mov rax, s_328
          push rax
          ; 187 push boolean
          mov rax, 1
          push rax
          ; 187 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 176 jump
          jmp end_0x0000000000000113
          ; 176 label
elif_0x000000000000011c: 
          ; 188 duplicate
          pop rax
          push rax
          push rax
          ; 188 push integer
          mov rax, 8
          push rax
          ; 188 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 188 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 188 push string
          mov rax, s_274
          push rax
          ; 188 push string
          mov rax, s_317
          push rax
          ; 188 push integer
          mov rax, 188
          push rax
          ; 188 push string
          mov rax, s_328
          push rax
          ; 188 push boolean
          mov rax, 1
          push rax
          ; 188 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 188 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000011e
          ; 189 push integer
          mov rax, 27
          push rax
          ; 190 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 190 push integer
          mov rax, 16
          push rax
          ; 190 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 190 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 191 push string
          mov rax, s_317
          push rax
          ; 191 push integer
          mov rax, 191
          push rax
          ; 191 push string
          mov rax, s_328
          push rax
          ; 191 push boolean
          mov rax, 1
          push rax
          ; 191 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 191 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 192 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 192 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 192 push string
          mov rax, s_317
          push rax
          ; 192 push integer
          mov rax, 192
          push rax
          ; 192 push string
          mov rax, s_328
          push rax
          ; 192 push boolean
          mov rax, 1
          push rax
          ; 192 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 192 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 192 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 194 duplicate
          pop rax
          push rax
          push rax
          ; 194 push integer
          mov rax, 16
          push rax
          ; 194 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 194 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 194 push string
          mov rax, s_317
          push rax
          ; 194 push integer
          mov rax, 194
          push rax
          ; 194 push string
          mov rax, s_328
          push rax
          ; 194 push boolean
          mov rax, 1
          push rax
          ; 194 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 194 push integer
          mov rax, 3
          push rax
          ; 194 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 195 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 195 push integer
          mov rax, 16
          push rax
          ; 195 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 195 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 195 push string
          mov rax, s_317
          push rax
          ; 195 push integer
          mov rax, 195
          push rax
          ; 195 push string
          mov rax, s_328
          push rax
          ; 195 push boolean
          mov rax, 1
          push rax
          ; 195 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 195 push integer
          mov rax, 3
          push rax
          ; 195 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 195 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 195 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000011f
          ; 196 duplicate
          pop rax
          push rax
          push rax
          ; 196 push integer
          mov rax, 16
          push rax
          ; 196 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 196 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 197 push string
          mov rax, s_334
          push rax
          ; 197 push string
          mov rax, s_317
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_328
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 196 jump
          jmp end_0x000000000000011f
          ; 196 label
if_0x000000000000011f: 
          ; 196 label
end_0x000000000000011f: 
          ; 199 push integer
          mov rax, 3
          push rax
          ; 199 push string
          mov rax, s_317
          push rax
          ; 199 push integer
          mov rax, 199
          push rax
          ; 199 push string
          mov rax, s_328
          push rax
          ; 199 push boolean
          mov rax, 1
          push rax
          ; 199 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 188 jump
          jmp end_0x0000000000000113
          ; 188 label
elif_0x000000000000011e: 
          ; 200 duplicate
          pop rax
          push rax
          push rax
          ; 200 push integer
          mov rax, 8
          push rax
          ; 200 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 200 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 200 push string
          mov rax, s_275
          push rax
          ; 200 push string
          mov rax, s_317
          push rax
          ; 200 push integer
          mov rax, 200
          push rax
          ; 200 push string
          mov rax, s_328
          push rax
          ; 200 push boolean
          mov rax, 1
          push rax
          ; 200 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 200 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000120
          ; 201 push integer
          mov rax, 2
          push rax
          ; 202 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 202 push integer
          mov rax, 16
          push rax
          ; 202 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 202 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 203 push string
          mov rax, s_317
          push rax
          ; 203 push integer
          mov rax, 203
          push rax
          ; 203 push string
          mov rax, s_328
          push rax
          ; 203 push boolean
          mov rax, 1
          push rax
          ; 203 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 203 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 204 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 204 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 204 push string
          mov rax, s_317
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_328
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 204 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 204 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 206 duplicate
          pop rax
          push rax
          push rax
          ; 206 push integer
          mov rax, 16
          push rax
          ; 206 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 206 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 206 push string
          mov rax, s_317
          push rax
          ; 206 push integer
          mov rax, 206
          push rax
          ; 206 push string
          mov rax, s_328
          push rax
          ; 206 push boolean
          mov rax, 1
          push rax
          ; 206 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 207 duplicate
          pop rax
          push rax
          push rax
          ; 207 push integer
          mov rax, 3
          push rax
          ; 207 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 207 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 207 push integer
          mov rax, 1
          push rax
          ; 207 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 207 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 207 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000121
          ; 208 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 208 push integer
          mov rax, 16
          push rax
          ; 208 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 208 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 209 push string
          mov rax, s_335
          push rax
          ; 209 push string
          mov rax, s_317
          push rax
          ; 209 push integer
          mov rax, 209
          push rax
          ; 209 push string
          mov rax, s_328
          push rax
          ; 209 push boolean
          mov rax, 1
          push rax
          ; 209 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 208 jump
          jmp end_0x0000000000000121
          ; 208 label
if_0x0000000000000121: 
          ; 208 label
end_0x0000000000000121: 
          ; 210 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 210 push integer
          mov rax, 16
          push rax
          ; 210 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 210 push string
          mov rax, s_317
          push rax
          ; 210 push integer
          mov rax, 210
          push rax
          ; 210 push string
          mov rax, s_328
          push rax
          ; 210 push boolean
          mov rax, 1
          push rax
          ; 210 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 210 duplicate
          pop rax
          push rax
          push rax
          ; 210 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 210 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 210 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000122
          ; 211 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 211 push integer
          mov rax, 16
          push rax
          ; 211 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 211 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 212 push string
          mov rax, s_336
          push rax
          ; 212 push string
          mov rax, s_317
          push rax
          ; 212 push integer
          mov rax, 212
          push rax
          ; 212 push string
          mov rax, s_328
          push rax
          ; 212 push boolean
          mov rax, 1
          push rax
          ; 212 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 211 jump
          jmp end_0x0000000000000122
          ; 211 label
if_0x0000000000000122: 
          ; 211 label
end_0x0000000000000122: 
          ; 214 push string
          mov rax, s_317
          push rax
          ; 214 push integer
          mov rax, 214
          push rax
          ; 214 push string
          mov rax, s_328
          push rax
          ; 214 push boolean
          mov rax, 1
          push rax
          ; 214 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 200 jump
          jmp end_0x0000000000000113
          ; 200 label
elif_0x0000000000000120: 
          ; 215 duplicate
          pop rax
          push rax
          push rax
          ; 215 push integer
          mov rax, 8
          push rax
          ; 215 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 215 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 215 push string
          mov rax, s_276
          push rax
          ; 215 push string
          mov rax, s_317
          push rax
          ; 215 push integer
          mov rax, 215
          push rax
          ; 215 push string
          mov rax, s_328
          push rax
          ; 215 push boolean
          mov rax, 1
          push rax
          ; 215 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 215 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000123
          ; 216 push integer
          mov rax, 3
          push rax
          ; 217 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 217 push integer
          mov rax, 16
          push rax
          ; 217 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 217 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 218 push string
          mov rax, s_317
          push rax
          ; 218 push integer
          mov rax, 218
          push rax
          ; 218 push string
          mov rax, s_328
          push rax
          ; 218 push boolean
          mov rax, 1
          push rax
          ; 218 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 218 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 219 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 219 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 219 push string
          mov rax, s_317
          push rax
          ; 219 push integer
          mov rax, 219
          push rax
          ; 219 push string
          mov rax, s_328
          push rax
          ; 219 push boolean
          mov rax, 1
          push rax
          ; 219 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 219 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 219 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 221 duplicate
          pop rax
          push rax
          push rax
          ; 221 push integer
          mov rax, 16
          push rax
          ; 221 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 221 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 221 push string
          mov rax, s_317
          push rax
          ; 221 push integer
          mov rax, 221
          push rax
          ; 221 push string
          mov rax, s_328
          push rax
          ; 221 push boolean
          mov rax, 1
          push rax
          ; 221 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 222 duplicate
          pop rax
          push rax
          push rax
          ; 222 push integer
          mov rax, 3
          push rax
          ; 222 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 222 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 222 push integer
          mov rax, 1
          push rax
          ; 222 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 222 bitwise and
          pop rax
          pop rbx
          and rbx, rax
          push rbx
          ; 222 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000124
          ; 223 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 223 push integer
          mov rax, 16
          push rax
          ; 223 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 223 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 224 push string
          mov rax, s_337
          push rax
          ; 224 push string
          mov rax, s_317
          push rax
          ; 224 push integer
          mov rax, 224
          push rax
          ; 224 push string
          mov rax, s_328
          push rax
          ; 224 push boolean
          mov rax, 1
          push rax
          ; 224 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 223 jump
          jmp end_0x0000000000000124
          ; 223 label
if_0x0000000000000124: 
          ; 223 label
end_0x0000000000000124: 
          ; 225 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 225 push integer
          mov rax, 16
          push rax
          ; 225 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 225 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 225 push string
          mov rax, s_317
          push rax
          ; 225 push integer
          mov rax, 225
          push rax
          ; 225 push string
          mov rax, s_328
          push rax
          ; 225 push boolean
          mov rax, 1
          push rax
          ; 225 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 225 duplicate
          pop rax
          push rax
          push rax
          ; 225 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 225 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 225 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000125
          ; 226 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 226 push integer
          mov rax, 16
          push rax
          ; 226 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 226 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 227 push string
          mov rax, s_338
          push rax
          ; 227 push string
          mov rax, s_317
          push rax
          ; 227 push integer
          mov rax, 227
          push rax
          ; 227 push string
          mov rax, s_328
          push rax
          ; 227 push boolean
          mov rax, 1
          push rax
          ; 227 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 226 jump
          jmp end_0x0000000000000125
          ; 226 label
if_0x0000000000000125: 
          ; 226 label
end_0x0000000000000125: 
          ; 229 push string
          mov rax, s_317
          push rax
          ; 229 push integer
          mov rax, 229
          push rax
          ; 229 push string
          mov rax, s_328
          push rax
          ; 229 push boolean
          mov rax, 1
          push rax
          ; 229 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 215 jump
          jmp end_0x0000000000000113
          ; 215 label
elif_0x0000000000000123: 
          ; 230 duplicate
          pop rax
          push rax
          push rax
          ; 230 push integer
          mov rax, 8
          push rax
          ; 230 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 230 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 230 push string
          mov rax, s_278
          push rax
          ; 230 push string
          mov rax, s_317
          push rax
          ; 230 push integer
          mov rax, 230
          push rax
          ; 230 push string
          mov rax, s_328
          push rax
          ; 230 push boolean
          mov rax, 1
          push rax
          ; 230 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 230 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000126
          ; 231 push integer
          mov rax, 42
          push rax
          ; 232 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 232 push integer
          mov rax, 16
          push rax
          ; 232 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 232 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 233 push string
          mov rax, s_317
          push rax
          ; 233 push integer
          mov rax, 233
          push rax
          ; 233 push string
          mov rax, s_328
          push rax
          ; 233 push boolean
          mov rax, 1
          push rax
          ; 233 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 233 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 234 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 234 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 234 push string
          mov rax, s_317
          push rax
          ; 234 push integer
          mov rax, 234
          push rax
          ; 234 push string
          mov rax, s_328
          push rax
          ; 234 push boolean
          mov rax, 1
          push rax
          ; 234 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 234 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 234 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 236 duplicate
          pop rax
          push rax
          push rax
          ; 236 push integer
          mov rax, 16
          push rax
          ; 236 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 236 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 236 push string
          mov rax, s_317
          push rax
          ; 236 push integer
          mov rax, 236
          push rax
          ; 236 push string
          mov rax, s_328
          push rax
          ; 236 push boolean
          mov rax, 1
          push rax
          ; 236 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 236 push integer
          mov rax, 3
          push rax
          ; 236 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 237 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 237 push integer
          mov rax, 16
          push rax
          ; 237 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 237 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 237 push string
          mov rax, s_317
          push rax
          ; 237 push integer
          mov rax, 237
          push rax
          ; 237 push string
          mov rax, s_328
          push rax
          ; 237 push boolean
          mov rax, 1
          push rax
          ; 237 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 237 push integer
          mov rax, 3
          push rax
          ; 237 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 237 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 237 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000127
          ; 238 duplicate
          pop rax
          push rax
          push rax
          ; 238 push integer
          mov rax, 16
          push rax
          ; 238 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 238 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 239 push string
          mov rax, s_339
          push rax
          ; 239 push string
          mov rax, s_317
          push rax
          ; 239 push integer
          mov rax, 239
          push rax
          ; 239 push string
          mov rax, s_328
          push rax
          ; 239 push boolean
          mov rax, 1
          push rax
          ; 239 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 238 jump
          jmp end_0x0000000000000127
          ; 238 label
if_0x0000000000000127: 
          ; 238 label
end_0x0000000000000127: 
          ; 241 push integer
          mov rax, 3
          push rax
          ; 241 push string
          mov rax, s_317
          push rax
          ; 241 push integer
          mov rax, 241
          push rax
          ; 241 push string
          mov rax, s_328
          push rax
          ; 241 push boolean
          mov rax, 1
          push rax
          ; 241 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 230 jump
          jmp end_0x0000000000000113
          ; 230 label
elif_0x0000000000000126: 
          ; 242 duplicate
          pop rax
          push rax
          push rax
          ; 242 push integer
          mov rax, 8
          push rax
          ; 242 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 242 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 242 push string
          mov rax, s_277
          push rax
          ; 242 push string
          mov rax, s_317
          push rax
          ; 242 push integer
          mov rax, 242
          push rax
          ; 242 push string
          mov rax, s_328
          push rax
          ; 242 push boolean
          mov rax, 1
          push rax
          ; 242 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 242 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000128
          ; 243 push integer
          mov rax, 41
          push rax
          ; 244 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 244 push integer
          mov rax, 16
          push rax
          ; 244 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 244 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 245 push string
          mov rax, s_317
          push rax
          ; 245 push integer
          mov rax, 245
          push rax
          ; 245 push string
          mov rax, s_328
          push rax
          ; 245 push boolean
          mov rax, 1
          push rax
          ; 245 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 245 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 246 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 246 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 246 push string
          mov rax, s_317
          push rax
          ; 246 push integer
          mov rax, 246
          push rax
          ; 246 push string
          mov rax, s_328
          push rax
          ; 246 push boolean
          mov rax, 1
          push rax
          ; 246 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 246 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 246 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 248 duplicate
          pop rax
          push rax
          push rax
          ; 248 push integer
          mov rax, 16
          push rax
          ; 248 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 248 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 248 push string
          mov rax, s_317
          push rax
          ; 248 push integer
          mov rax, 248
          push rax
          ; 248 push string
          mov rax, s_328
          push rax
          ; 248 push boolean
          mov rax, 1
          push rax
          ; 248 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 248 push integer
          mov rax, 3
          push rax
          ; 248 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 249 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 249 push integer
          mov rax, 16
          push rax
          ; 249 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 249 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 249 push string
          mov rax, s_317
          push rax
          ; 249 push integer
          mov rax, 249
          push rax
          ; 249 push string
          mov rax, s_328
          push rax
          ; 249 push boolean
          mov rax, 1
          push rax
          ; 249 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 249 push integer
          mov rax, 3
          push rax
          ; 249 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 249 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 249 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000129
          ; 250 duplicate
          pop rax
          push rax
          push rax
          ; 250 push integer
          mov rax, 16
          push rax
          ; 250 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 250 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 251 push string
          mov rax, s_339
          push rax
          ; 251 push string
          mov rax, s_317
          push rax
          ; 251 push integer
          mov rax, 251
          push rax
          ; 251 push string
          mov rax, s_328
          push rax
          ; 251 push boolean
          mov rax, 1
          push rax
          ; 251 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 250 jump
          jmp end_0x0000000000000129
          ; 250 label
if_0x0000000000000129: 
          ; 250 label
end_0x0000000000000129: 
          ; 253 push integer
          mov rax, 3
          push rax
          ; 253 push string
          mov rax, s_317
          push rax
          ; 253 push integer
          mov rax, 253
          push rax
          ; 253 push string
          mov rax, s_328
          push rax
          ; 253 push boolean
          mov rax, 1
          push rax
          ; 253 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 242 jump
          jmp end_0x0000000000000113
          ; 242 label
elif_0x0000000000000128: 
          ; 255 push string
          mov rax, s_340
          push rax
          ; 256 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 256 push integer
          mov rax, 8
          push rax
          ; 256 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 256 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 256 push string
          mov rax, s_317
          push rax
          ; 256 push integer
          mov rax, 256
          push rax
          ; 256 push string
          mov rax, s_328
          push rax
          ; 256 push boolean
          mov rax, 1
          push rax
          ; 256 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 256 push string
          mov rax, s_7
          push rax
          ; 256 push string
          mov rax, s_317
          push rax
          ; 256 push integer
          mov rax, 256
          push rax
          ; 256 push string
          mov rax, s_328
          push rax
          ; 256 push boolean
          mov rax, 1
          push rax
          ; 256 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 257 push string
          mov rax, s_317
          push rax
          ; 257 push integer
          mov rax, 257
          push rax
          ; 257 push string
          mov rax, s_328
          push rax
          ; 257 push boolean
          mov rax, 1
          push rax
          ; 257 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 255 label
end_0x0000000000000113: 
          ; 126 jump
          jmp end_0x000000000000010e
          ; 126 label
elif_0x0000000000000112: 
          ; 258 duplicate
          pop rax
          push rax
          push rax
          ; 258 push integer
          mov rax, 0
          push rax
          ; 258 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 258 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 258 push integer
          mov rax, 9
          push rax
          ; 258 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 258 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000012a
          ; 259 duplicate
          pop rax
          push rax
          push rax
          ; 259 push integer
          mov rax, 8
          push rax
          ; 259 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 259 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 259 push string
          mov rax, s_285
          push rax
          ; 259 push string
          mov rax, s_317
          push rax
          ; 259 push integer
          mov rax, 259
          push rax
          ; 259 push string
          mov rax, s_328
          push rax
          ; 259 push boolean
          mov rax, 1
          push rax
          ; 259 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 259 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000012b
          ; 260 push integer
          mov rax, 18
          push rax
          ; 261 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 261 push integer
          mov rax, 16
          push rax
          ; 261 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 261 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 262 push string
          mov rax, s_317
          push rax
          ; 262 push integer
          mov rax, 262
          push rax
          ; 262 push string
          mov rax, s_328
          push rax
          ; 262 push boolean
          mov rax, 1
          push rax
          ; 262 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 262 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 263 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 263 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 263 push string
          mov rax, s_317
          push rax
          ; 263 push integer
          mov rax, 263
          push rax
          ; 263 push string
          mov rax, s_328
          push rax
          ; 263 push boolean
          mov rax, 1
          push rax
          ; 263 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 263 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 263 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 260 jump
          jmp end_0x000000000000012b
          ; 260 label
if_0x000000000000012b: 
          ; 264 duplicate
          pop rax
          push rax
          push rax
          ; 264 push integer
          mov rax, 8
          push rax
          ; 264 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 264 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 264 push string
          mov rax, s_282
          push rax
          ; 264 push string
          mov rax, s_317
          push rax
          ; 264 push integer
          mov rax, 264
          push rax
          ; 264 push string
          mov rax, s_328
          push rax
          ; 264 push boolean
          mov rax, 1
          push rax
          ; 264 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 264 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000012c
          ; 265 push integer
          mov rax, 23
          push rax
          ; 266 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 266 push integer
          mov rax, 16
          push rax
          ; 266 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 266 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 267 push string
          mov rax, s_317
          push rax
          ; 267 push integer
          mov rax, 267
          push rax
          ; 267 push string
          mov rax, s_328
          push rax
          ; 267 push boolean
          mov rax, 1
          push rax
          ; 267 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 267 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 268 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 268 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 268 push string
          mov rax, s_317
          push rax
          ; 268 push integer
          mov rax, 268
          push rax
          ; 268 push string
          mov rax, s_328
          push rax
          ; 268 push boolean
          mov rax, 1
          push rax
          ; 268 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 268 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 268 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 264 jump
          jmp end_0x000000000000012b
          ; 264 label
elif_0x000000000000012c: 
          ; 269 duplicate
          pop rax
          push rax
          push rax
          ; 269 push integer
          mov rax, 8
          push rax
          ; 269 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 269 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 269 push string
          mov rax, s_283
          push rax
          ; 269 push string
          mov rax, s_317
          push rax
          ; 269 push integer
          mov rax, 269
          push rax
          ; 269 push string
          mov rax, s_328
          push rax
          ; 269 push boolean
          mov rax, 1
          push rax
          ; 269 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 269 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000012d
          ; 270 push integer
          mov rax, 20
          push rax
          ; 271 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 271 push integer
          mov rax, 16
          push rax
          ; 271 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 271 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 272 push string
          mov rax, s_317
          push rax
          ; 272 push integer
          mov rax, 272
          push rax
          ; 272 push string
          mov rax, s_328
          push rax
          ; 272 push boolean
          mov rax, 1
          push rax
          ; 272 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 272 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 273 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 273 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 273 push string
          mov rax, s_317
          push rax
          ; 273 push integer
          mov rax, 273
          push rax
          ; 273 push string
          mov rax, s_328
          push rax
          ; 273 push boolean
          mov rax, 1
          push rax
          ; 273 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 273 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 273 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 269 jump
          jmp end_0x000000000000012b
          ; 269 label
elif_0x000000000000012d: 
          ; 274 duplicate
          pop rax
          push rax
          push rax
          ; 274 push integer
          mov rax, 8
          push rax
          ; 274 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 274 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 274 push string
          mov rax, s_284
          push rax
          ; 274 push string
          mov rax, s_317
          push rax
          ; 274 push integer
          mov rax, 274
          push rax
          ; 274 push string
          mov rax, s_328
          push rax
          ; 274 push boolean
          mov rax, 1
          push rax
          ; 274 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 274 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000012e
          ; 275 push integer
          mov rax, 22
          push rax
          ; 276 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 276 push integer
          mov rax, 16
          push rax
          ; 276 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 276 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 277 push string
          mov rax, s_317
          push rax
          ; 277 push integer
          mov rax, 277
          push rax
          ; 277 push string
          mov rax, s_328
          push rax
          ; 277 push boolean
          mov rax, 1
          push rax
          ; 277 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 277 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 278 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 278 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 278 push string
          mov rax, s_317
          push rax
          ; 278 push integer
          mov rax, 278
          push rax
          ; 278 push string
          mov rax, s_328
          push rax
          ; 278 push boolean
          mov rax, 1
          push rax
          ; 278 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 278 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 278 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 274 jump
          jmp end_0x000000000000012b
          ; 274 label
elif_0x000000000000012e: 
          ; 279 duplicate
          pop rax
          push rax
          push rax
          ; 279 push integer
          mov rax, 8
          push rax
          ; 279 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 279 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 279 push string
          mov rax, s_287
          push rax
          ; 279 push string
          mov rax, s_317
          push rax
          ; 279 push integer
          mov rax, 279
          push rax
          ; 279 push string
          mov rax, s_328
          push rax
          ; 279 push boolean
          mov rax, 1
          push rax
          ; 279 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 279 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000012f
          ; 280 push integer
          mov rax, 19
          push rax
          ; 281 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 281 push integer
          mov rax, 16
          push rax
          ; 281 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 281 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 282 push string
          mov rax, s_317
          push rax
          ; 282 push integer
          mov rax, 282
          push rax
          ; 282 push string
          mov rax, s_328
          push rax
          ; 282 push boolean
          mov rax, 1
          push rax
          ; 282 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 282 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 283 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 283 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 283 push string
          mov rax, s_317
          push rax
          ; 283 push integer
          mov rax, 283
          push rax
          ; 283 push string
          mov rax, s_328
          push rax
          ; 283 push boolean
          mov rax, 1
          push rax
          ; 283 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 283 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 283 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 279 jump
          jmp end_0x000000000000012b
          ; 279 label
elif_0x000000000000012f: 
          ; 284 duplicate
          pop rax
          push rax
          push rax
          ; 284 push integer
          mov rax, 8
          push rax
          ; 284 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 284 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 284 push string
          mov rax, s_286
          push rax
          ; 284 push string
          mov rax, s_317
          push rax
          ; 284 push integer
          mov rax, 284
          push rax
          ; 284 push string
          mov rax, s_328
          push rax
          ; 284 push boolean
          mov rax, 1
          push rax
          ; 284 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 284 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000130
          ; 285 push integer
          mov rax, 21
          push rax
          ; 286 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 286 push integer
          mov rax, 16
          push rax
          ; 286 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 286 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 287 push string
          mov rax, s_317
          push rax
          ; 287 push integer
          mov rax, 287
          push rax
          ; 287 push string
          mov rax, s_328
          push rax
          ; 287 push boolean
          mov rax, 1
          push rax
          ; 287 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 287 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 288 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 288 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 288 push string
          mov rax, s_317
          push rax
          ; 288 push integer
          mov rax, 288
          push rax
          ; 288 push string
          mov rax, s_328
          push rax
          ; 288 push boolean
          mov rax, 1
          push rax
          ; 288 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 288 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 288 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 284 jump
          jmp end_0x000000000000012b
          ; 284 label
elif_0x0000000000000130: 
          ; 290 push string
          mov rax, s_341
          push rax
          ; 291 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 291 push integer
          mov rax, 8
          push rax
          ; 291 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 291 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 291 push string
          mov rax, s_317
          push rax
          ; 291 push integer
          mov rax, 291
          push rax
          ; 291 push string
          mov rax, s_328
          push rax
          ; 291 push boolean
          mov rax, 1
          push rax
          ; 291 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 291 push string
          mov rax, s_7
          push rax
          ; 291 push string
          mov rax, s_317
          push rax
          ; 291 push integer
          mov rax, 291
          push rax
          ; 291 push string
          mov rax, s_328
          push rax
          ; 291 push boolean
          mov rax, 1
          push rax
          ; 291 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 292 push string
          mov rax, s_317
          push rax
          ; 292 push integer
          mov rax, 292
          push rax
          ; 292 push string
          mov rax, s_328
          push rax
          ; 292 push boolean
          mov rax, 1
          push rax
          ; 292 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 290 label
end_0x000000000000012b: 
          ; 294 duplicate
          pop rax
          push rax
          push rax
          ; 294 push integer
          mov rax, 16
          push rax
          ; 294 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 294 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 294 push string
          mov rax, s_317
          push rax
          ; 294 push integer
          mov rax, 294
          push rax
          ; 294 push string
          mov rax, s_328
          push rax
          ; 294 push boolean
          mov rax, 1
          push rax
          ; 294 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 295 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 295 push integer
          mov rax, 16
          push rax
          ; 295 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 295 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 295 push string
          mov rax, s_317
          push rax
          ; 295 push integer
          mov rax, 295
          push rax
          ; 295 push string
          mov rax, s_328
          push rax
          ; 295 push boolean
          mov rax, 1
          push rax
          ; 295 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 295 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 295 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000131
          ; 296 duplicate
          pop rax
          push rax
          push rax
          ; 296 push integer
          mov rax, 16
          push rax
          ; 296 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 296 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 297 push string
          mov rax, s_342
          push rax
          ; 297 push string
          mov rax, s_317
          push rax
          ; 297 push integer
          mov rax, 297
          push rax
          ; 297 push string
          mov rax, s_328
          push rax
          ; 297 push boolean
          mov rax, 1
          push rax
          ; 297 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 296 jump
          jmp end_0x0000000000000131
          ; 296 label
if_0x0000000000000131: 
          ; 296 label
end_0x0000000000000131: 
          ; 299 push integer
          mov rax, 1
          push rax
          ; 299 push string
          mov rax, s_317
          push rax
          ; 299 push integer
          mov rax, 299
          push rax
          ; 299 push string
          mov rax, s_328
          push rax
          ; 299 push boolean
          mov rax, 1
          push rax
          ; 299 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 258 jump
          jmp end_0x000000000000010e
          ; 258 label
elif_0x000000000000012a: 
          ; 300 duplicate
          pop rax
          push rax
          push rax
          ; 300 push integer
          mov rax, 0
          push rax
          ; 300 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 300 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 300 push integer
          mov rax, 12
          push rax
          ; 300 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 300 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000132
          ; 301 duplicate
          pop rax
          push rax
          push rax
          ; 301 push integer
          mov rax, 8
          push rax
          ; 301 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 301 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 301 push string
          mov rax, s_294
          push rax
          ; 301 push string
          mov rax, s_317
          push rax
          ; 301 push integer
          mov rax, 301
          push rax
          ; 301 push string
          mov rax, s_328
          push rax
          ; 301 push boolean
          mov rax, 1
          push rax
          ; 301 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 301 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000133
          ; 302 push string
          mov rax, s_343
          push rax
          ; 302 push string
          mov rax, s_317
          push rax
          ; 302 push integer
          mov rax, 302
          push rax
          ; 302 push string
          mov rax, s_328
          push rax
          ; 302 push boolean
          mov rax, 1
          push rax
          ; 302 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 303 push integer
          mov rax, 0
          push rax
          ; 304 label
while_0x0000000000000033: 
          ; 304 duplicate
          pop rax
          push rax
          push rax
          ; 304 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 304 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 304 push integer
          mov rax, 8
          push rax
          ; 304 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 304 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 304 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 304 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000033_end
          ; 305 duplicate
          pop rax
          push rax
          push rax
          ; 305 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 305 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 305 push string
          mov rax, s_317
          push rax
          ; 305 push integer
          mov rax, 305
          push rax
          ; 305 push string
          mov rax, s_328
          push rax
          ; 305 push boolean
          mov rax, 1
          push rax
          ; 305 call
          call fn_list_fetch_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 305 push string
          mov rax, s_317
          push rax
          ; 305 push integer
          mov rax, 305
          push rax
          ; 305 push string
          mov rax, s_328
          push rax
          ; 305 push boolean
          mov rax, 1
          push rax
          ; 305 call
          call fn_type_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 305 push string
          mov rax, s_317
          push rax
          ; 305 push integer
          mov rax, 305
          push rax
          ; 305 push string
          mov rax, s_328
          push rax
          ; 305 push boolean
          mov rax, 1
          push rax
          ; 305 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 306 push string
          mov rax, s_134
          push rax
          ; 306 push string
          mov rax, s_317
          push rax
          ; 306 push integer
          mov rax, 306
          push rax
          ; 306 push string
          mov rax, s_328
          push rax
          ; 306 push boolean
          mov rax, 1
          push rax
          ; 306 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 307 push integer
          mov rax, 1
          push rax
          ; 307 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 304 end of while-loop
          jmp while_0x0000000000000033
while_0x0000000000000033_end: 
          ; 308 drop
          pop rax
          ; 309 push string
          mov rax, s_7
          push rax
          ; 309 push string
          mov rax, s_317
          push rax
          ; 309 push integer
          mov rax, 309
          push rax
          ; 309 push string
          mov rax, s_328
          push rax
          ; 309 push boolean
          mov rax, 1
          push rax
          ; 309 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 310 push integer
          mov rax, 0
          push rax
          ; 310 push string
          mov rax, s_317
          push rax
          ; 310 push integer
          mov rax, 310
          push rax
          ; 310 push string
          mov rax, s_328
          push rax
          ; 310 push boolean
          mov rax, 1
          push rax
          ; 310 call
          call fn_exit
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 302 jump
          jmp end_0x0000000000000133
          ; 302 label
if_0x0000000000000133: 
          ; 311 duplicate
          pop rax
          push rax
          push rax
          ; 311 push integer
          mov rax, 8
          push rax
          ; 311 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 311 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 311 push string
          mov rax, s_305
          push rax
          ; 311 push string
          mov rax, s_317
          push rax
          ; 311 push integer
          mov rax, 311
          push rax
          ; 311 push string
          mov rax, s_328
          push rax
          ; 311 push boolean
          mov rax, 1
          push rax
          ; 311 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 311 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000134
          ; 312 drop
          pop rax
          ; 312 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 312 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 312 push string
          mov rax, s_317
          push rax
          ; 312 push integer
          mov rax, 312
          push rax
          ; 312 push string
          mov rax, s_328
          push rax
          ; 312 push boolean
          mov rax, 1
          push rax
          ; 312 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 313 duplicate
          pop rax
          push rax
          push rax
          ; 313 push integer
          mov rax, 0
          push rax
          ; 313 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 313 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 313 push integer
          mov rax, 10
          push rax
          ; 313 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 313 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000135
          ; 314 duplicate
          pop rax
          push rax
          push rax
          ; 314 push integer
          mov rax, 16
          push rax
          ; 314 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 314 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 315 push string
          mov rax, s_344
          push rax
          ; 315 push string
          mov rax, s_317
          push rax
          ; 315 push integer
          mov rax, 315
          push rax
          ; 315 push string
          mov rax, s_328
          push rax
          ; 315 push boolean
          mov rax, 1
          push rax
          ; 315 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 314 jump
          jmp end_0x0000000000000135
          ; 314 label
if_0x0000000000000135: 
          ; 314 label
end_0x0000000000000135: 
          ; 317 duplicate
          pop rax
          push rax
          push rax
          ; 317 push integer
          mov rax, 8
          push rax
          ; 317 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 317 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 317 push character
          mov rax, 46
          mov rax, 46
          push rax
          ; 317 push character
          mov rax, 47
          mov rax, 47
          push rax
          ; 317 push string
          mov rax, s_317
          push rax
          ; 317 push integer
          mov rax, 317
          push rax
          ; 317 push string
          mov rax, s_328
          push rax
          ; 317 push boolean
          mov rax, 1
          push rax
          ; 317 call
          call fn_replace
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 317 push string
          mov rax, s_345
          push rax
          ; 317 push string
          mov rax, s_317
          push rax
          ; 317 push integer
          mov rax, 317
          push rax
          ; 317 push string
          mov rax, s_328
          push rax
          ; 317 push boolean
          mov rax, 1
          push rax
          ; 317 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 318 duplicate
          pop rax
          push rax
          push rax
          ; 318 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 318 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 318 push string
          mov rax, s_317
          push rax
          ; 318 push integer
          mov rax, 318
          push rax
          ; 318 push string
          mov rax, s_328
          push rax
          ; 318 push boolean
          mov rax, 1
          push rax
          ; 318 call
          call fn_list_contains_string
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 318 push boolean
          mov rax, 0
          push rax
          ; 318 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 318 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000136
          ; 319 duplicate
          pop rax
          push rax
          push rax
          ; 319 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 319 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 319 push string
          mov rax, s_317
          push rax
          ; 319 push integer
          mov rax, 319
          push rax
          ; 319 push string
          mov rax, s_328
          push rax
          ; 319 push boolean
          mov rax, 1
          push rax
          ; 319 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 319 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 319 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 323 duplicate
          pop rax
          push rax
          push rax
          ; 323 duplicate
          pop rax
          push rax
          push rax
          ; 324 push string
          mov rax, s_317
          push rax
          ; 324 push integer
          mov rax, 324
          push rax
          ; 324 push string
          mov rax, s_328
          push rax
          ; 324 push boolean
          mov rax, 1
          push rax
          ; 324 call
          call fn_read_file
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 325 push string
          mov rax, s_317
          push rax
          ; 325 push integer
          mov rax, 325
          push rax
          ; 325 push string
          mov rax, s_328
          push rax
          ; 325 push boolean
          mov rax, 1
          push rax
          ; 325 call
          call fn_tokenize
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 326 push integer
          mov rax, 8
          push rax
          ; 326 push string
          mov rax, s_317
          push rax
          ; 326 push integer
          mov rax, 326
          push rax
          ; 326 push string
          mov rax, s_328
          push rax
          ; 326 push boolean
          mov rax, 1
          push rax
          ; 326 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 326 duplicate
          pop rax
          push rax
          push rax
          ; 326 push integer
          mov rax, 0
          push rax
          ; 326 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 326 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 327 push integer
          mov rax, 8
          push rax
          ; 327 push string
          mov rax, s_317
          push rax
          ; 327 push integer
          mov rax, 327
          push rax
          ; 327 push string
          mov rax, s_328
          push rax
          ; 327 push boolean
          mov rax, 1
          push rax
          ; 327 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 328 push integer
          mov rax, 8
          push rax
          ; 328 push string
          mov rax, s_317
          push rax
          ; 328 push integer
          mov rax, 328
          push rax
          ; 328 push string
          mov rax, s_328
          push rax
          ; 328 push boolean
          mov rax, 1
          push rax
          ; 328 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 329 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 329 push string
          mov rax, s_317
          push rax
          ; 329 push integer
          mov rax, 329
          push rax
          ; 329 push string
          mov rax, s_328
          push rax
          ; 329 push boolean
          mov rax, 1
          push rax
          ; 329 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 330 drop
          pop rax
          ; 319 jump
          jmp end_0x0000000000000136
          ; 319 label
if_0x0000000000000136: 
          ; 319 label
end_0x0000000000000136: 
          ; 331 drop
          pop rax
          ; 311 jump
          jmp end_0x0000000000000133
          ; 311 label
elif_0x0000000000000134: 
          ; 332 duplicate
          pop rax
          push rax
          push rax
          ; 332 push integer
          mov rax, 8
          push rax
          ; 332 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 332 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 332 push string
          mov rax, s_306
          push rax
          ; 332 push string
          mov rax, s_317
          push rax
          ; 332 push integer
          mov rax, 332
          push rax
          ; 332 push string
          mov rax, s_328
          push rax
          ; 332 push boolean
          mov rax, 1
          push rax
          ; 332 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 332 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000137
          ; 334 push string
          mov rax, s_346
          push rax
          ; 334 push string
          mov rax, s_317
          push rax
          ; 334 push integer
          mov rax, 334
          push rax
          ; 334 push string
          mov rax, s_328
          push rax
          ; 334 push boolean
          mov rax, 1
          push rax
          ; 334 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 332 jump
          jmp end_0x0000000000000133
          ; 332 label
elif_0x0000000000000137: 
          ; 335 duplicate
          pop rax
          push rax
          push rax
          ; 335 push integer
          mov rax, 8
          push rax
          ; 335 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 335 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 335 push string
          mov rax, s_289
          push rax
          ; 335 push string
          mov rax, s_317
          push rax
          ; 335 push integer
          mov rax, 335
          push rax
          ; 335 push string
          mov rax, s_328
          push rax
          ; 335 push boolean
          mov rax, 1
          push rax
          ; 335 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 335 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000138
          ; 336 duplicate
          pop rax
          push rax
          push rax
          ; 336 push integer
          mov rax, 16
          push rax
          ; 336 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 336 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 336 push string
          mov rax, s_317
          push rax
          ; 336 push integer
          mov rax, 336
          push rax
          ; 336 push string
          mov rax, s_328
          push rax
          ; 336 push boolean
          mov rax, 1
          push rax
          ; 336 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 336 drop
          pop rax
          ; 337 push integer
          mov rax, 1
          push rax
          ; 337 push string
          mov rax, s_317
          push rax
          ; 337 push integer
          mov rax, 337
          push rax
          ; 337 push string
          mov rax, s_328
          push rax
          ; 337 push boolean
          mov rax, 1
          push rax
          ; 337 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 335 jump
          jmp end_0x0000000000000133
          ; 335 label
elif_0x0000000000000138: 
          ; 338 duplicate
          pop rax
          push rax
          push rax
          ; 338 push integer
          mov rax, 8
          push rax
          ; 338 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 338 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 338 push string
          mov rax, s_290
          push rax
          ; 338 push string
          mov rax, s_317
          push rax
          ; 338 push integer
          mov rax, 338
          push rax
          ; 338 push string
          mov rax, s_328
          push rax
          ; 338 push boolean
          mov rax, 1
          push rax
          ; 338 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 338 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000139
          ; 339 duplicate
          pop rax
          push rax
          push rax
          ; 339 push integer
          mov rax, 16
          push rax
          ; 339 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 339 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 339 push string
          mov rax, s_317
          push rax
          ; 339 push integer
          mov rax, 339
          push rax
          ; 339 push string
          mov rax, s_328
          push rax
          ; 339 push boolean
          mov rax, 1
          push rax
          ; 339 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 339 drop
          pop rax
          ; 340 push integer
          mov rax, 2
          push rax
          ; 340 push string
          mov rax, s_317
          push rax
          ; 340 push integer
          mov rax, 340
          push rax
          ; 340 push string
          mov rax, s_328
          push rax
          ; 340 push boolean
          mov rax, 1
          push rax
          ; 340 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 338 jump
          jmp end_0x0000000000000133
          ; 338 label
elif_0x0000000000000139: 
          ; 341 duplicate
          pop rax
          push rax
          push rax
          ; 341 push integer
          mov rax, 8
          push rax
          ; 341 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 341 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 341 push string
          mov rax, s_291
          push rax
          ; 341 push string
          mov rax, s_317
          push rax
          ; 341 push integer
          mov rax, 341
          push rax
          ; 341 push string
          mov rax, s_328
          push rax
          ; 341 push boolean
          mov rax, 1
          push rax
          ; 341 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 341 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000013a
          ; 342 duplicate
          pop rax
          push rax
          push rax
          ; 342 push integer
          mov rax, 16
          push rax
          ; 342 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 342 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 342 push string
          mov rax, s_317
          push rax
          ; 342 push integer
          mov rax, 342
          push rax
          ; 342 push string
          mov rax, s_328
          push rax
          ; 342 push boolean
          mov rax, 1
          push rax
          ; 342 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 342 drop
          pop rax
          ; 343 push integer
          mov rax, 3
          push rax
          ; 343 push string
          mov rax, s_317
          push rax
          ; 343 push integer
          mov rax, 343
          push rax
          ; 343 push string
          mov rax, s_328
          push rax
          ; 343 push boolean
          mov rax, 1
          push rax
          ; 343 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 341 jump
          jmp end_0x0000000000000133
          ; 341 label
elif_0x000000000000013a: 
          ; 344 duplicate
          pop rax
          push rax
          push rax
          ; 344 push integer
          mov rax, 8
          push rax
          ; 344 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 344 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 344 push string
          mov rax, s_292
          push rax
          ; 344 push string
          mov rax, s_317
          push rax
          ; 344 push integer
          mov rax, 344
          push rax
          ; 344 push string
          mov rax, s_328
          push rax
          ; 344 push boolean
          mov rax, 1
          push rax
          ; 344 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 344 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000013b
          ; 345 duplicate
          pop rax
          push rax
          push rax
          ; 345 push integer
          mov rax, 16
          push rax
          ; 345 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 345 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 345 push string
          mov rax, s_317
          push rax
          ; 345 push integer
          mov rax, 345
          push rax
          ; 345 push string
          mov rax, s_328
          push rax
          ; 345 push boolean
          mov rax, 1
          push rax
          ; 345 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 345 drop
          pop rax
          ; 346 push integer
          mov rax, 4
          push rax
          ; 346 push string
          mov rax, s_317
          push rax
          ; 346 push integer
          mov rax, 346
          push rax
          ; 346 push string
          mov rax, s_328
          push rax
          ; 346 push boolean
          mov rax, 1
          push rax
          ; 346 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 344 jump
          jmp end_0x0000000000000133
          ; 344 label
elif_0x000000000000013b: 
          ; 347 duplicate
          pop rax
          push rax
          push rax
          ; 347 push integer
          mov rax, 8
          push rax
          ; 347 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 347 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 347 push string
          mov rax, s_288
          push rax
          ; 347 push string
          mov rax, s_317
          push rax
          ; 347 push integer
          mov rax, 347
          push rax
          ; 347 push string
          mov rax, s_328
          push rax
          ; 347 push boolean
          mov rax, 1
          push rax
          ; 347 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 347 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000013c
          ; 348 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 348 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 348 push string
          mov rax, s_317
          push rax
          ; 348 push integer
          mov rax, 348
          push rax
          ; 348 push string
          mov rax, s_328
          push rax
          ; 348 push boolean
          mov rax, 1
          push rax
          ; 348 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 349 duplicate
          pop rax
          push rax
          push rax
          ; 349 push integer
          mov rax, 0
          push rax
          ; 349 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 349 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 349 push integer
          mov rax, 10
          push rax
          ; 349 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 349 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000013d
          ; 350 duplicate
          pop rax
          push rax
          push rax
          ; 350 push integer
          mov rax, 16
          push rax
          ; 350 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 350 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 351 push string
          mov rax, s_347
          push rax
          ; 351 push string
          mov rax, s_317
          push rax
          ; 351 push integer
          mov rax, 351
          push rax
          ; 351 push string
          mov rax, s_328
          push rax
          ; 351 push boolean
          mov rax, 1
          push rax
          ; 351 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 350 jump
          jmp end_0x000000000000013d
          ; 350 label
if_0x000000000000013d: 
          ; 350 label
end_0x000000000000013d: 
          ; 352 push integer
          mov rax, 8
          push rax
          ; 352 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 352 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 354 duplicate
          pop rax
          push rax
          push rax
          ; 354 push string
          mov rax, s_59
          push rax
          ; 354 get pointer to buffer
          mov rax, buf__buffers
          push rax
          ; 354 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 354 push string
          mov rax, s_317
          push rax
          ; 354 push integer
          mov rax, 354
          push rax
          ; 354 push string
          mov rax, s_328
          push rax
          ; 354 push boolean
          mov rax, 1
          push rax
          ; 354 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 354 get pointer to buffer
          mov rax, buf__buffers
          push rax
          ; 354 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 356 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 356 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 356 push string
          mov rax, s_317
          push rax
          ; 356 push integer
          mov rax, 356
          push rax
          ; 356 push string
          mov rax, s_328
          push rax
          ; 356 push boolean
          mov rax, 1
          push rax
          ; 356 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 357 duplicate
          pop rax
          push rax
          push rax
          ; 357 push integer
          mov rax, 0
          push rax
          ; 357 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 357 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 357 push integer
          mov rax, 11
          push rax
          ; 357 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 357 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000013e
          ; 358 duplicate
          pop rax
          push rax
          push rax
          ; 358 push integer
          mov rax, 16
          push rax
          ; 358 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 358 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 359 push string
          mov rax, s_348
          push rax
          ; 359 push string
          mov rax, s_317
          push rax
          ; 359 push integer
          mov rax, 359
          push rax
          ; 359 push string
          mov rax, s_328
          push rax
          ; 359 push boolean
          mov rax, 1
          push rax
          ; 359 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 358 jump
          jmp end_0x000000000000013e
          ; 358 label
if_0x000000000000013e: 
          ; 358 label
end_0x000000000000013e: 
          ; 360 push integer
          mov rax, 8
          push rax
          ; 360 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 360 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 362 push string
          mov rax, s_317
          push rax
          ; 362 push integer
          mov rax, 362
          push rax
          ; 362 push string
          mov rax, s_328
          push rax
          ; 362 push boolean
          mov rax, 1
          push rax
          ; 362 call
          call fn__create_buffer_operand
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 363 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 363 push integer
          mov rax, 16
          push rax
          ; 363 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 363 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 364 push integer
          mov rax, 6
          push rax
          ; 364 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 365 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 365 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 366 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 366 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 366 push string
          mov rax, s_317
          push rax
          ; 366 push integer
          mov rax, 366
          push rax
          ; 366 push string
          mov rax, s_328
          push rax
          ; 366 push boolean
          mov rax, 1
          push rax
          ; 366 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 366 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 366 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 347 jump
          jmp end_0x0000000000000133
          ; 347 label
elif_0x000000000000013c: 
          ; 367 duplicate
          pop rax
          push rax
          push rax
          ; 367 push integer
          mov rax, 8
          push rax
          ; 367 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 367 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 367 push string
          mov rax, s_293
          push rax
          ; 367 push string
          mov rax, s_317
          push rax
          ; 367 push integer
          mov rax, 367
          push rax
          ; 367 push string
          mov rax, s_328
          push rax
          ; 367 push boolean
          mov rax, 1
          push rax
          ; 367 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 367 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000013f
          ; 368 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 368 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 368 push string
          mov rax, s_317
          push rax
          ; 368 push integer
          mov rax, 368
          push rax
          ; 368 push string
          mov rax, s_328
          push rax
          ; 368 push boolean
          mov rax, 1
          push rax
          ; 368 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 369 duplicate
          pop rax
          push rax
          push rax
          ; 369 push integer
          mov rax, 0
          push rax
          ; 369 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 369 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 369 push integer
          mov rax, 10
          push rax
          ; 369 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 369 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000140
          ; 370 duplicate
          pop rax
          push rax
          push rax
          ; 370 push integer
          mov rax, 16
          push rax
          ; 370 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 370 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 371 push string
          mov rax, s_349
          push rax
          ; 371 push string
          mov rax, s_317
          push rax
          ; 371 push integer
          mov rax, 371
          push rax
          ; 371 push string
          mov rax, s_328
          push rax
          ; 371 push boolean
          mov rax, 1
          push rax
          ; 371 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 370 jump
          jmp end_0x0000000000000140
          ; 370 label
if_0x0000000000000140: 
          ; 370 label
end_0x0000000000000140: 
          ; 372 push integer
          mov rax, 8
          push rax
          ; 372 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 372 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 374 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 374 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 374 push string
          mov rax, s_317
          push rax
          ; 374 push integer
          mov rax, 374
          push rax
          ; 374 push string
          mov rax, s_328
          push rax
          ; 374 push boolean
          mov rax, 1
          push rax
          ; 374 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 375 duplicate
          pop rax
          push rax
          push rax
          ; 375 push integer
          mov rax, 0
          push rax
          ; 375 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 375 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 375 push integer
          mov rax, 11
          push rax
          ; 375 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 375 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000141
          ; 376 push integer
          mov rax, 8
          push rax
          ; 376 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 376 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 376 jump
          jmp end_0x0000000000000141
          ; 376 label
if_0x0000000000000141: 
          ; 377 duplicate
          pop rax
          push rax
          push rax
          ; 377 push integer
          mov rax, 0
          push rax
          ; 377 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 377 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 377 push integer
          mov rax, 10
          push rax
          ; 377 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 377 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000142
          ; 378 duplicate
          pop rax
          push rax
          push rax
          ; 378 push integer
          mov rax, 8
          push rax
          ; 378 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 378 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 378 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 378 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 378 push string
          mov rax, s_317
          push rax
          ; 378 push integer
          mov rax, 378
          push rax
          ; 378 push string
          mov rax, s_328
          push rax
          ; 378 push boolean
          mov rax, 1
          push rax
          ; 378 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 379 duplicate
          pop rax
          push rax
          push rax
          ; 379 push string
          mov rax, s_317
          push rax
          ; 379 push integer
          mov rax, 379
          push rax
          ; 379 push string
          mov rax, s_328
          push rax
          ; 379 push boolean
          mov rax, 1
          push rax
          ; 379 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 379 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 379 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000143
          ; 380 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 380 duplicate
          pop rax
          push rax
          push rax
          ; 380 push integer
          mov rax, 16
          push rax
          ; 380 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 380 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 381 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 381 push integer
          mov rax, 8
          push rax
          ; 381 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 381 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 382 push string
          mov rax, s_350
          push rax
          ; 382 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 382 push string
          mov rax, s_317
          push rax
          ; 382 push integer
          mov rax, 382
          push rax
          ; 382 push string
          mov rax, s_328
          push rax
          ; 382 push boolean
          mov rax, 1
          push rax
          ; 382 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 382 push string
          mov rax, s_317
          push rax
          ; 382 push integer
          mov rax, 382
          push rax
          ; 382 push string
          mov rax, s_328
          push rax
          ; 382 push boolean
          mov rax, 1
          push rax
          ; 382 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 380 jump
          jmp end_0x0000000000000143
          ; 380 label
if_0x0000000000000143: 
          ; 380 label
end_0x0000000000000143: 
          ; 383 drop
          pop rax
          ; 377 jump
          jmp end_0x0000000000000141
          ; 377 label
elif_0x0000000000000142: 
          ; 385 duplicate
          pop rax
          push rax
          push rax
          ; 385 push integer
          mov rax, 16
          push rax
          ; 385 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 385 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 386 push string
          mov rax, s_351
          push rax
          ; 386 push string
          mov rax, s_317
          push rax
          ; 386 push integer
          mov rax, 386
          push rax
          ; 386 push string
          mov rax, s_328
          push rax
          ; 386 push boolean
          mov rax, 1
          push rax
          ; 386 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 385 label
end_0x0000000000000141: 
          ; 388 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 388 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 388 push string
          mov rax, s_317
          push rax
          ; 388 push integer
          mov rax, 388
          push rax
          ; 388 push string
          mov rax, s_328
          push rax
          ; 388 push boolean
          mov rax, 1
          push rax
          ; 388 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 388 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 388 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 367 jump
          jmp end_0x0000000000000133
          ; 367 label
elif_0x000000000000013f: 
          ; 389 duplicate
          pop rax
          push rax
          push rax
          ; 389 push integer
          mov rax, 8
          push rax
          ; 389 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 389 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 389 push string
          mov rax, s_297
          push rax
          ; 389 push string
          mov rax, s_317
          push rax
          ; 389 push integer
          mov rax, 389
          push rax
          ; 389 push string
          mov rax, s_328
          push rax
          ; 389 push boolean
          mov rax, 1
          push rax
          ; 389 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 389 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000144
          ; 390 push integer
          mov rax, 7
          push rax
          ; 391 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 391 push integer
          mov rax, 16
          push rax
          ; 391 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 391 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 392 push string
          mov rax, s_317
          push rax
          ; 392 push integer
          mov rax, 392
          push rax
          ; 392 push string
          mov rax, s_328
          push rax
          ; 392 push boolean
          mov rax, 1
          push rax
          ; 392 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 392 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 393 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 393 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 393 push string
          mov rax, s_317
          push rax
          ; 393 push integer
          mov rax, 393
          push rax
          ; 393 push string
          mov rax, s_328
          push rax
          ; 393 push boolean
          mov rax, 1
          push rax
          ; 393 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 393 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 393 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 395 duplicate
          pop rax
          push rax
          push rax
          ; 395 push integer
          mov rax, 16
          push rax
          ; 395 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 395 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 395 push string
          mov rax, s_317
          push rax
          ; 395 push integer
          mov rax, 395
          push rax
          ; 395 push string
          mov rax, s_328
          push rax
          ; 395 push boolean
          mov rax, 1
          push rax
          ; 395 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 395 push integer
          mov rax, 4
          push rax
          ; 395 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 395 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000145
          ; 396 duplicate
          pop rax
          push rax
          push rax
          ; 396 push integer
          mov rax, 16
          push rax
          ; 396 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 396 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 396 push string
          mov rax, s_352
          push rax
          ; 396 push string
          mov rax, s_317
          push rax
          ; 396 push integer
          mov rax, 396
          push rax
          ; 396 push string
          mov rax, s_328
          push rax
          ; 396 push boolean
          mov rax, 1
          push rax
          ; 396 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 396 jump
          jmp end_0x0000000000000145
          ; 396 label
if_0x0000000000000145: 
          ; 396 label
end_0x0000000000000145: 
          ; 398 push integer
          mov rax, 1
          push rax
          ; 398 push string
          mov rax, s_317
          push rax
          ; 398 push integer
          mov rax, 398
          push rax
          ; 398 push string
          mov rax, s_328
          push rax
          ; 398 push boolean
          mov rax, 1
          push rax
          ; 398 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 389 jump
          jmp end_0x0000000000000133
          ; 389 label
elif_0x0000000000000144: 
          ; 399 duplicate
          pop rax
          push rax
          push rax
          ; 399 push integer
          mov rax, 8
          push rax
          ; 399 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 399 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 399 push string
          mov rax, s_298
          push rax
          ; 399 push string
          mov rax, s_317
          push rax
          ; 399 push integer
          mov rax, 399
          push rax
          ; 399 push string
          mov rax, s_328
          push rax
          ; 399 push boolean
          mov rax, 1
          push rax
          ; 399 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 399 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000146
          ; 400 push integer
          mov rax, 8
          push rax
          ; 401 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 401 push integer
          mov rax, 16
          push rax
          ; 401 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 401 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 402 push string
          mov rax, s_317
          push rax
          ; 402 push integer
          mov rax, 402
          push rax
          ; 402 push string
          mov rax, s_328
          push rax
          ; 402 push boolean
          mov rax, 1
          push rax
          ; 402 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 402 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 403 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 403 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 403 push string
          mov rax, s_317
          push rax
          ; 403 push integer
          mov rax, 403
          push rax
          ; 403 push string
          mov rax, s_328
          push rax
          ; 403 push boolean
          mov rax, 1
          push rax
          ; 403 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 403 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 403 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 405 duplicate
          pop rax
          push rax
          push rax
          ; 405 push integer
          mov rax, 16
          push rax
          ; 405 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 405 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 405 push string
          mov rax, s_317
          push rax
          ; 405 push integer
          mov rax, 405
          push rax
          ; 405 push string
          mov rax, s_328
          push rax
          ; 405 push boolean
          mov rax, 1
          push rax
          ; 405 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 405 push integer
          mov rax, 4
          push rax
          ; 405 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 405 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000147
          ; 406 duplicate
          pop rax
          push rax
          push rax
          ; 406 push integer
          mov rax, 16
          push rax
          ; 406 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 406 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 406 push string
          mov rax, s_352
          push rax
          ; 406 push string
          mov rax, s_317
          push rax
          ; 406 push integer
          mov rax, 406
          push rax
          ; 406 push string
          mov rax, s_328
          push rax
          ; 406 push boolean
          mov rax, 1
          push rax
          ; 406 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 406 jump
          jmp end_0x0000000000000147
          ; 406 label
if_0x0000000000000147: 
          ; 406 label
end_0x0000000000000147: 
          ; 408 push integer
          mov rax, 2
          push rax
          ; 408 push string
          mov rax, s_317
          push rax
          ; 408 push integer
          mov rax, 408
          push rax
          ; 408 push string
          mov rax, s_328
          push rax
          ; 408 push boolean
          mov rax, 1
          push rax
          ; 408 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 399 jump
          jmp end_0x0000000000000133
          ; 399 label
elif_0x0000000000000146: 
          ; 409 duplicate
          pop rax
          push rax
          push rax
          ; 409 push integer
          mov rax, 8
          push rax
          ; 409 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 409 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 409 push string
          mov rax, s_299
          push rax
          ; 409 push string
          mov rax, s_317
          push rax
          ; 409 push integer
          mov rax, 409
          push rax
          ; 409 push string
          mov rax, s_328
          push rax
          ; 409 push boolean
          mov rax, 1
          push rax
          ; 409 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 409 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000148
          ; 410 push integer
          mov rax, 9
          push rax
          ; 411 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 411 push integer
          mov rax, 16
          push rax
          ; 411 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 411 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 412 push string
          mov rax, s_317
          push rax
          ; 412 push integer
          mov rax, 412
          push rax
          ; 412 push string
          mov rax, s_328
          push rax
          ; 412 push boolean
          mov rax, 1
          push rax
          ; 412 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 412 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 413 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 413 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 413 push string
          mov rax, s_317
          push rax
          ; 413 push integer
          mov rax, 413
          push rax
          ; 413 push string
          mov rax, s_328
          push rax
          ; 413 push boolean
          mov rax, 1
          push rax
          ; 413 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 413 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 413 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 415 duplicate
          pop rax
          push rax
          push rax
          ; 415 push integer
          mov rax, 16
          push rax
          ; 415 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 415 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 415 push string
          mov rax, s_317
          push rax
          ; 415 push integer
          mov rax, 415
          push rax
          ; 415 push string
          mov rax, s_328
          push rax
          ; 415 push boolean
          mov rax, 1
          push rax
          ; 415 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 415 push integer
          mov rax, 4
          push rax
          ; 415 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 415 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000149
          ; 416 duplicate
          pop rax
          push rax
          push rax
          ; 416 push integer
          mov rax, 16
          push rax
          ; 416 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 416 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 416 push string
          mov rax, s_352
          push rax
          ; 416 push string
          mov rax, s_317
          push rax
          ; 416 push integer
          mov rax, 416
          push rax
          ; 416 push string
          mov rax, s_328
          push rax
          ; 416 push boolean
          mov rax, 1
          push rax
          ; 416 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 416 jump
          jmp end_0x0000000000000149
          ; 416 label
if_0x0000000000000149: 
          ; 416 label
end_0x0000000000000149: 
          ; 418 push integer
          mov rax, 3
          push rax
          ; 418 push string
          mov rax, s_317
          push rax
          ; 418 push integer
          mov rax, 418
          push rax
          ; 418 push string
          mov rax, s_328
          push rax
          ; 418 push boolean
          mov rax, 1
          push rax
          ; 418 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 409 jump
          jmp end_0x0000000000000133
          ; 409 label
elif_0x0000000000000148: 
          ; 419 duplicate
          pop rax
          push rax
          push rax
          ; 419 push integer
          mov rax, 8
          push rax
          ; 419 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 419 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 419 push string
          mov rax, s_300
          push rax
          ; 419 push string
          mov rax, s_317
          push rax
          ; 419 push integer
          mov rax, 419
          push rax
          ; 419 push string
          mov rax, s_328
          push rax
          ; 419 push boolean
          mov rax, 1
          push rax
          ; 419 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 419 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000014a
          ; 420 push integer
          mov rax, 10
          push rax
          ; 421 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 421 push integer
          mov rax, 16
          push rax
          ; 421 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 421 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 422 push string
          mov rax, s_317
          push rax
          ; 422 push integer
          mov rax, 422
          push rax
          ; 422 push string
          mov rax, s_328
          push rax
          ; 422 push boolean
          mov rax, 1
          push rax
          ; 422 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 422 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 423 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 423 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 423 push string
          mov rax, s_317
          push rax
          ; 423 push integer
          mov rax, 423
          push rax
          ; 423 push string
          mov rax, s_328
          push rax
          ; 423 push boolean
          mov rax, 1
          push rax
          ; 423 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 423 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 423 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 425 duplicate
          pop rax
          push rax
          push rax
          ; 425 push integer
          mov rax, 16
          push rax
          ; 425 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 425 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 425 push string
          mov rax, s_317
          push rax
          ; 425 push integer
          mov rax, 425
          push rax
          ; 425 push string
          mov rax, s_328
          push rax
          ; 425 push boolean
          mov rax, 1
          push rax
          ; 425 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 425 push integer
          mov rax, 4
          push rax
          ; 425 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 425 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000014b
          ; 426 duplicate
          pop rax
          push rax
          push rax
          ; 426 push integer
          mov rax, 16
          push rax
          ; 426 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 426 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 426 push string
          mov rax, s_352
          push rax
          ; 426 push string
          mov rax, s_317
          push rax
          ; 426 push integer
          mov rax, 426
          push rax
          ; 426 push string
          mov rax, s_328
          push rax
          ; 426 push boolean
          mov rax, 1
          push rax
          ; 426 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 426 jump
          jmp end_0x000000000000014b
          ; 426 label
if_0x000000000000014b: 
          ; 426 label
end_0x000000000000014b: 
          ; 428 push integer
          mov rax, 4
          push rax
          ; 428 push string
          mov rax, s_317
          push rax
          ; 428 push integer
          mov rax, 428
          push rax
          ; 428 push string
          mov rax, s_328
          push rax
          ; 428 push boolean
          mov rax, 1
          push rax
          ; 428 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 419 jump
          jmp end_0x0000000000000133
          ; 419 label
elif_0x000000000000014a: 
          ; 429 duplicate
          pop rax
          push rax
          push rax
          ; 429 push integer
          mov rax, 8
          push rax
          ; 429 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 429 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 429 push string
          mov rax, s_307
          push rax
          ; 429 push string
          mov rax, s_317
          push rax
          ; 429 push integer
          mov rax, 429
          push rax
          ; 429 push string
          mov rax, s_328
          push rax
          ; 429 push boolean
          mov rax, 1
          push rax
          ; 429 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 429 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000014c
          ; 430 push integer
          mov rax, 37
          push rax
          ; 431 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 431 push integer
          mov rax, 16
          push rax
          ; 431 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 431 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 432 push string
          mov rax, s_317
          push rax
          ; 432 push integer
          mov rax, 432
          push rax
          ; 432 push string
          mov rax, s_328
          push rax
          ; 432 push boolean
          mov rax, 1
          push rax
          ; 432 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 432 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 433 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 433 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 433 push string
          mov rax, s_317
          push rax
          ; 433 push integer
          mov rax, 433
          push rax
          ; 433 push string
          mov rax, s_328
          push rax
          ; 433 push boolean
          mov rax, 1
          push rax
          ; 433 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 433 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 433 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 435 duplicate
          pop rax
          push rax
          push rax
          ; 435 push integer
          mov rax, 16
          push rax
          ; 435 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 435 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 435 push string
          mov rax, s_317
          push rax
          ; 435 push integer
          mov rax, 435
          push rax
          ; 435 push string
          mov rax, s_328
          push rax
          ; 435 push boolean
          mov rax, 1
          push rax
          ; 435 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 435 push integer
          mov rax, 4
          push rax
          ; 435 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 435 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000014d
          ; 436 duplicate
          pop rax
          push rax
          push rax
          ; 436 push integer
          mov rax, 16
          push rax
          ; 436 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 436 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 436 push string
          mov rax, s_353
          push rax
          ; 436 push string
          mov rax, s_317
          push rax
          ; 436 push integer
          mov rax, 436
          push rax
          ; 436 push string
          mov rax, s_328
          push rax
          ; 436 push boolean
          mov rax, 1
          push rax
          ; 436 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 436 jump
          jmp end_0x000000000000014d
          ; 436 label
if_0x000000000000014d: 
          ; 436 label
end_0x000000000000014d: 
          ; 438 duplicate
          pop rax
          push rax
          push rax
          ; 438 push integer
          mov rax, 16
          push rax
          ; 438 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 438 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 438 push string
          mov rax, s_317
          push rax
          ; 438 push integer
          mov rax, 438
          push rax
          ; 438 push string
          mov rax, s_328
          push rax
          ; 438 push boolean
          mov rax, 1
          push rax
          ; 438 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 438 push integer
          mov rax, 1
          push rax
          ; 438 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 438 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000014e
          ; 439 duplicate
          pop rax
          push rax
          push rax
          ; 439 push integer
          mov rax, 16
          push rax
          ; 439 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 439 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 439 push string
          mov rax, s_354
          push rax
          ; 439 push string
          mov rax, s_317
          push rax
          ; 439 push integer
          mov rax, 439
          push rax
          ; 439 push string
          mov rax, s_328
          push rax
          ; 439 push boolean
          mov rax, 1
          push rax
          ; 439 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 439 jump
          jmp end_0x000000000000014e
          ; 439 label
if_0x000000000000014e: 
          ; 439 label
end_0x000000000000014e: 
          ; 429 jump
          jmp end_0x0000000000000133
          ; 429 label
elif_0x000000000000014c: 
          ; 440 duplicate
          pop rax
          push rax
          push rax
          ; 440 push integer
          mov rax, 8
          push rax
          ; 440 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 440 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 440 push string
          mov rax, s_308
          push rax
          ; 440 push string
          mov rax, s_317
          push rax
          ; 440 push integer
          mov rax, 440
          push rax
          ; 440 push string
          mov rax, s_328
          push rax
          ; 440 push boolean
          mov rax, 1
          push rax
          ; 440 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 440 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000014f
          ; 441 push integer
          mov rax, 38
          push rax
          ; 442 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 442 push integer
          mov rax, 16
          push rax
          ; 442 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 442 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 443 push string
          mov rax, s_317
          push rax
          ; 443 push integer
          mov rax, 443
          push rax
          ; 443 push string
          mov rax, s_328
          push rax
          ; 443 push boolean
          mov rax, 1
          push rax
          ; 443 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 443 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 444 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 444 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 444 push string
          mov rax, s_317
          push rax
          ; 444 push integer
          mov rax, 444
          push rax
          ; 444 push string
          mov rax, s_328
          push rax
          ; 444 push boolean
          mov rax, 1
          push rax
          ; 444 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 444 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 444 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 446 duplicate
          pop rax
          push rax
          push rax
          ; 446 push integer
          mov rax, 16
          push rax
          ; 446 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 446 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 446 push string
          mov rax, s_317
          push rax
          ; 446 push integer
          mov rax, 446
          push rax
          ; 446 push string
          mov rax, s_328
          push rax
          ; 446 push boolean
          mov rax, 1
          push rax
          ; 446 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 446 push integer
          mov rax, 4
          push rax
          ; 446 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 446 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000150
          ; 447 duplicate
          pop rax
          push rax
          push rax
          ; 447 push integer
          mov rax, 16
          push rax
          ; 447 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 447 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 447 push string
          mov rax, s_353
          push rax
          ; 447 push string
          mov rax, s_317
          push rax
          ; 447 push integer
          mov rax, 447
          push rax
          ; 447 push string
          mov rax, s_328
          push rax
          ; 447 push boolean
          mov rax, 1
          push rax
          ; 447 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 447 jump
          jmp end_0x0000000000000150
          ; 447 label
if_0x0000000000000150: 
          ; 447 label
end_0x0000000000000150: 
          ; 449 duplicate
          pop rax
          push rax
          push rax
          ; 449 push integer
          mov rax, 16
          push rax
          ; 449 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 449 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 449 push string
          mov rax, s_317
          push rax
          ; 449 push integer
          mov rax, 449
          push rax
          ; 449 push string
          mov rax, s_328
          push rax
          ; 449 push boolean
          mov rax, 1
          push rax
          ; 449 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 449 push integer
          mov rax, 2
          push rax
          ; 449 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 449 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000151
          ; 450 duplicate
          pop rax
          push rax
          push rax
          ; 450 push integer
          mov rax, 16
          push rax
          ; 450 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 450 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 450 push string
          mov rax, s_355
          push rax
          ; 450 push string
          mov rax, s_317
          push rax
          ; 450 push integer
          mov rax, 450
          push rax
          ; 450 push string
          mov rax, s_328
          push rax
          ; 450 push boolean
          mov rax, 1
          push rax
          ; 450 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 450 jump
          jmp end_0x0000000000000151
          ; 450 label
if_0x0000000000000151: 
          ; 450 label
end_0x0000000000000151: 
          ; 440 jump
          jmp end_0x0000000000000133
          ; 440 label
elif_0x000000000000014f: 
          ; 451 duplicate
          pop rax
          push rax
          push rax
          ; 451 push integer
          mov rax, 8
          push rax
          ; 451 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 451 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 451 push string
          mov rax, s_309
          push rax
          ; 451 push string
          mov rax, s_317
          push rax
          ; 451 push integer
          mov rax, 451
          push rax
          ; 451 push string
          mov rax, s_328
          push rax
          ; 451 push boolean
          mov rax, 1
          push rax
          ; 451 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 451 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000152
          ; 452 push integer
          mov rax, 39
          push rax
          ; 453 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 453 push integer
          mov rax, 16
          push rax
          ; 453 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 453 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 454 push string
          mov rax, s_317
          push rax
          ; 454 push integer
          mov rax, 454
          push rax
          ; 454 push string
          mov rax, s_328
          push rax
          ; 454 push boolean
          mov rax, 1
          push rax
          ; 454 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 454 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 455 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 455 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 455 push string
          mov rax, s_317
          push rax
          ; 455 push integer
          mov rax, 455
          push rax
          ; 455 push string
          mov rax, s_328
          push rax
          ; 455 push boolean
          mov rax, 1
          push rax
          ; 455 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 455 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 455 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 457 duplicate
          pop rax
          push rax
          push rax
          ; 457 push integer
          mov rax, 16
          push rax
          ; 457 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 457 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 457 push string
          mov rax, s_317
          push rax
          ; 457 push integer
          mov rax, 457
          push rax
          ; 457 push string
          mov rax, s_328
          push rax
          ; 457 push boolean
          mov rax, 1
          push rax
          ; 457 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 457 push integer
          mov rax, 4
          push rax
          ; 457 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 457 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000153
          ; 458 duplicate
          pop rax
          push rax
          push rax
          ; 458 push integer
          mov rax, 16
          push rax
          ; 458 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 458 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 458 push string
          mov rax, s_353
          push rax
          ; 458 push string
          mov rax, s_317
          push rax
          ; 458 push integer
          mov rax, 458
          push rax
          ; 458 push string
          mov rax, s_328
          push rax
          ; 458 push boolean
          mov rax, 1
          push rax
          ; 458 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 458 jump
          jmp end_0x0000000000000153
          ; 458 label
if_0x0000000000000153: 
          ; 458 label
end_0x0000000000000153: 
          ; 460 duplicate
          pop rax
          push rax
          push rax
          ; 460 push integer
          mov rax, 16
          push rax
          ; 460 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 460 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 460 push string
          mov rax, s_317
          push rax
          ; 460 push integer
          mov rax, 460
          push rax
          ; 460 push string
          mov rax, s_328
          push rax
          ; 460 push boolean
          mov rax, 1
          push rax
          ; 460 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 460 push integer
          mov rax, 3
          push rax
          ; 460 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 460 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000154
          ; 461 duplicate
          pop rax
          push rax
          push rax
          ; 461 push integer
          mov rax, 16
          push rax
          ; 461 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 461 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 461 push string
          mov rax, s_356
          push rax
          ; 461 push string
          mov rax, s_317
          push rax
          ; 461 push integer
          mov rax, 461
          push rax
          ; 461 push string
          mov rax, s_328
          push rax
          ; 461 push boolean
          mov rax, 1
          push rax
          ; 461 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 461 jump
          jmp end_0x0000000000000154
          ; 461 label
if_0x0000000000000154: 
          ; 461 label
end_0x0000000000000154: 
          ; 451 jump
          jmp end_0x0000000000000133
          ; 451 label
elif_0x0000000000000152: 
          ; 462 duplicate
          pop rax
          push rax
          push rax
          ; 462 push integer
          mov rax, 8
          push rax
          ; 462 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 462 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 462 push string
          mov rax, s_310
          push rax
          ; 462 push string
          mov rax, s_317
          push rax
          ; 462 push integer
          mov rax, 462
          push rax
          ; 462 push string
          mov rax, s_328
          push rax
          ; 462 push boolean
          mov rax, 1
          push rax
          ; 462 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 462 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000155
          ; 463 push integer
          mov rax, 40
          push rax
          ; 464 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 464 push integer
          mov rax, 16
          push rax
          ; 464 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 464 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 465 push string
          mov rax, s_317
          push rax
          ; 465 push integer
          mov rax, 465
          push rax
          ; 465 push string
          mov rax, s_328
          push rax
          ; 465 push boolean
          mov rax, 1
          push rax
          ; 465 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 465 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 466 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 466 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 466 push string
          mov rax, s_317
          push rax
          ; 466 push integer
          mov rax, 466
          push rax
          ; 466 push string
          mov rax, s_328
          push rax
          ; 466 push boolean
          mov rax, 1
          push rax
          ; 466 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 466 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 466 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 468 duplicate
          pop rax
          push rax
          push rax
          ; 468 push integer
          mov rax, 16
          push rax
          ; 468 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 468 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 468 push string
          mov rax, s_317
          push rax
          ; 468 push integer
          mov rax, 468
          push rax
          ; 468 push string
          mov rax, s_328
          push rax
          ; 468 push boolean
          mov rax, 1
          push rax
          ; 468 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 468 push integer
          mov rax, 4
          push rax
          ; 468 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 468 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000156
          ; 469 duplicate
          pop rax
          push rax
          push rax
          ; 469 push integer
          mov rax, 16
          push rax
          ; 469 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 469 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 469 push string
          mov rax, s_353
          push rax
          ; 469 push string
          mov rax, s_317
          push rax
          ; 469 push integer
          mov rax, 469
          push rax
          ; 469 push string
          mov rax, s_328
          push rax
          ; 469 push boolean
          mov rax, 1
          push rax
          ; 469 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 469 jump
          jmp end_0x0000000000000156
          ; 469 label
if_0x0000000000000156: 
          ; 469 label
end_0x0000000000000156: 
          ; 471 duplicate
          pop rax
          push rax
          push rax
          ; 471 push integer
          mov rax, 16
          push rax
          ; 471 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 471 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 471 push string
          mov rax, s_317
          push rax
          ; 471 push integer
          mov rax, 471
          push rax
          ; 471 push string
          mov rax, s_328
          push rax
          ; 471 push boolean
          mov rax, 1
          push rax
          ; 471 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 471 push integer
          mov rax, 4
          push rax
          ; 471 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 471 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000157
          ; 472 duplicate
          pop rax
          push rax
          push rax
          ; 472 push integer
          mov rax, 16
          push rax
          ; 472 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 472 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 472 push string
          mov rax, s_353
          push rax
          ; 472 push string
          mov rax, s_317
          push rax
          ; 472 push integer
          mov rax, 472
          push rax
          ; 472 push string
          mov rax, s_328
          push rax
          ; 472 push boolean
          mov rax, 1
          push rax
          ; 472 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 472 jump
          jmp end_0x0000000000000157
          ; 472 label
if_0x0000000000000157: 
          ; 472 label
end_0x0000000000000157: 
          ; 462 jump
          jmp end_0x0000000000000133
          ; 462 label
elif_0x0000000000000155: 
          ; 473 duplicate
          pop rax
          push rax
          push rax
          ; 473 push integer
          mov rax, 8
          push rax
          ; 473 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 473 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 473 push string
          mov rax, s_301
          push rax
          ; 473 push string
          mov rax, s_317
          push rax
          ; 473 push integer
          mov rax, 473
          push rax
          ; 473 push string
          mov rax, s_328
          push rax
          ; 473 push boolean
          mov rax, 1
          push rax
          ; 473 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 473 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000158
          ; 474 push integer
          mov rax, 13
          push rax
          ; 475 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 475 push integer
          mov rax, 16
          push rax
          ; 475 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 475 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 476 push string
          mov rax, s_317
          push rax
          ; 476 push integer
          mov rax, 476
          push rax
          ; 476 push string
          mov rax, s_328
          push rax
          ; 476 push boolean
          mov rax, 1
          push rax
          ; 476 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 476 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 477 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 477 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 477 push string
          mov rax, s_317
          push rax
          ; 477 push integer
          mov rax, 477
          push rax
          ; 477 push string
          mov rax, s_328
          push rax
          ; 477 push boolean
          mov rax, 1
          push rax
          ; 477 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 477 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 477 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 479 duplicate
          pop rax
          push rax
          push rax
          ; 479 push integer
          mov rax, 16
          push rax
          ; 479 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 479 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 479 push string
          mov rax, s_317
          push rax
          ; 479 push integer
          mov rax, 479
          push rax
          ; 479 push string
          mov rax, s_328
          push rax
          ; 479 push boolean
          mov rax, 1
          push rax
          ; 479 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 480 duplicate
          pop rax
          push rax
          push rax
          ; 480 push string
          mov rax, s_317
          push rax
          ; 480 push integer
          mov rax, 480
          push rax
          ; 480 push string
          mov rax, s_328
          push rax
          ; 480 push boolean
          mov rax, 1
          push rax
          ; 480 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 480 push string
          mov rax, s_317
          push rax
          ; 480 push integer
          mov rax, 480
          push rax
          ; 480 push string
          mov rax, s_328
          push rax
          ; 480 push boolean
          mov rax, 1
          push rax
          ; 480 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 473 jump
          jmp end_0x0000000000000133
          ; 473 label
elif_0x0000000000000158: 
          ; 481 duplicate
          pop rax
          push rax
          push rax
          ; 481 push integer
          mov rax, 8
          push rax
          ; 481 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 481 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 481 push string
          mov rax, s_175
          push rax
          ; 481 push string
          mov rax, s_317
          push rax
          ; 481 push integer
          mov rax, 481
          push rax
          ; 481 push string
          mov rax, s_328
          push rax
          ; 481 push boolean
          mov rax, 1
          push rax
          ; 481 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 481 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000159
          ; 482 push integer
          mov rax, 12
          push rax
          ; 483 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 483 push integer
          mov rax, 16
          push rax
          ; 483 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 483 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 484 push string
          mov rax, s_317
          push rax
          ; 484 push integer
          mov rax, 484
          push rax
          ; 484 push string
          mov rax, s_328
          push rax
          ; 484 push boolean
          mov rax, 1
          push rax
          ; 484 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 484 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 485 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 485 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 485 push string
          mov rax, s_317
          push rax
          ; 485 push integer
          mov rax, 485
          push rax
          ; 485 push string
          mov rax, s_328
          push rax
          ; 485 push boolean
          mov rax, 1
          push rax
          ; 485 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 485 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 485 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 487 duplicate
          pop rax
          push rax
          push rax
          ; 487 push integer
          mov rax, 16
          push rax
          ; 487 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 487 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 487 push string
          mov rax, s_317
          push rax
          ; 487 push integer
          mov rax, 487
          push rax
          ; 487 push string
          mov rax, s_328
          push rax
          ; 487 push boolean
          mov rax, 1
          push rax
          ; 487 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 487 drop
          pop rax
          ; 481 jump
          jmp end_0x0000000000000133
          ; 481 label
elif_0x0000000000000159: 
          ; 488 duplicate
          pop rax
          push rax
          push rax
          ; 488 push integer
          mov rax, 8
          push rax
          ; 488 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 488 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 488 push string
          mov rax, s_199
          push rax
          ; 488 push string
          mov rax, s_317
          push rax
          ; 488 push integer
          mov rax, 488
          push rax
          ; 488 push string
          mov rax, s_328
          push rax
          ; 488 push boolean
          mov rax, 1
          push rax
          ; 488 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 488 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000015a
          ; 489 push integer
          mov rax, 36
          push rax
          ; 490 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 490 push integer
          mov rax, 16
          push rax
          ; 490 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 490 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 491 push string
          mov rax, s_317
          push rax
          ; 491 push integer
          mov rax, 491
          push rax
          ; 491 push string
          mov rax, s_328
          push rax
          ; 491 push boolean
          mov rax, 1
          push rax
          ; 491 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 491 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 492 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 492 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 492 push string
          mov rax, s_317
          push rax
          ; 492 push integer
          mov rax, 492
          push rax
          ; 492 push string
          mov rax, s_328
          push rax
          ; 492 push boolean
          mov rax, 1
          push rax
          ; 492 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 492 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 492 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 494 duplicate
          pop rax
          push rax
          push rax
          ; 494 push integer
          mov rax, 16
          push rax
          ; 494 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 494 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 494 push string
          mov rax, s_317
          push rax
          ; 494 push integer
          mov rax, 494
          push rax
          ; 494 push string
          mov rax, s_328
          push rax
          ; 494 push boolean
          mov rax, 1
          push rax
          ; 494 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 495 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 495 duplicate
          pop rax
          push rax
          push rax
          ; 495 push integer
          mov rax, 16
          push rax
          ; 495 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 495 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 495 push string
          mov rax, s_317
          push rax
          ; 495 push integer
          mov rax, 495
          push rax
          ; 495 push string
          mov rax, s_328
          push rax
          ; 495 push boolean
          mov rax, 1
          push rax
          ; 495 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 496 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 496 duplicate
          pop rax
          push rax
          push rax
          ; 496 push integer
          mov rax, 16
          push rax
          ; 496 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 496 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 496 push string
          mov rax, s_317
          push rax
          ; 496 push integer
          mov rax, 496
          push rax
          ; 496 push string
          mov rax, s_328
          push rax
          ; 496 push boolean
          mov rax, 1
          push rax
          ; 496 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 497 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 497 push string
          mov rax, s_317
          push rax
          ; 497 push integer
          mov rax, 497
          push rax
          ; 497 push string
          mov rax, s_328
          push rax
          ; 497 push boolean
          mov rax, 1
          push rax
          ; 497 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 497 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 497 push string
          mov rax, s_317
          push rax
          ; 497 push integer
          mov rax, 497
          push rax
          ; 497 push string
          mov rax, s_328
          push rax
          ; 497 push boolean
          mov rax, 1
          push rax
          ; 497 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 497 push string
          mov rax, s_317
          push rax
          ; 497 push integer
          mov rax, 497
          push rax
          ; 497 push string
          mov rax, s_328
          push rax
          ; 497 push boolean
          mov rax, 1
          push rax
          ; 497 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 488 jump
          jmp end_0x0000000000000133
          ; 488 label
elif_0x000000000000015a: 
          ; 498 duplicate
          pop rax
          push rax
          push rax
          ; 498 push integer
          mov rax, 8
          push rax
          ; 498 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 498 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 498 push string
          mov rax, s_207
          push rax
          ; 498 push string
          mov rax, s_317
          push rax
          ; 498 push integer
          mov rax, 498
          push rax
          ; 498 push string
          mov rax, s_328
          push rax
          ; 498 push boolean
          mov rax, 1
          push rax
          ; 498 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 498 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000015b
          ; 499 push integer
          mov rax, 44
          push rax
          ; 500 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 500 push integer
          mov rax, 16
          push rax
          ; 500 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 500 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 501 push string
          mov rax, s_317
          push rax
          ; 501 push integer
          mov rax, 501
          push rax
          ; 501 push string
          mov rax, s_328
          push rax
          ; 501 push boolean
          mov rax, 1
          push rax
          ; 501 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 501 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 502 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 502 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 502 push string
          mov rax, s_317
          push rax
          ; 502 push integer
          mov rax, 502
          push rax
          ; 502 push string
          mov rax, s_328
          push rax
          ; 502 push boolean
          mov rax, 1
          push rax
          ; 502 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 502 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 502 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 504 duplicate
          pop rax
          push rax
          push rax
          ; 504 push integer
          mov rax, 16
          push rax
          ; 504 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 504 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 504 push string
          mov rax, s_317
          push rax
          ; 504 push integer
          mov rax, 504
          push rax
          ; 504 push string
          mov rax, s_328
          push rax
          ; 504 push boolean
          mov rax, 1
          push rax
          ; 504 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 505 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 505 push integer
          mov rax, 16
          push rax
          ; 505 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 505 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 505 push string
          mov rax, s_317
          push rax
          ; 505 push integer
          mov rax, 505
          push rax
          ; 505 push string
          mov rax, s_328
          push rax
          ; 505 push boolean
          mov rax, 1
          push rax
          ; 505 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 506 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 506 push string
          mov rax, s_317
          push rax
          ; 506 push integer
          mov rax, 506
          push rax
          ; 506 push string
          mov rax, s_328
          push rax
          ; 506 push boolean
          mov rax, 1
          push rax
          ; 506 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 506 push string
          mov rax, s_317
          push rax
          ; 506 push integer
          mov rax, 506
          push rax
          ; 506 push string
          mov rax, s_328
          push rax
          ; 506 push boolean
          mov rax, 1
          push rax
          ; 506 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 498 jump
          jmp end_0x0000000000000133
          ; 498 label
elif_0x000000000000015b: 
          ; 507 duplicate
          pop rax
          push rax
          push rax
          ; 507 push integer
          mov rax, 8
          push rax
          ; 507 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 507 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 507 push string
          mov rax, s_191
          push rax
          ; 507 push string
          mov rax, s_317
          push rax
          ; 507 push integer
          mov rax, 507
          push rax
          ; 507 push string
          mov rax, s_328
          push rax
          ; 507 push boolean
          mov rax, 1
          push rax
          ; 507 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 507 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000015c
          ; 508 push integer
          mov rax, 28
          push rax
          ; 509 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 509 push integer
          mov rax, 16
          push rax
          ; 509 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 509 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 510 push string
          mov rax, s_317
          push rax
          ; 510 push integer
          mov rax, 510
          push rax
          ; 510 push string
          mov rax, s_328
          push rax
          ; 510 push boolean
          mov rax, 1
          push rax
          ; 510 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 510 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 511 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 511 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 511 push string
          mov rax, s_317
          push rax
          ; 511 push integer
          mov rax, 511
          push rax
          ; 511 push string
          mov rax, s_328
          push rax
          ; 511 push boolean
          mov rax, 1
          push rax
          ; 511 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 511 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 511 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 513 duplicate
          pop rax
          push rax
          push rax
          ; 513 push integer
          mov rax, 16
          push rax
          ; 513 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 513 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 513 push string
          mov rax, s_317
          push rax
          ; 513 push integer
          mov rax, 513
          push rax
          ; 513 push string
          mov rax, s_328
          push rax
          ; 513 push boolean
          mov rax, 1
          push rax
          ; 513 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 514 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 514 push integer
          mov rax, 16
          push rax
          ; 514 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 514 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 514 push string
          mov rax, s_317
          push rax
          ; 514 push integer
          mov rax, 514
          push rax
          ; 514 push string
          mov rax, s_328
          push rax
          ; 514 push boolean
          mov rax, 1
          push rax
          ; 514 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 515 duplicate
          pop rax
          push rax
          push rax
          ; 515 push string
          mov rax, s_317
          push rax
          ; 515 push integer
          mov rax, 515
          push rax
          ; 515 push string
          mov rax, s_328
          push rax
          ; 515 push boolean
          mov rax, 1
          push rax
          ; 515 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 515 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 515 push string
          mov rax, s_317
          push rax
          ; 515 push integer
          mov rax, 515
          push rax
          ; 515 push string
          mov rax, s_328
          push rax
          ; 515 push boolean
          mov rax, 1
          push rax
          ; 515 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 515 push string
          mov rax, s_317
          push rax
          ; 515 push integer
          mov rax, 515
          push rax
          ; 515 push string
          mov rax, s_328
          push rax
          ; 515 push boolean
          mov rax, 1
          push rax
          ; 515 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 507 jump
          jmp end_0x0000000000000133
          ; 507 label
elif_0x000000000000015c: 
          ; 516 duplicate
          pop rax
          push rax
          push rax
          ; 516 push integer
          mov rax, 8
          push rax
          ; 516 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 516 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 516 push string
          mov rax, s_313
          push rax
          ; 516 push string
          mov rax, s_317
          push rax
          ; 516 push integer
          mov rax, 516
          push rax
          ; 516 push string
          mov rax, s_328
          push rax
          ; 516 push boolean
          mov rax, 1
          push rax
          ; 516 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 516 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000015d
          ; 517 drop
          pop rax
          ; 518 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 518 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 518 push string
          mov rax, s_317
          push rax
          ; 518 push integer
          mov rax, 518
          push rax
          ; 518 push string
          mov rax, s_328
          push rax
          ; 518 push boolean
          mov rax, 1
          push rax
          ; 518 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 519 duplicate
          pop rax
          push rax
          push rax
          ; 519 push integer
          mov rax, 0
          push rax
          ; 519 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 519 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 519 push integer
          mov rax, 11
          push rax
          ; 519 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 519 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000015e
          ; 520 duplicate
          pop rax
          push rax
          push rax
          ; 520 push integer
          mov rax, 16
          push rax
          ; 520 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 520 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 521 push string
          mov rax, s_357
          push rax
          ; 522 push string
          mov rax, s_317
          push rax
          ; 522 push integer
          mov rax, 522
          push rax
          ; 522 push string
          mov rax, s_328
          push rax
          ; 522 push boolean
          mov rax, 1
          push rax
          ; 522 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 520 jump
          jmp end_0x000000000000015e
          ; 520 label
if_0x000000000000015e: 
          ; 520 label
end_0x000000000000015e: 
          ; 524 duplicate
          pop rax
          push rax
          push rax
          ; 524 push integer
          mov rax, 8
          push rax
          ; 524 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 524 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 525 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 525 push integer
          mov rax, 16
          push rax
          ; 525 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 525 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 526 push integer
          mov rax, 15
          push rax
          ; 526 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 526 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 527 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 527 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 527 push string
          mov rax, s_317
          push rax
          ; 527 push integer
          mov rax, 527
          push rax
          ; 527 push string
          mov rax, s_328
          push rax
          ; 527 push boolean
          mov rax, 1
          push rax
          ; 527 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 527 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 527 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 529 drop
          pop rax
          ; 530 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 530 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 530 push string
          mov rax, s_317
          push rax
          ; 530 push integer
          mov rax, 530
          push rax
          ; 530 push string
          mov rax, s_328
          push rax
          ; 530 push boolean
          mov rax, 1
          push rax
          ; 530 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 531 duplicate
          pop rax
          push rax
          push rax
          ; 531 push integer
          mov rax, 0
          push rax
          ; 531 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 531 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 531 push integer
          mov rax, 14
          push rax
          ; 531 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 531 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000015f
          ; 532 duplicate
          pop rax
          push rax
          push rax
          ; 532 push integer
          mov rax, 16
          push rax
          ; 532 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 532 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 533 push string
          mov rax, s_358
          push rax
          ; 534 push string
          mov rax, s_317
          push rax
          ; 534 push integer
          mov rax, 534
          push rax
          ; 534 push string
          mov rax, s_328
          push rax
          ; 534 push boolean
          mov rax, 1
          push rax
          ; 534 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 532 jump
          jmp end_0x000000000000015f
          ; 532 label
if_0x000000000000015f: 
          ; 532 label
end_0x000000000000015f: 
          ; 536 duplicate
          pop rax
          push rax
          push rax
          ; 536 push integer
          mov rax, 8
          push rax
          ; 536 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 536 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 536 push string
          mov rax, s_227
          push rax
          ; 536 push string
          mov rax, s_317
          push rax
          ; 536 push integer
          mov rax, 536
          push rax
          ; 536 push string
          mov rax, s_328
          push rax
          ; 536 push boolean
          mov rax, 1
          push rax
          ; 536 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 536 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000160
          ; 537 push integer
          mov rax, 1
          push rax
          ; 537 push string
          mov rax, s_317
          push rax
          ; 537 push integer
          mov rax, 537
          push rax
          ; 537 push string
          mov rax, s_328
          push rax
          ; 537 push boolean
          mov rax, 1
          push rax
          ; 537 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 537 jump
          jmp end_0x0000000000000160
          ; 537 label
if_0x0000000000000160: 
          ; 538 duplicate
          pop rax
          push rax
          push rax
          ; 538 push integer
          mov rax, 8
          push rax
          ; 538 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 538 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 538 push string
          mov rax, s_229
          push rax
          ; 538 push string
          mov rax, s_317
          push rax
          ; 538 push integer
          mov rax, 538
          push rax
          ; 538 push string
          mov rax, s_328
          push rax
          ; 538 push boolean
          mov rax, 1
          push rax
          ; 538 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 538 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000161
          ; 539 push integer
          mov rax, 2
          push rax
          ; 539 push string
          mov rax, s_317
          push rax
          ; 539 push integer
          mov rax, 539
          push rax
          ; 539 push string
          mov rax, s_328
          push rax
          ; 539 push boolean
          mov rax, 1
          push rax
          ; 539 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 538 jump
          jmp end_0x0000000000000160
          ; 538 label
elif_0x0000000000000161: 
          ; 540 duplicate
          pop rax
          push rax
          push rax
          ; 540 push integer
          mov rax, 8
          push rax
          ; 540 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 540 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 540 push string
          mov rax, s_230
          push rax
          ; 540 push string
          mov rax, s_317
          push rax
          ; 540 push integer
          mov rax, 540
          push rax
          ; 540 push string
          mov rax, s_328
          push rax
          ; 540 push boolean
          mov rax, 1
          push rax
          ; 540 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 540 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000162
          ; 541 push integer
          mov rax, 3
          push rax
          ; 541 push string
          mov rax, s_317
          push rax
          ; 541 push integer
          mov rax, 541
          push rax
          ; 541 push string
          mov rax, s_328
          push rax
          ; 541 push boolean
          mov rax, 1
          push rax
          ; 541 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 540 jump
          jmp end_0x0000000000000160
          ; 540 label
elif_0x0000000000000162: 
          ; 542 duplicate
          pop rax
          push rax
          push rax
          ; 542 push integer
          mov rax, 8
          push rax
          ; 542 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 542 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 542 push string
          mov rax, s_231
          push rax
          ; 542 push string
          mov rax, s_317
          push rax
          ; 542 push integer
          mov rax, 542
          push rax
          ; 542 push string
          mov rax, s_328
          push rax
          ; 542 push boolean
          mov rax, 1
          push rax
          ; 542 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 542 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000163
          ; 543 push integer
          mov rax, 4
          push rax
          ; 543 push string
          mov rax, s_317
          push rax
          ; 543 push integer
          mov rax, 543
          push rax
          ; 543 push string
          mov rax, s_328
          push rax
          ; 543 push boolean
          mov rax, 1
          push rax
          ; 543 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 542 jump
          jmp end_0x0000000000000160
          ; 542 label
elif_0x0000000000000163: 
          ; 545 push string
          mov rax, s_359
          push rax
          ; 545 push string
          mov rax, s_317
          push rax
          ; 545 push integer
          mov rax, 545
          push rax
          ; 545 push string
          mov rax, s_328
          push rax
          ; 545 push boolean
          mov rax, 1
          push rax
          ; 545 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 545 label
end_0x0000000000000160: 
          ; 516 jump
          jmp end_0x0000000000000133
          ; 516 label
elif_0x000000000000015d: 
          ; 546 duplicate
          pop rax
          push rax
          push rax
          ; 546 push integer
          mov rax, 8
          push rax
          ; 546 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 546 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 546 push string
          mov rax, s_314
          push rax
          ; 546 push string
          mov rax, s_317
          push rax
          ; 546 push integer
          mov rax, 546
          push rax
          ; 546 push string
          mov rax, s_328
          push rax
          ; 546 push boolean
          mov rax, 1
          push rax
          ; 546 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 546 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000164
          ; 547 push integer
          mov rax, 34
          push rax
          ; 548 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 548 push integer
          mov rax, 16
          push rax
          ; 548 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 548 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 549 push string
          mov rax, s_317
          push rax
          ; 549 push integer
          mov rax, 549
          push rax
          ; 549 push string
          mov rax, s_328
          push rax
          ; 549 push boolean
          mov rax, 1
          push rax
          ; 549 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 549 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 550 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 550 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 550 push string
          mov rax, s_317
          push rax
          ; 550 push integer
          mov rax, 550
          push rax
          ; 550 push string
          mov rax, s_328
          push rax
          ; 550 push boolean
          mov rax, 1
          push rax
          ; 550 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 550 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 550 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 546 jump
          jmp end_0x0000000000000133
          ; 546 label
elif_0x0000000000000164: 
          ; 551 duplicate
          pop rax
          push rax
          push rax
          ; 551 push integer
          mov rax, 8
          push rax
          ; 551 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 551 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 551 push string
          mov rax, s_208
          push rax
          ; 551 push string
          mov rax, s_317
          push rax
          ; 551 push integer
          mov rax, 551
          push rax
          ; 551 push string
          mov rax, s_328
          push rax
          ; 551 push boolean
          mov rax, 1
          push rax
          ; 551 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 551 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000165
          ; 552 drop
          pop rax
          ; 553 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 553 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 553 push string
          mov rax, s_317
          push rax
          ; 553 push integer
          mov rax, 553
          push rax
          ; 553 push string
          mov rax, s_328
          push rax
          ; 553 push boolean
          mov rax, 1
          push rax
          ; 553 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 554 duplicate
          pop rax
          push rax
          push rax
          ; 554 push integer
          mov rax, 0
          push rax
          ; 554 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 554 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 554 push integer
          mov rax, 11
          push rax
          ; 554 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 554 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000166
          ; 555 duplicate
          pop rax
          push rax
          push rax
          ; 555 push integer
          mov rax, 16
          push rax
          ; 555 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 555 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 556 push string
          mov rax, s_360
          push rax
          ; 557 push string
          mov rax, s_317
          push rax
          ; 557 push integer
          mov rax, 557
          push rax
          ; 557 push string
          mov rax, s_328
          push rax
          ; 557 push boolean
          mov rax, 1
          push rax
          ; 557 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 555 jump
          jmp end_0x0000000000000166
          ; 555 label
if_0x0000000000000166: 
          ; 555 label
end_0x0000000000000166: 
          ; 559 duplicate
          pop rax
          push rax
          push rax
          ; 559 duplicate
          pop rax
          push rax
          push rax
          ; 559 push integer
          mov rax, 8
          push rax
          ; 559 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 559 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 560 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 560 push integer
          mov rax, 16
          push rax
          ; 560 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 560 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 561 push integer
          mov rax, 45
          push rax
          ; 562 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 562 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 563 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 563 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 563 push string
          mov rax, s_317
          push rax
          ; 563 push integer
          mov rax, 563
          push rax
          ; 563 push string
          mov rax, s_328
          push rax
          ; 563 push boolean
          mov rax, 1
          push rax
          ; 563 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 563 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 563 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 565 duplicate
          pop rax
          push rax
          push rax
          ; 565 push integer
          mov rax, 8
          push rax
          ; 565 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 565 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 565 push string
          mov rax, s_317
          push rax
          ; 565 push integer
          mov rax, 565
          push rax
          ; 565 push string
          mov rax, s_328
          push rax
          ; 565 push boolean
          mov rax, 1
          push rax
          ; 565 call
          call fn_stoi
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 565 push integer
          mov rax, 1
          push rax
          ; 565 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 566 label
while_0x0000000000000034: 
          ; 566 duplicate
          pop rax
          push rax
          push rax
          ; 566 push integer
          mov rax, 0
          push rax
          ; 566 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 566 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000034_end
          ; 567 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 567 push integer
          mov rax, 16
          push rax
          ; 567 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 567 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 567 push string
          mov rax, s_317
          push rax
          ; 567 push integer
          mov rax, 567
          push rax
          ; 567 push string
          mov rax, s_328
          push rax
          ; 567 push boolean
          mov rax, 1
          push rax
          ; 567 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 567 drop
          pop rax
          ; 568 push integer
          mov rax, 1
          push rax
          ; 568 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 566 end of while-loop
          jmp while_0x0000000000000034
while_0x0000000000000034_end: 
          ; 569 drop
          pop rax
          ; 570 push integer
          mov rax, 3
          push rax
          ; 570 push string
          mov rax, s_317
          push rax
          ; 570 push integer
          mov rax, 570
          push rax
          ; 570 push string
          mov rax, s_328
          push rax
          ; 570 push boolean
          mov rax, 1
          push rax
          ; 570 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 551 jump
          jmp end_0x0000000000000133
          ; 551 label
elif_0x0000000000000165: 
          ; 571 duplicate
          pop rax
          push rax
          push rax
          ; 571 push integer
          mov rax, 8
          push rax
          ; 571 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 571 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 571 push string
          mov rax, s_311
          push rax
          ; 571 push string
          mov rax, s_317
          push rax
          ; 571 push integer
          mov rax, 571
          push rax
          ; 571 push string
          mov rax, s_328
          push rax
          ; 571 push boolean
          mov rax, 1
          push rax
          ; 571 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 571 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000167
          ; 572 drop
          pop rax
          ; 573 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 573 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 573 push string
          mov rax, s_317
          push rax
          ; 573 push integer
          mov rax, 573
          push rax
          ; 573 push string
          mov rax, s_328
          push rax
          ; 573 push boolean
          mov rax, 1
          push rax
          ; 573 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 574 duplicate
          pop rax
          push rax
          push rax
          ; 574 push integer
          mov rax, 0
          push rax
          ; 574 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 574 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 574 push integer
          mov rax, 10
          push rax
          ; 574 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 574 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000168
          ; 575 duplicate
          pop rax
          push rax
          push rax
          ; 575 push integer
          mov rax, 16
          push rax
          ; 575 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 575 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 576 push string
          mov rax, s_361
          push rax
          ; 577 push string
          mov rax, s_317
          push rax
          ; 577 push integer
          mov rax, 577
          push rax
          ; 577 push string
          mov rax, s_328
          push rax
          ; 577 push boolean
          mov rax, 1
          push rax
          ; 577 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 575 jump
          jmp end_0x0000000000000168
          ; 575 label
if_0x0000000000000168: 
          ; 575 label
end_0x0000000000000168: 
          ; 579 duplicate
          pop rax
          push rax
          push rax
          ; 579 push integer
          mov rax, 8
          push rax
          ; 579 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 579 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 580 duplicate
          pop rax
          push rax
          push rax
          ; 580 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 580 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 580 push string
          mov rax, s_317
          push rax
          ; 580 push integer
          mov rax, 580
          push rax
          ; 580 push string
          mov rax, s_328
          push rax
          ; 580 push boolean
          mov rax, 1
          push rax
          ; 580 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 580 push string
          mov rax, s_317
          push rax
          ; 580 push integer
          mov rax, 580
          push rax
          ; 580 push string
          mov rax, s_328
          push rax
          ; 580 push boolean
          mov rax, 1
          push rax
          ; 580 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 580 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 580 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000169
          ; 581 push string
          mov rax, s_362
          push rax
          ; 581 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 581 push string
          mov rax, s_317
          push rax
          ; 581 push integer
          mov rax, 581
          push rax
          ; 581 push string
          mov rax, s_328
          push rax
          ; 581 push boolean
          mov rax, 1
          push rax
          ; 581 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 581 push string
          mov rax, s_317
          push rax
          ; 581 push integer
          mov rax, 581
          push rax
          ; 581 push string
          mov rax, s_328
          push rax
          ; 581 push boolean
          mov rax, 1
          push rax
          ; 581 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 581 jump
          jmp end_0x0000000000000169
          ; 581 label
if_0x0000000000000169: 
          ; 581 label
end_0x0000000000000169: 
          ; 583 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 583 push integer
          mov rax, 16
          push rax
          ; 583 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 583 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 584 push integer
          mov rax, 33
          push rax
          ; 585 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 585 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 586 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 586 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 586 push string
          mov rax, s_317
          push rax
          ; 586 push integer
          mov rax, 586
          push rax
          ; 586 push string
          mov rax, s_328
          push rax
          ; 586 push boolean
          mov rax, 1
          push rax
          ; 586 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 586 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 586 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 588 push integer
          mov rax, 4
          push rax
          ; 588 push string
          mov rax, s_317
          push rax
          ; 588 push integer
          mov rax, 588
          push rax
          ; 588 push string
          mov rax, s_328
          push rax
          ; 588 push boolean
          mov rax, 1
          push rax
          ; 588 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 571 jump
          jmp end_0x0000000000000133
          ; 571 label
elif_0x0000000000000167: 
          ; 589 duplicate
          pop rax
          push rax
          push rax
          ; 589 push integer
          mov rax, 8
          push rax
          ; 589 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 589 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 589 push string
          mov rax, s_312
          push rax
          ; 589 push string
          mov rax, s_317
          push rax
          ; 589 push integer
          mov rax, 589
          push rax
          ; 589 push string
          mov rax, s_328
          push rax
          ; 589 push boolean
          mov rax, 1
          push rax
          ; 589 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 589 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000016a
          ; 591 push integer
          mov rax, 25
          push rax
          ; 591 push string
          mov rax, s_317
          push rax
          ; 591 push integer
          mov rax, 591
          push rax
          ; 591 push string
          mov rax, s_328
          push rax
          ; 591 push boolean
          mov rax, 1
          push rax
          ; 591 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 592 push string
          mov rax, s_363
          push rax
          ; 592 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 592 push integer
          mov rax, 6
          push rax
          ; 592 push string
          mov rax, s_317
          push rax
          ; 592 push integer
          mov rax, 592
          push rax
          ; 592 push string
          mov rax, s_328
          push rax
          ; 592 push boolean
          mov rax, 1
          push rax
          ; 592 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 593 get pointer to buffer
          mov rax, buf__while_index
          push rax
          ; 593 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 593 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 593 push integer
          mov rax, 6
          push rax
          ; 593 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 593 push string
          mov rax, s_317
          push rax
          ; 593 push integer
          mov rax, 593
          push rax
          ; 593 push string
          mov rax, s_328
          push rax
          ; 593 push boolean
          mov rax, 1
          push rax
          ; 593 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 594 get pointer to buffer
          mov rax, buf__while_index
          push rax
          ; 594 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 594 push integer
          mov rax, 1
          push rax
          ; 594 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 594 get pointer to buffer
          mov rax, buf__while_index
          push rax
          ; 594 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 597 duplicate
          pop rax
          push rax
          push rax
          ; 598 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 598 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 599 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 599 push integer
          mov rax, 16
          push rax
          ; 599 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 599 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 600 push integer
          mov rax, 25
          push rax
          ; 600 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 600 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 602 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 602 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 602 push string
          mov rax, s_317
          push rax
          ; 602 push integer
          mov rax, 602
          push rax
          ; 602 push string
          mov rax, s_328
          push rax
          ; 602 push boolean
          mov rax, 1
          push rax
          ; 602 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 602 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 602 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 602 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 605 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 605 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 605 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 605 push integer
          mov rax, 8
          push rax
          ; 605 push string
          mov rax, s_317
          push rax
          ; 605 push integer
          mov rax, 605
          push rax
          ; 605 push string
          mov rax, s_328
          push rax
          ; 605 push boolean
          mov rax, 1
          push rax
          ; 605 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 605 push integer
          mov rax, 8
          push rax
          ; 605 push string
          mov rax, s_317
          push rax
          ; 605 push integer
          mov rax, 605
          push rax
          ; 605 push string
          mov rax, s_328
          push rax
          ; 605 push boolean
          mov rax, 1
          push rax
          ; 605 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 605 push integer
          mov rax, 3
          push rax
          ; 605 push string
          mov rax, s_317
          push rax
          ; 605 push integer
          mov rax, 605
          push rax
          ; 605 push string
          mov rax, s_328
          push rax
          ; 605 push boolean
          mov rax, 1
          push rax
          ; 605 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 606 drop
          pop rax
          ; 607 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 607 push integer
          mov rax, 16
          push rax
          ; 607 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 607 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 607 push string
          mov rax, s_317
          push rax
          ; 607 push integer
          mov rax, 607
          push rax
          ; 607 push string
          mov rax, s_328
          push rax
          ; 607 push boolean
          mov rax, 1
          push rax
          ; 607 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 607 push integer
          mov rax, 1
          push rax
          ; 607 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 607 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000016b
          ; 608 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 608 push integer
          mov rax, 16
          push rax
          ; 608 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 608 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 609 push string
          mov rax, s_364
          push rax
          ; 609 push string
          mov rax, s_317
          push rax
          ; 609 push integer
          mov rax, 609
          push rax
          ; 609 push string
          mov rax, s_328
          push rax
          ; 609 push boolean
          mov rax, 1
          push rax
          ; 609 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 608 jump
          jmp end_0x000000000000016b
          ; 608 label
if_0x000000000000016b: 
          ; 608 label
end_0x000000000000016b: 
          ; 612 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 612 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 612 push string
          mov rax, s_317
          push rax
          ; 612 push integer
          mov rax, 612
          push rax
          ; 612 push string
          mov rax, s_328
          push rax
          ; 612 push boolean
          mov rax, 1
          push rax
          ; 612 call
          call fn_list_copy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 615 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 615 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 615 duplicate
          pop rax
          push rax
          push rax
          ; 615 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 616 duplicate
          pop rax
          push rax
          push rax
          ; 616 push integer
          mov rax, 16
          push rax
          ; 616 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 616 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 617 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 617 push integer
          mov rax, 47
          push rax
          ; 617 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 617 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 618 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 618 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 618 push string
          mov rax, s_317
          push rax
          ; 618 push integer
          mov rax, 618
          push rax
          ; 618 push string
          mov rax, s_328
          push rax
          ; 618 push boolean
          mov rax, 1
          push rax
          ; 618 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 618 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 618 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 621 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 621 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 621 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 621 push integer
          mov rax, 8
          push rax
          ; 621 push string
          mov rax, s_317
          push rax
          ; 621 push integer
          mov rax, 621
          push rax
          ; 621 push string
          mov rax, s_328
          push rax
          ; 621 push boolean
          mov rax, 1
          push rax
          ; 621 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 621 push integer
          mov rax, 8
          push rax
          ; 621 push string
          mov rax, s_317
          push rax
          ; 621 push integer
          mov rax, 621
          push rax
          ; 621 push string
          mov rax, s_328
          push rax
          ; 621 push boolean
          mov rax, 1
          push rax
          ; 621 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 621 push integer
          mov rax, 4
          push rax
          ; 621 push string
          mov rax, s_317
          push rax
          ; 621 push integer
          mov rax, 621
          push rax
          ; 621 push string
          mov rax, s_328
          push rax
          ; 621 push boolean
          mov rax, 1
          push rax
          ; 621 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 622 drop
          pop rax
          ; 625 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 625 duplicate
          pop rax
          push rax
          push rax
          ; 625 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 625 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 625 push string
          mov rax, s_317
          push rax
          ; 625 push integer
          mov rax, 625
          push rax
          ; 625 push string
          mov rax, s_328
          push rax
          ; 625 push boolean
          mov rax, 1
          push rax
          ; 625 call
          call fn_list_eq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 625 push boolean
          mov rax, 0
          push rax
          ; 625 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 625 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000016c
          ; 626 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 626 push integer
          mov rax, 16
          push rax
          ; 626 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 626 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 627 push string
          mov rax, s_365
          push rax
          ; 627 push string
          mov rax, s_317
          push rax
          ; 627 push integer
          mov rax, 627
          push rax
          ; 627 push string
          mov rax, s_328
          push rax
          ; 627 push boolean
          mov rax, 1
          push rax
          ; 627 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 626 jump
          jmp end_0x000000000000016c
          ; 626 label
if_0x000000000000016c: 
          ; 626 label
end_0x000000000000016c: 
          ; 628 push string
          mov rax, s_317
          push rax
          ; 628 push integer
          mov rax, 628
          push rax
          ; 628 push string
          mov rax, s_328
          push rax
          ; 628 push boolean
          mov rax, 1
          push rax
          ; 628 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 631 duplicate
          pop rax
          push rax
          push rax
          ; 631 push integer
          mov rax, 16
          push rax
          ; 631 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 631 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 632 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 632 push integer
          mov rax, 46
          push rax
          ; 632 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 632 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 633 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 633 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 633 push string
          mov rax, s_317
          push rax
          ; 633 push integer
          mov rax, 633
          push rax
          ; 633 push string
          mov rax, s_328
          push rax
          ; 633 push boolean
          mov rax, 1
          push rax
          ; 633 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 633 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 633 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 589 jump
          jmp end_0x0000000000000133
          ; 589 label
elif_0x000000000000016a: 
          ; 634 duplicate
          pop rax
          push rax
          push rax
          ; 634 push integer
          mov rax, 8
          push rax
          ; 634 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 634 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 634 push string
          mov rax, s_304
          push rax
          ; 634 push string
          mov rax, s_317
          push rax
          ; 634 push integer
          mov rax, 634
          push rax
          ; 634 push string
          mov rax, s_328
          push rax
          ; 634 push boolean
          mov rax, 1
          push rax
          ; 634 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 634 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000016d
          ; 636 duplicate
          pop rax
          push rax
          push rax
          ; 636 push integer
          mov rax, 16
          push rax
          ; 636 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 636 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 636 push string
          mov rax, s_317
          push rax
          ; 636 push integer
          mov rax, 636
          push rax
          ; 636 push string
          mov rax, s_328
          push rax
          ; 636 push boolean
          mov rax, 1
          push rax
          ; 636 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 636 push integer
          mov rax, 1
          push rax
          ; 636 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 636 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000016e
          ; 637 duplicate
          pop rax
          push rax
          push rax
          ; 637 push integer
          mov rax, 16
          push rax
          ; 637 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 637 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 638 push string
          mov rax, s_364
          push rax
          ; 638 push string
          mov rax, s_317
          push rax
          ; 638 push integer
          mov rax, 638
          push rax
          ; 638 push string
          mov rax, s_328
          push rax
          ; 638 push boolean
          mov rax, 1
          push rax
          ; 638 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 637 jump
          jmp end_0x000000000000016e
          ; 637 label
if_0x000000000000016e: 
          ; 637 label
end_0x000000000000016e: 
          ; 641 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 641 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 641 push string
          mov rax, s_317
          push rax
          ; 641 push integer
          mov rax, 641
          push rax
          ; 641 push string
          mov rax, s_328
          push rax
          ; 641 push boolean
          mov rax, 1
          push rax
          ; 641 call
          call fn_list_copy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 641 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 641 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 644 push integer
          mov rax, 23
          push rax
          ; 644 push string
          mov rax, s_317
          push rax
          ; 644 push integer
          mov rax, 644
          push rax
          ; 644 push string
          mov rax, s_328
          push rax
          ; 644 push boolean
          mov rax, 1
          push rax
          ; 644 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 645 push string
          mov rax, s_366
          push rax
          ; 645 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 645 push integer
          mov rax, 4
          push rax
          ; 645 push string
          mov rax, s_317
          push rax
          ; 645 push integer
          mov rax, 645
          push rax
          ; 645 push string
          mov rax, s_328
          push rax
          ; 645 push boolean
          mov rax, 1
          push rax
          ; 645 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 646 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 646 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 646 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 646 push integer
          mov rax, 4
          push rax
          ; 646 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 646 push string
          mov rax, s_317
          push rax
          ; 646 push integer
          mov rax, 646
          push rax
          ; 646 push string
          mov rax, s_328
          push rax
          ; 646 push boolean
          mov rax, 1
          push rax
          ; 646 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 649 push integer
          mov rax, 22
          push rax
          ; 649 push string
          mov rax, s_317
          push rax
          ; 649 push integer
          mov rax, 649
          push rax
          ; 649 push string
          mov rax, s_328
          push rax
          ; 649 push boolean
          mov rax, 1
          push rax
          ; 649 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 650 push string
          mov rax, s_367
          push rax
          ; 650 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 650 push integer
          mov rax, 3
          push rax
          ; 650 push string
          mov rax, s_317
          push rax
          ; 650 push integer
          mov rax, 650
          push rax
          ; 650 push string
          mov rax, s_328
          push rax
          ; 650 push boolean
          mov rax, 1
          push rax
          ; 650 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 651 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 651 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 651 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 651 push integer
          mov rax, 3
          push rax
          ; 651 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 651 push string
          mov rax, s_317
          push rax
          ; 651 push integer
          mov rax, 651
          push rax
          ; 651 push string
          mov rax, s_328
          push rax
          ; 651 push boolean
          mov rax, 1
          push rax
          ; 651 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 653 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 653 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 653 push integer
          mov rax, 1
          push rax
          ; 653 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 653 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 653 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 656 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 656 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 656 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 656 push integer
          mov rax, 16
          push rax
          ; 656 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 656 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 657 push integer
          mov rax, 17
          push rax
          ; 657 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 657 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 658 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 658 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 658 push string
          mov rax, s_317
          push rax
          ; 658 push integer
          mov rax, 658
          push rax
          ; 658 push string
          mov rax, s_328
          push rax
          ; 658 push boolean
          mov rax, 1
          push rax
          ; 658 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 658 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 658 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 661 drop
          pop rax
          ; 661 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 661 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 661 push string
          mov rax, s_317
          push rax
          ; 661 push integer
          mov rax, 661
          push rax
          ; 661 push string
          mov rax, s_328
          push rax
          ; 661 push boolean
          mov rax, 1
          push rax
          ; 661 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 662 duplicate
          pop rax
          push rax
          push rax
          ; 662 push integer
          mov rax, 0
          push rax
          ; 662 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 662 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 662 push integer
          mov rax, 3
          push rax
          ; 662 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 662 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000016f
          ; 663 duplicate
          pop rax
          push rax
          push rax
          ; 663 push integer
          mov rax, 16
          push rax
          ; 663 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 663 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 664 push string
          mov rax, s_368
          push rax
          ; 664 push string
          mov rax, s_317
          push rax
          ; 664 push integer
          mov rax, 664
          push rax
          ; 664 push string
          mov rax, s_328
          push rax
          ; 664 push boolean
          mov rax, 1
          push rax
          ; 664 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 663 jump
          jmp end_0x000000000000016f
          ; 663 label
if_0x000000000000016f: 
          ; 663 label
end_0x000000000000016f: 
          ; 666 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 666 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 666 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 666 push integer
          mov rax, 8
          push rax
          ; 666 push string
          mov rax, s_317
          push rax
          ; 666 push integer
          mov rax, 666
          push rax
          ; 666 push string
          mov rax, s_328
          push rax
          ; 666 push boolean
          mov rax, 1
          push rax
          ; 666 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 666 push integer
          mov rax, 8
          push rax
          ; 666 push string
          mov rax, s_317
          push rax
          ; 666 push integer
          mov rax, 666
          push rax
          ; 666 push string
          mov rax, s_328
          push rax
          ; 666 push boolean
          mov rax, 1
          push rax
          ; 666 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 666 push integer
          mov rax, 4
          push rax
          ; 666 push string
          mov rax, s_317
          push rax
          ; 666 push integer
          mov rax, 666
          push rax
          ; 666 push string
          mov rax, s_328
          push rax
          ; 666 push boolean
          mov rax, 1
          push rax
          ; 666 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 667 drop
          pop rax
          ; 670 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 670 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 670 push integer
          mov rax, 16
          push rax
          ; 670 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 670 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 670 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 670 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 671 push integer
          mov rax, 24
          push rax
          ; 671 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 671 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 672 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 672 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 672 push string
          mov rax, s_317
          push rax
          ; 672 push integer
          mov rax, 672
          push rax
          ; 672 push string
          mov rax, s_328
          push rax
          ; 672 push boolean
          mov rax, 1
          push rax
          ; 672 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 672 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 672 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 674 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 674 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 674 duplicate
          pop rax
          push rax
          push rax
          ; 674 push integer
          mov rax, 16
          push rax
          ; 674 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 674 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 674 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 675 push integer
          mov rax, 25
          push rax
          ; 675 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 675 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 676 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 676 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 676 push string
          mov rax, s_317
          push rax
          ; 676 push integer
          mov rax, 676
          push rax
          ; 676 push string
          mov rax, s_328
          push rax
          ; 676 push boolean
          mov rax, 1
          push rax
          ; 676 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 676 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 676 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 679 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 679 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 679 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 679 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 680 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 680 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 680 push string
          mov rax, s_317
          push rax
          ; 680 push integer
          mov rax, 680
          push rax
          ; 680 push string
          mov rax, s_328
          push rax
          ; 680 push boolean
          mov rax, 1
          push rax
          ; 680 call
          call fn_list_copy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 680 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 680 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 683 label
while_0x0000000000000035: 
          ; 683 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 683 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 683 push string
          mov rax, s_317
          push rax
          ; 683 push integer
          mov rax, 683
          push rax
          ; 683 push string
          mov rax, s_328
          push rax
          ; 683 push boolean
          mov rax, 1
          push rax
          ; 683 call
          call fn__peek_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 684 push integer
          mov rax, 8
          push rax
          ; 684 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 684 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 684 push string
          mov rax, s_302
          push rax
          ; 684 push string
          mov rax, s_317
          push rax
          ; 684 push integer
          mov rax, 684
          push rax
          ; 684 push string
          mov rax, s_328
          push rax
          ; 684 push boolean
          mov rax, 1
          push rax
          ; 684 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 683 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000035_end
          ; 685 drop
          pop rax
          ; 685 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 685 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 685 push string
          mov rax, s_317
          push rax
          ; 685 push integer
          mov rax, 685
          push rax
          ; 685 push string
          mov rax, s_328
          push rax
          ; 685 push boolean
          mov rax, 1
          push rax
          ; 685 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 688 push integer
          mov rax, 24
          push rax
          ; 688 push string
          mov rax, s_317
          push rax
          ; 688 push integer
          mov rax, 688
          push rax
          ; 688 push string
          mov rax, s_328
          push rax
          ; 688 push boolean
          mov rax, 1
          push rax
          ; 688 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 689 push string
          mov rax, s_369
          push rax
          ; 689 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 689 push integer
          mov rax, 5
          push rax
          ; 689 push string
          mov rax, s_317
          push rax
          ; 689 push integer
          mov rax, 689
          push rax
          ; 689 push string
          mov rax, s_328
          push rax
          ; 689 push boolean
          mov rax, 1
          push rax
          ; 689 call
          call fn_memcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 690 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 690 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 690 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 690 push integer
          mov rax, 5
          push rax
          ; 690 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 690 push string
          mov rax, s_317
          push rax
          ; 690 push integer
          mov rax, 690
          push rax
          ; 690 push string
          mov rax, s_328
          push rax
          ; 690 push boolean
          mov rax, 1
          push rax
          ; 690 call
          call fn_itohex
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 691 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 691 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 691 push integer
          mov rax, 1
          push rax
          ; 691 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 691 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 691 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 694 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 694 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 694 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 694 push integer
          mov rax, 8
          push rax
          ; 694 push string
          mov rax, s_317
          push rax
          ; 694 push integer
          mov rax, 694
          push rax
          ; 694 push string
          mov rax, s_328
          push rax
          ; 694 push boolean
          mov rax, 1
          push rax
          ; 694 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 694 push integer
          mov rax, 8
          push rax
          ; 694 push string
          mov rax, s_317
          push rax
          ; 694 push integer
          mov rax, 694
          push rax
          ; 694 push string
          mov rax, s_328
          push rax
          ; 694 push boolean
          mov rax, 1
          push rax
          ; 694 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 694 push integer
          mov rax, 3
          push rax
          ; 695 push string
          mov rax, s_317
          push rax
          ; 695 push integer
          mov rax, 695
          push rax
          ; 695 push string
          mov rax, s_328
          push rax
          ; 695 push boolean
          mov rax, 1
          push rax
          ; 695 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 695 drop
          pop rax
          ; 698 duplicate
          pop rax
          push rax
          push rax
          ; 698 push integer
          mov rax, 16
          push rax
          ; 698 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 698 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 698 push string
          mov rax, s_317
          push rax
          ; 698 push integer
          mov rax, 698
          push rax
          ; 698 push string
          mov rax, s_328
          push rax
          ; 698 push boolean
          mov rax, 1
          push rax
          ; 698 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 698 push integer
          mov rax, 1
          push rax
          ; 698 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 698 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000170
          ; 699 duplicate
          pop rax
          push rax
          push rax
          ; 699 push integer
          mov rax, 16
          push rax
          ; 699 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 699 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 700 push string
          mov rax, s_364
          push rax
          ; 700 push string
          mov rax, s_317
          push rax
          ; 700 push integer
          mov rax, 700
          push rax
          ; 700 push string
          mov rax, s_328
          push rax
          ; 700 push boolean
          mov rax, 1
          push rax
          ; 700 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 699 jump
          jmp end_0x0000000000000170
          ; 699 label
if_0x0000000000000170: 
          ; 699 label
end_0x0000000000000170: 
          ; 703 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 703 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 703 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 703 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 703 push string
          mov rax, s_317
          push rax
          ; 703 push integer
          mov rax, 703
          push rax
          ; 703 push string
          mov rax, s_328
          push rax
          ; 703 push boolean
          mov rax, 1
          push rax
          ; 703 call
          call fn_list_eq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 703 push boolean
          mov rax, 0
          push rax
          ; 703 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 703 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000171
          ; 704 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 704 push integer
          mov rax, 16
          push rax
          ; 704 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 704 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 705 push string
          mov rax, s_370
          push rax
          ; 705 push string
          mov rax, s_317
          push rax
          ; 705 push integer
          mov rax, 705
          push rax
          ; 705 push string
          mov rax, s_328
          push rax
          ; 705 push boolean
          mov rax, 1
          push rax
          ; 705 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 704 jump
          jmp end_0x0000000000000171
          ; 704 label
if_0x0000000000000171: 
          ; 704 label
end_0x0000000000000171: 
          ; 708 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 708 push integer
          mov rax, 16
          push rax
          ; 708 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 708 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 709 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 710 push integer
          mov rax, 17
          push rax
          ; 710 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 710 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 711 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 711 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 711 push string
          mov rax, s_317
          push rax
          ; 711 push integer
          mov rax, 711
          push rax
          ; 711 push string
          mov rax, s_328
          push rax
          ; 711 push boolean
          mov rax, 1
          push rax
          ; 711 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 711 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 711 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 714 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 714 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 714 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 714 push integer
          mov rax, 8
          push rax
          ; 714 push string
          mov rax, s_317
          push rax
          ; 714 push integer
          mov rax, 714
          push rax
          ; 714 push string
          mov rax, s_328
          push rax
          ; 714 push boolean
          mov rax, 1
          push rax
          ; 714 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 714 push integer
          mov rax, 8
          push rax
          ; 714 push string
          mov rax, s_317
          push rax
          ; 714 push integer
          mov rax, 714
          push rax
          ; 714 push string
          mov rax, s_328
          push rax
          ; 714 push boolean
          mov rax, 1
          push rax
          ; 714 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 714 push integer
          mov rax, 4
          push rax
          ; 714 push string
          mov rax, s_317
          push rax
          ; 714 push integer
          mov rax, 714
          push rax
          ; 714 push string
          mov rax, s_328
          push rax
          ; 714 push boolean
          mov rax, 1
          push rax
          ; 714 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 715 drop
          pop rax
          ; 718 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 718 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 718 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 718 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 718 push string
          mov rax, s_317
          push rax
          ; 718 push integer
          mov rax, 718
          push rax
          ; 718 push string
          mov rax, s_328
          push rax
          ; 718 push boolean
          mov rax, 1
          push rax
          ; 718 call
          call fn_list_eq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 718 push boolean
          mov rax, 0
          push rax
          ; 718 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 718 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000172
          ; 719 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 719 push integer
          mov rax, 16
          push rax
          ; 719 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 719 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 720 push string
          mov rax, s_371
          push rax
          ; 720 push string
          mov rax, s_317
          push rax
          ; 720 push integer
          mov rax, 720
          push rax
          ; 720 push string
          mov rax, s_328
          push rax
          ; 720 push boolean
          mov rax, 1
          push rax
          ; 720 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 719 jump
          jmp end_0x0000000000000172
          ; 719 label
if_0x0000000000000172: 
          ; 719 label
end_0x0000000000000172: 
          ; 723 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 723 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 724 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 724 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 724 push integer
          mov rax, 16
          push rax
          ; 724 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 724 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 725 push integer
          mov rax, 24
          push rax
          ; 725 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 725 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 726 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 726 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 726 push string
          mov rax, s_317
          push rax
          ; 726 push integer
          mov rax, 726
          push rax
          ; 726 push string
          mov rax, s_328
          push rax
          ; 726 push boolean
          mov rax, 1
          push rax
          ; 726 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 726 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 726 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 728 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 728 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 728 push integer
          mov rax, 16
          push rax
          ; 728 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 728 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 729 push integer
          mov rax, 25
          push rax
          ; 729 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 729 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 730 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 730 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 730 push string
          mov rax, s_317
          push rax
          ; 730 push integer
          mov rax, 730
          push rax
          ; 730 push string
          mov rax, s_328
          push rax
          ; 730 push boolean
          mov rax, 1
          push rax
          ; 730 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 730 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 730 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 733 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 733 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 733 push string
          mov rax, s_317
          push rax
          ; 733 push integer
          mov rax, 733
          push rax
          ; 733 push string
          mov rax, s_328
          push rax
          ; 733 push boolean
          mov rax, 1
          push rax
          ; 733 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 734 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 734 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 734 push string
          mov rax, s_317
          push rax
          ; 734 push integer
          mov rax, 734
          push rax
          ; 734 push string
          mov rax, s_328
          push rax
          ; 734 push boolean
          mov rax, 1
          push rax
          ; 734 call
          call fn_list_copy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 734 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 734 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 683 end of while-loop
          jmp while_0x0000000000000035
while_0x0000000000000035_end: 
          ; 736 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 736 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 736 push string
          mov rax, s_317
          push rax
          ; 736 push integer
          mov rax, 736
          push rax
          ; 736 push string
          mov rax, s_328
          push rax
          ; 736 push boolean
          mov rax, 1
          push rax
          ; 736 call
          call fn__peek_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 736 push integer
          mov rax, 8
          push rax
          ; 736 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 736 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 736 push string
          mov rax, s_303
          push rax
          ; 736 push string
          mov rax, s_317
          push rax
          ; 736 push integer
          mov rax, 736
          push rax
          ; 736 push string
          mov rax, s_328
          push rax
          ; 736 push boolean
          mov rax, 1
          push rax
          ; 736 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 736 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000173
          ; 737 drop
          pop rax
          ; 737 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 737 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 737 push string
          mov rax, s_317
          push rax
          ; 737 push integer
          mov rax, 737
          push rax
          ; 737 push string
          mov rax, s_328
          push rax
          ; 737 push boolean
          mov rax, 1
          push rax
          ; 737 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 740 drop
          pop rax
          ; 740 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 740 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 740 push string
          mov rax, s_317
          push rax
          ; 740 push integer
          mov rax, 740
          push rax
          ; 740 push string
          mov rax, s_328
          push rax
          ; 740 push boolean
          mov rax, 1
          push rax
          ; 740 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 741 duplicate
          pop rax
          push rax
          push rax
          ; 741 push integer
          mov rax, 0
          push rax
          ; 741 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 741 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 741 push integer
          mov rax, 3
          push rax
          ; 741 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 741 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000174
          ; 742 duplicate
          pop rax
          push rax
          push rax
          ; 742 push integer
          mov rax, 16
          push rax
          ; 742 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 742 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 743 push string
          mov rax, s_372
          push rax
          ; 743 push string
          mov rax, s_317
          push rax
          ; 743 push integer
          mov rax, 743
          push rax
          ; 743 push string
          mov rax, s_328
          push rax
          ; 743 push boolean
          mov rax, 1
          push rax
          ; 743 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 742 jump
          jmp end_0x0000000000000174
          ; 742 label
if_0x0000000000000174: 
          ; 742 label
end_0x0000000000000174: 
          ; 745 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 745 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 745 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 745 push integer
          mov rax, 8
          push rax
          ; 745 push string
          mov rax, s_317
          push rax
          ; 745 push integer
          mov rax, 745
          push rax
          ; 745 push string
          mov rax, s_328
          push rax
          ; 745 push boolean
          mov rax, 1
          push rax
          ; 745 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 745 push integer
          mov rax, 8
          push rax
          ; 745 push string
          mov rax, s_317
          push rax
          ; 745 push integer
          mov rax, 745
          push rax
          ; 745 push string
          mov rax, s_328
          push rax
          ; 745 push boolean
          mov rax, 1
          push rax
          ; 745 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 745 push integer
          mov rax, 4
          push rax
          ; 745 push string
          mov rax, s_317
          push rax
          ; 745 push integer
          mov rax, 745
          push rax
          ; 745 push string
          mov rax, s_328
          push rax
          ; 745 push boolean
          mov rax, 1
          push rax
          ; 745 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 746 drop
          pop rax
          ; 749 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 749 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 749 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 749 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 749 push string
          mov rax, s_317
          push rax
          ; 749 push integer
          mov rax, 749
          push rax
          ; 749 push string
          mov rax, s_328
          push rax
          ; 749 push boolean
          mov rax, 1
          push rax
          ; 749 call
          call fn_list_eq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 749 push boolean
          mov rax, 0
          push rax
          ; 749 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 749 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000175
          ; 750 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 750 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 750 push integer
          mov rax, 8
          push rax
          ; 750 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 750 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 750 push string
          mov rax, s_317
          push rax
          ; 750 push integer
          mov rax, 750
          push rax
          ; 750 push string
          mov rax, s_328
          push rax
          ; 750 push boolean
          mov rax, 1
          push rax
          ; 750 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 750 push string
          mov rax, s_373
          push rax
          ; 750 push string
          mov rax, s_317
          push rax
          ; 750 push integer
          mov rax, 750
          push rax
          ; 750 push string
          mov rax, s_328
          push rax
          ; 750 push boolean
          mov rax, 1
          push rax
          ; 750 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 751 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 751 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 751 push integer
          mov rax, 8
          push rax
          ; 751 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 751 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 751 push string
          mov rax, s_317
          push rax
          ; 751 push integer
          mov rax, 751
          push rax
          ; 751 push string
          mov rax, s_328
          push rax
          ; 751 push boolean
          mov rax, 1
          push rax
          ; 751 call
          call fn_puti
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 751 push string
          mov rax, s_7
          push rax
          ; 751 push string
          mov rax, s_317
          push rax
          ; 751 push integer
          mov rax, 751
          push rax
          ; 751 push string
          mov rax, s_328
          push rax
          ; 751 push boolean
          mov rax, 1
          push rax
          ; 751 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 752 duplicate
          pop rax
          push rax
          push rax
          ; 752 push integer
          mov rax, 16
          push rax
          ; 752 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 752 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 753 push string
          mov rax, s_374
          push rax
          ; 753 push string
          mov rax, s_317
          push rax
          ; 753 push integer
          mov rax, 753
          push rax
          ; 753 push string
          mov rax, s_328
          push rax
          ; 753 push boolean
          mov rax, 1
          push rax
          ; 753 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 750 jump
          jmp end_0x0000000000000175
          ; 750 label
if_0x0000000000000175: 
          ; 750 label
end_0x0000000000000175: 
          ; 737 jump
          jmp end_0x0000000000000173
          ; 737 label
if_0x0000000000000173: 
          ; 756 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 756 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 757 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 757 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 757 push string
          mov rax, s_317
          push rax
          ; 757 push integer
          mov rax, 757
          push rax
          ; 757 push string
          mov rax, s_328
          push rax
          ; 757 push boolean
          mov rax, 1
          push rax
          ; 757 call
          call fn_list_eq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 757 push boolean
          mov rax, 0
          push rax
          ; 757 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 757 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000176
          ; 758 duplicate
          pop rax
          push rax
          push rax
          ; 758 push integer
          mov rax, 16
          push rax
          ; 758 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 758 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 759 push string
          mov rax, s_375
          push rax
          ; 759 push string
          mov rax, s_317
          push rax
          ; 759 push integer
          mov rax, 759
          push rax
          ; 759 push string
          mov rax, s_328
          push rax
          ; 759 push boolean
          mov rax, 1
          push rax
          ; 759 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 758 jump
          jmp end_0x0000000000000176
          ; 758 label
if_0x0000000000000176: 
          ; 758 label
end_0x0000000000000176: 
          ; 755 label
end_0x0000000000000173: 
          ; 762 duplicate
          pop rax
          push rax
          push rax
          ; 762 push integer
          mov rax, 16
          push rax
          ; 762 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 762 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 762 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 763 push integer
          mov rax, 25
          push rax
          ; 763 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 763 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 764 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 764 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 764 push string
          mov rax, s_317
          push rax
          ; 764 push integer
          mov rax, 764
          push rax
          ; 764 push string
          mov rax, s_328
          push rax
          ; 764 push boolean
          mov rax, 1
          push rax
          ; 764 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 764 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 764 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 767 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 767 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 767 push string
          mov rax, s_317
          push rax
          ; 767 push integer
          mov rax, 767
          push rax
          ; 767 push string
          mov rax, s_328
          push rax
          ; 767 push boolean
          mov rax, 1
          push rax
          ; 767 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 768 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 768 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 768 push string
          mov rax, s_317
          push rax
          ; 768 push integer
          mov rax, 768
          push rax
          ; 768 push string
          mov rax, s_328
          push rax
          ; 768 push boolean
          mov rax, 1
          push rax
          ; 768 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 769 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 769 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 769 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 769 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 634 jump
          jmp end_0x0000000000000133
          ; 634 label
elif_0x000000000000016d: 
          ; 770 duplicate
          pop rax
          push rax
          push rax
          ; 770 push integer
          mov rax, 8
          push rax
          ; 770 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 770 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 770 push string
          mov rax, s_295
          push rax
          ; 770 push string
          mov rax, s_317
          push rax
          ; 770 push integer
          mov rax, 770
          push rax
          ; 770 push string
          mov rax, s_328
          push rax
          ; 770 push boolean
          mov rax, 1
          push rax
          ; 770 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 771 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 771 push integer
          mov rax, 8
          push rax
          ; 771 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 771 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 771 push string
          mov rax, s_296
          push rax
          ; 771 push string
          mov rax, s_317
          push rax
          ; 771 push integer
          mov rax, 771
          push rax
          ; 771 push string
          mov rax, s_328
          push rax
          ; 771 push boolean
          mov rax, 1
          push rax
          ; 771 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 771 bitwise or
          pop rax
          pop rbx
          or rbx, rax
          push rbx
          ; 770 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000177
          ; 772 duplicate
          pop rax
          push rax
          push rax
          ; 772 push integer
          mov rax, 8
          push rax
          ; 772 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 772 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 772 push string
          mov rax, s_296
          push rax
          ; 772 push string
          mov rax, s_317
          push rax
          ; 772 push integer
          mov rax, 772
          push rax
          ; 772 push string
          mov rax, s_328
          push rax
          ; 772 push boolean
          mov rax, 1
          push rax
          ; 772 call
          call fn_streq
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 772 get pointer to buffer
          mov rax, buf__is_inline
          push rax
          ; 772 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 774 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 774 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 774 push string
          mov rax, s_317
          push rax
          ; 774 push integer
          mov rax, 774
          push rax
          ; 774 push string
          mov rax, s_328
          push rax
          ; 774 push boolean
          mov rax, 1
          push rax
          ; 774 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 774 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 774 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000178
          ; 775 push string
          mov rax, s_376
          push rax
          ; 775 push string
          mov rax, s_317
          push rax
          ; 775 push integer
          mov rax, 775
          push rax
          ; 775 push string
          mov rax, s_328
          push rax
          ; 775 push boolean
          mov rax, 1
          push rax
          ; 775 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 775 jump
          jmp end_0x0000000000000178
          ; 775 label
if_0x0000000000000178: 
          ; 775 label
end_0x0000000000000178: 
          ; 778 drop
          pop rax
          ; 778 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 778 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 778 push string
          mov rax, s_317
          push rax
          ; 778 push integer
          mov rax, 778
          push rax
          ; 778 push string
          mov rax, s_328
          push rax
          ; 778 push boolean
          mov rax, 1
          push rax
          ; 778 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 779 duplicate
          pop rax
          push rax
          push rax
          ; 779 push integer
          mov rax, 0
          push rax
          ; 779 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 779 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 779 push integer
          mov rax, 10
          push rax
          ; 779 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 779 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000179
          ; 780 duplicate
          pop rax
          push rax
          push rax
          ; 780 push integer
          mov rax, 16
          push rax
          ; 780 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 780 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 781 push string
          mov rax, s_377
          push rax
          ; 781 push string
          mov rax, s_317
          push rax
          ; 781 push integer
          mov rax, 781
          push rax
          ; 781 push string
          mov rax, s_328
          push rax
          ; 781 push boolean
          mov rax, 1
          push rax
          ; 781 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 780 jump
          jmp end_0x0000000000000179
          ; 780 label
if_0x0000000000000179: 
          ; 780 label
end_0x0000000000000179: 
          ; 784 duplicate
          pop rax
          push rax
          push rax
          ; 784 push integer
          mov rax, 8
          push rax
          ; 784 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 784 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 785 duplicate
          pop rax
          push rax
          push rax
          ; 785 push string
          mov rax, s_317
          push rax
          ; 785 push integer
          mov rax, 785
          push rax
          ; 785 push string
          mov rax, s_328
          push rax
          ; 785 push boolean
          mov rax, 1
          push rax
          ; 785 call
          call fn_create_function
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 785 duplicate
          pop rax
          push rax
          push rax
          ; 786 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 786 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 787 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 787 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 787 push string
          mov rax, s_317
          push rax
          ; 787 push integer
          mov rax, 787
          push rax
          ; 787 push string
          mov rax, s_328
          push rax
          ; 787 push boolean
          mov rax, 1
          push rax
          ; 787 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 787 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 787 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 789 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 789 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 792 drop
          pop rax
          ; 792 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 792 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 792 push string
          mov rax, s_317
          push rax
          ; 792 push integer
          mov rax, 792
          push rax
          ; 792 push string
          mov rax, s_328
          push rax
          ; 792 push boolean
          mov rax, 1
          push rax
          ; 792 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 793 duplicate
          pop rax
          push rax
          push rax
          ; 793 push integer
          mov rax, 0
          push rax
          ; 793 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 793 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 793 push integer
          mov rax, 7
          push rax
          ; 793 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 793 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000017a
          ; 794 duplicate
          pop rax
          push rax
          push rax
          ; 794 push integer
          mov rax, 16
          push rax
          ; 794 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 794 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 795 push string
          mov rax, s_378
          push rax
          ; 795 push string
          mov rax, s_317
          push rax
          ; 795 push integer
          mov rax, 795
          push rax
          ; 795 push string
          mov rax, s_328
          push rax
          ; 795 push boolean
          mov rax, 1
          push rax
          ; 795 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 794 jump
          jmp end_0x000000000000017a
          ; 794 label
if_0x000000000000017a: 
          ; 794 label
end_0x000000000000017a: 
          ; 798 get pointer to buffer
          mov rax, buf__is_inline
          push rax
          ; 798 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 798 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000017b
          ; 799 duplicate
          pop rax
          push rax
          push rax
          ; 799 push integer
          mov rax, 16
          push rax
          ; 799 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 799 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 800 push integer
          mov rax, 25
          push rax
          ; 801 push string
          mov rax, s_379
          push rax
          ; 802 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 802 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 802 push integer
          mov rax, 0
          push rax
          ; 802 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 802 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 803 push string
          mov rax, s_317
          push rax
          ; 803 push integer
          mov rax, 803
          push rax
          ; 803 push string
          mov rax, s_328
          push rax
          ; 803 push boolean
          mov rax, 1
          push rax
          ; 803 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 804 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 805 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 805 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 805 push string
          mov rax, s_317
          push rax
          ; 805 push integer
          mov rax, 805
          push rax
          ; 805 push string
          mov rax, s_328
          push rax
          ; 805 push boolean
          mov rax, 1
          push rax
          ; 805 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 805 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 805 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 799 jump
          jmp end_0x000000000000017b
          ; 799 label
if_0x000000000000017b: 
          ; 807 duplicate
          pop rax
          push rax
          push rax
          ; 807 push integer
          mov rax, 16
          push rax
          ; 807 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 807 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 808 push integer
          mov rax, 14
          push rax
          ; 809 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 809 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 809 push integer
          mov rax, 0
          push rax
          ; 809 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 809 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 810 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 811 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 811 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 811 push string
          mov rax, s_317
          push rax
          ; 811 push integer
          mov rax, 811
          push rax
          ; 811 push string
          mov rax, s_328
          push rax
          ; 811 push boolean
          mov rax, 1
          push rax
          ; 811 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 811 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 811 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 807 label
end_0x000000000000017b: 
          ; 813 drop
          pop rax
          ; 813 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 813 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 813 push string
          mov rax, s_317
          push rax
          ; 813 push integer
          mov rax, 813
          push rax
          ; 813 push string
          mov rax, s_328
          push rax
          ; 813 push boolean
          mov rax, 1
          push rax
          ; 813 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 815 label
while_0x0000000000000036: 
          ; 815 duplicate
          pop rax
          push rax
          push rax
          ; 815 push integer
          mov rax, 0
          push rax
          ; 815 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 815 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 815 push integer
          mov rax, 2
          push rax
          ; 815 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 815 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000036_end
          ; 817 duplicate
          pop rax
          push rax
          push rax
          ; 817 push integer
          mov rax, 0
          push rax
          ; 817 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 817 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 817 push integer
          mov rax, 14
          push rax
          ; 817 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 817 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000017c
          ; 818 duplicate
          pop rax
          push rax
          push rax
          ; 818 push integer
          mov rax, 16
          push rax
          ; 818 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 818 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 819 push string
          mov rax, s_380
          push rax
          ; 819 push string
          mov rax, s_317
          push rax
          ; 819 push integer
          mov rax, 819
          push rax
          ; 819 push string
          mov rax, s_328
          push rax
          ; 819 push boolean
          mov rax, 1
          push rax
          ; 819 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 818 jump
          jmp end_0x000000000000017c
          ; 818 label
if_0x000000000000017c: 
          ; 818 label
end_0x000000000000017c: 
          ; 821 push integer
          mov rax, 8
          push rax
          ; 821 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 821 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 821 push string
          mov rax, s_317
          push rax
          ; 821 push integer
          mov rax, 821
          push rax
          ; 821 push string
          mov rax, s_328
          push rax
          ; 821 push boolean
          mov rax, 1
          push rax
          ; 821 call
          call fn_str_to_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 824 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 824 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 824 push string
          mov rax, s_317
          push rax
          ; 824 push integer
          mov rax, 824
          push rax
          ; 824 push string
          mov rax, s_328
          push rax
          ; 824 push boolean
          mov rax, 1
          push rax
          ; 824 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 826 duplicate
          pop rax
          push rax
          push rax
          ; 826 push integer
          mov rax, 0
          push rax
          ; 826 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 826 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 826 push integer
          mov rax, 10
          push rax
          ; 826 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 826 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000017d
          ; 827 duplicate
          pop rax
          push rax
          push rax
          ; 827 push integer
          mov rax, 16
          push rax
          ; 827 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 827 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 828 push string
          mov rax, s_381
          push rax
          ; 828 push string
          mov rax, s_317
          push rax
          ; 828 push integer
          mov rax, 828
          push rax
          ; 828 push string
          mov rax, s_328
          push rax
          ; 828 push boolean
          mov rax, 1
          push rax
          ; 828 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 827 jump
          jmp end_0x000000000000017d
          ; 827 label
if_0x000000000000017d: 
          ; 827 label
end_0x000000000000017d: 
          ; 830 push integer
          mov rax, 8
          push rax
          ; 830 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 830 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 833 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 833 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 833 push string
          mov rax, s_317
          push rax
          ; 833 push integer
          mov rax, 833
          push rax
          ; 833 push string
          mov rax, s_328
          push rax
          ; 833 push boolean
          mov rax, 1
          push rax
          ; 833 call
          call fn_function_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 836 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 836 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 836 push string
          mov rax, s_317
          push rax
          ; 836 push integer
          mov rax, 836
          push rax
          ; 836 push string
          mov rax, s_328
          push rax
          ; 836 push boolean
          mov rax, 1
          push rax
          ; 836 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 837 duplicate
          pop rax
          push rax
          push rax
          ; 837 push integer
          mov rax, 0
          push rax
          ; 837 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 837 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 837 push integer
          mov rax, 8
          push rax
          ; 837 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 837 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000017e
          ; 838 drop
          pop rax
          ; 838 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 838 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 838 push string
          mov rax, s_317
          push rax
          ; 838 push integer
          mov rax, 838
          push rax
          ; 838 push string
          mov rax, s_328
          push rax
          ; 838 push boolean
          mov rax, 1
          push rax
          ; 838 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 838 jump
          jmp end_0x000000000000017e
          ; 838 label
if_0x000000000000017e: 
          ; 839 duplicate
          pop rax
          push rax
          push rax
          ; 839 push integer
          mov rax, 0
          push rax
          ; 839 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 839 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 839 push integer
          mov rax, 2
          push rax
          ; 839 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 839 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000017f
          ; 840 duplicate
          pop rax
          push rax
          push rax
          ; 840 push integer
          mov rax, 16
          push rax
          ; 840 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 840 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 841 push string
          mov rax, s_382
          push rax
          ; 841 push string
          mov rax, s_317
          push rax
          ; 841 push integer
          mov rax, 841
          push rax
          ; 841 push string
          mov rax, s_328
          push rax
          ; 841 push boolean
          mov rax, 1
          push rax
          ; 841 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 839 jump
          jmp end_0x000000000000017e
          ; 839 label
elif_0x000000000000017f: 
          ; 839 label
end_0x000000000000017e: 
          ; 815 end of while-loop
          jmp while_0x0000000000000036
while_0x0000000000000036_end: 
          ; 844 drop
          pop rax
          ; 844 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 844 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 844 push string
          mov rax, s_317
          push rax
          ; 844 push integer
          mov rax, 844
          push rax
          ; 844 push string
          mov rax, s_328
          push rax
          ; 844 push boolean
          mov rax, 1
          push rax
          ; 844 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 846 duplicate
          pop rax
          push rax
          push rax
          ; 846 push integer
          mov rax, 0
          push rax
          ; 846 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 846 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 846 push integer
          mov rax, 14
          push rax
          ; 846 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 846 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000180
          ; 847 duplicate
          pop rax
          push rax
          push rax
          ; 847 push integer
          mov rax, 16
          push rax
          ; 847 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 847 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 848 push string
          mov rax, s_383
          push rax
          ; 848 push string
          mov rax, s_317
          push rax
          ; 848 push integer
          mov rax, 848
          push rax
          ; 848 push string
          mov rax, s_328
          push rax
          ; 848 push boolean
          mov rax, 1
          push rax
          ; 848 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 847 jump
          jmp end_0x0000000000000180
          ; 847 label
if_0x0000000000000180: 
          ; 847 label
end_0x0000000000000180: 
          ; 850 push integer
          mov rax, 8
          push rax
          ; 850 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 850 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 850 push string
          mov rax, s_317
          push rax
          ; 850 push integer
          mov rax, 850
          push rax
          ; 850 push string
          mov rax, s_328
          push rax
          ; 850 push boolean
          mov rax, 1
          push rax
          ; 850 call
          call fn_str_to_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 851 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 851 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 851 push string
          mov rax, s_317
          push rax
          ; 851 push integer
          mov rax, 851
          push rax
          ; 851 push string
          mov rax, s_328
          push rax
          ; 851 push boolean
          mov rax, 1
          push rax
          ; 851 call
          call fn_function_set_return_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 854 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 854 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 854 push string
          mov rax, s_317
          push rax
          ; 854 push integer
          mov rax, 854
          push rax
          ; 854 push string
          mov rax, s_328
          push rax
          ; 854 push boolean
          mov rax, 1
          push rax
          ; 854 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 856 duplicate
          pop rax
          push rax
          push rax
          ; 856 push integer
          mov rax, 0
          push rax
          ; 856 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 856 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 856 push integer
          mov rax, 3
          push rax
          ; 856 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 856 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000181
          ; 857 duplicate
          pop rax
          push rax
          push rax
          ; 857 push integer
          mov rax, 16
          push rax
          ; 857 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 857 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 858 push string
          mov rax, s_384
          push rax
          ; 858 push string
          mov rax, s_317
          push rax
          ; 858 push integer
          mov rax, 858
          push rax
          ; 858 push string
          mov rax, s_328
          push rax
          ; 858 push boolean
          mov rax, 1
          push rax
          ; 858 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 857 jump
          jmp end_0x0000000000000181
          ; 857 label
if_0x0000000000000181: 
          ; 857 label
end_0x0000000000000181: 
          ; 860 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 860 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 860 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 860 push integer
          mov rax, 8
          push rax
          ; 860 push string
          mov rax, s_317
          push rax
          ; 860 push integer
          mov rax, 860
          push rax
          ; 860 push string
          mov rax, s_328
          push rax
          ; 860 push boolean
          mov rax, 1
          push rax
          ; 860 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 860 push integer
          mov rax, 8
          push rax
          ; 860 push string
          mov rax, s_317
          push rax
          ; 860 push integer
          mov rax, 860
          push rax
          ; 860 push string
          mov rax, s_328
          push rax
          ; 860 push boolean
          mov rax, 1
          push rax
          ; 860 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 860 push integer
          mov rax, 4
          push rax
          ; 860 push string
          mov rax, s_317
          push rax
          ; 860 push integer
          mov rax, 860
          push rax
          ; 860 push string
          mov rax, s_328
          push rax
          ; 860 push boolean
          mov rax, 1
          push rax
          ; 860 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 861 drop
          pop rax
          ; 864 get pointer to buffer
          mov rax, buf__is_inline
          push rax
          ; 864 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 864 push boolean
          mov rax, 0
          push rax
          ; 864 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 864 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000182
          ; 865 duplicate
          pop rax
          push rax
          push rax
          ; 865 push integer
          mov rax, 16
          push rax
          ; 865 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 865 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 866 push integer
          mov rax, 34
          push rax
          ; 867 push string
          mov rax, s_317
          push rax
          ; 867 push integer
          mov rax, 867
          push rax
          ; 867 push string
          mov rax, s_328
          push rax
          ; 867 push boolean
          mov rax, 1
          push rax
          ; 867 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 868 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 869 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 869 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 869 push string
          mov rax, s_317
          push rax
          ; 869 push integer
          mov rax, 869
          push rax
          ; 869 push string
          mov rax, s_328
          push rax
          ; 869 push boolean
          mov rax, 1
          push rax
          ; 869 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 869 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 869 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 865 jump
          jmp end_0x0000000000000182
          ; 865 label
if_0x0000000000000182: 
          ; 865 label
end_0x0000000000000182: 
          ; 871 duplicate
          pop rax
          push rax
          push rax
          ; 871 push integer
          mov rax, 16
          push rax
          ; 871 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 871 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 872 push integer
          mov rax, 35
          push rax
          ; 873 push string
          mov rax, s_317
          push rax
          ; 873 push integer
          mov rax, 873
          push rax
          ; 873 push string
          mov rax, s_328
          push rax
          ; 873 push boolean
          mov rax, 1
          push rax
          ; 873 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 874 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 875 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 875 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 875 push string
          mov rax, s_317
          push rax
          ; 875 push integer
          mov rax, 875
          push rax
          ; 875 push string
          mov rax, s_328
          push rax
          ; 875 push boolean
          mov rax, 1
          push rax
          ; 875 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 875 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 875 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 878 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 878 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 878 push integer
          mov rax, 16
          push rax
          ; 878 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 878 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 879 duplicate
          pop rax
          push rax
          push rax
          ; 879 push integer
          mov rax, 5
          push rax
          ; 879 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 879 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000183
          ; 880 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 880 push integer
          mov rax, 16
          push rax
          ; 880 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 880 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 880 push string
          mov rax, s_317
          push rax
          ; 880 push integer
          mov rax, 880
          push rax
          ; 880 push string
          mov rax, s_328
          push rax
          ; 880 push boolean
          mov rax, 1
          push rax
          ; 880 call
          call fn__pop_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 880 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 880 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 880 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000184
          ; 881 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 881 push integer
          mov rax, 16
          push rax
          ; 881 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 881 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 882 push string
          mov rax, s_385
          push rax
          ; 883 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 883 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 883 push integer
          mov rax, 0
          push rax
          ; 883 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 883 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 883 push string
          mov rax, s_317
          push rax
          ; 883 push integer
          mov rax, 883
          push rax
          ; 883 push string
          mov rax, s_328
          push rax
          ; 883 push boolean
          mov rax, 1
          push rax
          ; 883 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 884 push string
          mov rax, s_386
          push rax
          ; 884 push string
          mov rax, s_317
          push rax
          ; 884 push integer
          mov rax, 884
          push rax
          ; 884 push string
          mov rax, s_328
          push rax
          ; 884 push boolean
          mov rax, 1
          push rax
          ; 884 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 885 push string
          mov rax, s_317
          push rax
          ; 885 push integer
          mov rax, 885
          push rax
          ; 885 push string
          mov rax, s_328
          push rax
          ; 885 push boolean
          mov rax, 1
          push rax
          ; 885 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 881 jump
          jmp end_0x0000000000000184
          ; 881 label
if_0x0000000000000184: 
          ; 881 label
end_0x0000000000000184: 
          ; 880 jump
          jmp end_0x0000000000000183
          ; 880 label
if_0x0000000000000183: 
          ; 880 label
end_0x0000000000000183: 
          ; 886 drop
          pop rax
          ; 889 push integer
          mov rax, 0
          push rax
          ; 889 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 889 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 889 push integer
          mov rax, 8
          push rax
          ; 889 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 889 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 892 push string
          mov rax, s_317
          push rax
          ; 892 push integer
          mov rax, 892
          push rax
          ; 892 push string
          mov rax, s_328
          push rax
          ; 892 push boolean
          mov rax, 1
          push rax
          ; 892 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 892 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 892 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 770 jump
          jmp end_0x0000000000000133
          ; 770 label
elif_0x0000000000000177: 
          ; 894 push string
          mov rax, s_387
          push rax
          ; 894 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 894 push integer
          mov rax, 8
          push rax
          ; 894 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 894 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 894 push string
          mov rax, s_317
          push rax
          ; 894 push integer
          mov rax, 894
          push rax
          ; 894 push string
          mov rax, s_328
          push rax
          ; 894 push boolean
          mov rax, 1
          push rax
          ; 894 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 894 push string
          mov rax, s_7
          push rax
          ; 894 push string
          mov rax, s_317
          push rax
          ; 894 push integer
          mov rax, 894
          push rax
          ; 894 push string
          mov rax, s_328
          push rax
          ; 894 push boolean
          mov rax, 1
          push rax
          ; 894 call
          call fn_concatfl
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 894 push string
          mov rax, s_317
          push rax
          ; 894 push integer
          mov rax, 894
          push rax
          ; 894 push string
          mov rax, s_328
          push rax
          ; 894 push boolean
          mov rax, 1
          push rax
          ; 894 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 894 label
end_0x0000000000000133: 
          ; 300 jump
          jmp end_0x000000000000010e
          ; 300 label
elif_0x0000000000000132: 
          ; 895 duplicate
          pop rax
          push rax
          push rax
          ; 895 push integer
          mov rax, 0
          push rax
          ; 895 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 895 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 895 push integer
          mov rax, 14
          push rax
          ; 895 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 895 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000185
          ; 896 duplicate
          pop rax
          push rax
          push rax
          ; 896 push integer
          mov rax, 16
          push rax
          ; 896 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 896 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 896 push string
          mov rax, s_388
          push rax
          ; 896 push string
          mov rax, s_317
          push rax
          ; 896 push integer
          mov rax, 896
          push rax
          ; 896 push string
          mov rax, s_328
          push rax
          ; 896 push boolean
          mov rax, 1
          push rax
          ; 896 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 895 jump
          jmp end_0x000000000000010e
          ; 895 label
elif_0x0000000000000185: 
          ; 897 duplicate
          pop rax
          push rax
          push rax
          ; 897 push integer
          mov rax, 0
          push rax
          ; 897 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 897 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 897 push integer
          mov rax, 10
          push rax
          ; 897 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 897 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000186
          ; 898 duplicate
          pop rax
          push rax
          push rax
          ; 898 push integer
          mov rax, 8
          push rax
          ; 898 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 898 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 898 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 898 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 898 push string
          mov rax, s_317
          push rax
          ; 898 push integer
          mov rax, 898
          push rax
          ; 898 push string
          mov rax, s_328
          push rax
          ; 898 push boolean
          mov rax, 1
          push rax
          ; 898 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 898 push string
          mov rax, s_317
          push rax
          ; 898 push integer
          mov rax, 898
          push rax
          ; 898 push string
          mov rax, s_328
          push rax
          ; 898 push boolean
          mov rax, 1
          push rax
          ; 898 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 898 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 898 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000187
          ; 899 push integer
          mov rax, 31
          push rax
          ; 900 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 900 duplicate
          pop rax
          push rax
          push rax
          ; 900 push integer
          mov rax, 8
          push rax
          ; 900 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 900 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 900 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 900 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 900 push string
          mov rax, s_317
          push rax
          ; 900 push integer
          mov rax, 900
          push rax
          ; 900 push string
          mov rax, s_328
          push rax
          ; 900 push boolean
          mov rax, 1
          push rax
          ; 900 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 901 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 901 push integer
          mov rax, 16
          push rax
          ; 901 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 901 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 902 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 902 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 902 push string
          mov rax, s_317
          push rax
          ; 902 push integer
          mov rax, 902
          push rax
          ; 902 push string
          mov rax, s_328
          push rax
          ; 902 push boolean
          mov rax, 1
          push rax
          ; 902 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 902 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 902 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 904 push integer
          mov rax, 3
          push rax
          ; 904 push string
          mov rax, s_317
          push rax
          ; 904 push integer
          mov rax, 904
          push rax
          ; 904 push string
          mov rax, s_328
          push rax
          ; 904 push boolean
          mov rax, 1
          push rax
          ; 904 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 899 jump
          jmp end_0x0000000000000187
          ; 899 label
if_0x0000000000000187: 
          ; 905 duplicate
          pop rax
          push rax
          push rax
          ; 905 push integer
          mov rax, 8
          push rax
          ; 905 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 905 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 905 get pointer to buffer
          mov rax, buf__buffers
          push rax
          ; 905 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 905 push string
          mov rax, s_317
          push rax
          ; 905 push integer
          mov rax, 905
          push rax
          ; 905 push string
          mov rax, s_328
          push rax
          ; 905 push boolean
          mov rax, 1
          push rax
          ; 905 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 905 push string
          mov rax, s_317
          push rax
          ; 905 push integer
          mov rax, 905
          push rax
          ; 905 push string
          mov rax, s_328
          push rax
          ; 905 push boolean
          mov rax, 1
          push rax
          ; 905 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 905 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 905 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000188
          ; 906 push integer
          mov rax, 16
          push rax
          ; 907 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 907 duplicate
          pop rax
          push rax
          push rax
          ; 907 push integer
          mov rax, 8
          push rax
          ; 907 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 907 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 908 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 908 push integer
          mov rax, 16
          push rax
          ; 908 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 908 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 909 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 909 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 909 push string
          mov rax, s_317
          push rax
          ; 909 push integer
          mov rax, 909
          push rax
          ; 909 push string
          mov rax, s_328
          push rax
          ; 909 push boolean
          mov rax, 1
          push rax
          ; 909 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 909 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 909 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 911 push integer
          mov rax, 4
          push rax
          ; 911 push string
          mov rax, s_317
          push rax
          ; 911 push integer
          mov rax, 911
          push rax
          ; 911 push string
          mov rax, s_328
          push rax
          ; 911 push boolean
          mov rax, 1
          push rax
          ; 911 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 905 jump
          jmp end_0x0000000000000187
          ; 905 label
elif_0x0000000000000188: 
          ; 912 duplicate
          pop rax
          push rax
          push rax
          ; 912 push integer
          mov rax, 8
          push rax
          ; 912 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 912 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 912 push string
          mov rax, s_317
          push rax
          ; 912 push integer
          mov rax, 912
          push rax
          ; 912 push string
          mov rax, s_328
          push rax
          ; 912 push boolean
          mov rax, 1
          push rax
          ; 912 call
          call fn__current_function_contains_arg
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 912 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000189
          ; 913 duplicate
          pop rax
          push rax
          push rax
          ; 913 push integer
          mov rax, 8
          push rax
          ; 913 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 913 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 914 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 914 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 914 push string
          mov rax, s_317
          push rax
          ; 914 push integer
          mov rax, 914
          push rax
          ; 914 push string
          mov rax, s_328
          push rax
          ; 914 push boolean
          mov rax, 1
          push rax
          ; 914 call
          call fn_function_get_arg_offset
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 914 push string
          mov rax, s_317
          push rax
          ; 914 push integer
          mov rax, 914
          push rax
          ; 914 push string
          mov rax, s_328
          push rax
          ; 914 push boolean
          mov rax, 1
          push rax
          ; 914 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 915 duplicate
          pop rax
          push rax
          push rax
          ; 915 push string
          mov rax, s_317
          push rax
          ; 915 push integer
          mov rax, 915
          push rax
          ; 915 push string
          mov rax, s_328
          push rax
          ; 915 push boolean
          mov rax, 1
          push rax
          ; 915 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 915 push integer
          mov rax, 1
          push rax
          ; 915 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 915 push string
          mov rax, s_317
          push rax
          ; 915 push integer
          mov rax, 915
          push rax
          ; 915 push string
          mov rax, s_328
          push rax
          ; 915 push boolean
          mov rax, 1
          push rax
          ; 915 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 915 push string
          mov rax, s_317
          push rax
          ; 915 push integer
          mov rax, 915
          push rax
          ; 915 push string
          mov rax, s_328
          push rax
          ; 915 push boolean
          mov rax, 1
          push rax
          ; 915 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 916 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 916 push integer
          mov rax, 16
          push rax
          ; 916 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 916 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 917 push integer
          mov rax, 15
          push rax
          ; 917 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 917 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 918 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 918 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 918 push string
          mov rax, s_317
          push rax
          ; 918 push integer
          mov rax, 918
          push rax
          ; 918 push string
          mov rax, s_328
          push rax
          ; 918 push boolean
          mov rax, 1
          push rax
          ; 918 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 918 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 918 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 920 duplicate
          pop rax
          push rax
          push rax
          ; 920 push integer
          mov rax, 8
          push rax
          ; 920 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 920 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 921 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 921 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 921 push string
          mov rax, s_317
          push rax
          ; 921 push integer
          mov rax, 921
          push rax
          ; 921 push string
          mov rax, s_328
          push rax
          ; 921 push boolean
          mov rax, 1
          push rax
          ; 921 call
          call fn_function_get_arg
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 921 push integer
          mov rax, 8
          push rax
          ; 921 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 921 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 922 push string
          mov rax, s_317
          push rax
          ; 922 push integer
          mov rax, 922
          push rax
          ; 922 push string
          mov rax, s_328
          push rax
          ; 922 push boolean
          mov rax, 1
          push rax
          ; 922 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 912 jump
          jmp end_0x0000000000000187
          ; 912 label
elif_0x0000000000000189: 
          ; 923 duplicate
          pop rax
          push rax
          push rax
          ; 923 push integer
          mov rax, 8
          push rax
          ; 923 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 923 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 923 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 923 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 923 push string
          mov rax, s_317
          push rax
          ; 923 push integer
          mov rax, 923
          push rax
          ; 923 push string
          mov rax, s_328
          push rax
          ; 923 push boolean
          mov rax, 1
          push rax
          ; 923 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 923 push string
          mov rax, s_317
          push rax
          ; 923 push integer
          mov rax, 923
          push rax
          ; 923 push string
          mov rax, s_328
          push rax
          ; 923 push boolean
          mov rax, 1
          push rax
          ; 923 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 923 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 923 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000018a
          ; 925 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 925 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 925 push string
          mov rax, s_317
          push rax
          ; 925 push integer
          mov rax, 925
          push rax
          ; 925 push string
          mov rax, s_328
          push rax
          ; 925 push boolean
          mov rax, 1
          push rax
          ; 925 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 925 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 925 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000018b
          ; 926 duplicate
          pop rax
          push rax
          push rax
          ; 926 push integer
          mov rax, 16
          push rax
          ; 926 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 926 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 927 push string
          mov rax, s_389
          push rax
          ; 927 push string
          mov rax, s_317
          push rax
          ; 927 push integer
          mov rax, 927
          push rax
          ; 927 push string
          mov rax, s_328
          push rax
          ; 927 push boolean
          mov rax, 1
          push rax
          ; 927 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 926 jump
          jmp end_0x000000000000018b
          ; 926 label
if_0x000000000000018b: 
          ; 926 label
end_0x000000000000018b: 
          ; 930 get argument
          mov rax, rbp
          add rax, 88
          mov rbx, [rax]
          push rbx
          ; 931 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 931 push integer
          mov rax, 16
          push rax
          ; 931 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 931 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 932 push integer
          mov rax, 32
          push rax
          ; 932 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 932 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 933 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 933 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 933 push string
          mov rax, s_317
          push rax
          ; 933 push integer
          mov rax, 933
          push rax
          ; 933 push string
          mov rax, s_328
          push rax
          ; 933 push boolean
          mov rax, 1
          push rax
          ; 933 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 933 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 933 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 935 duplicate
          pop rax
          push rax
          push rax
          ; 935 push integer
          mov rax, 16
          push rax
          ; 935 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 935 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 935 duplicate
          pop rax
          push rax
          push rax
          ; 935 push string
          mov rax, s_317
          push rax
          ; 935 push integer
          mov rax, 935
          push rax
          ; 935 push string
          mov rax, s_328
          push rax
          ; 935 push boolean
          mov rax, 1
          push rax
          ; 935 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 935 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 936 push integer
          mov rax, 31
          push rax
          ; 936 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 936 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 937 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 937 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 937 push string
          mov rax, s_317
          push rax
          ; 937 push integer
          mov rax, 937
          push rax
          ; 937 push string
          mov rax, s_328
          push rax
          ; 937 push boolean
          mov rax, 1
          push rax
          ; 937 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 937 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 937 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 939 get pointer to buffer
          mov rax, buf__current_function
          push rax
          ; 939 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 939 push integer
          mov rax, 0
          push rax
          ; 939 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 939 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 940 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 940 push integer
          mov rax, 16
          push rax
          ; 940 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 940 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 941 push integer
          mov rax, 32
          push rax
          ; 941 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 941 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 942 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 942 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 942 push string
          mov rax, s_317
          push rax
          ; 942 push integer
          mov rax, 942
          push rax
          ; 942 push string
          mov rax, s_328
          push rax
          ; 942 push boolean
          mov rax, 1
          push rax
          ; 942 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 942 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 942 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 944 push string
          mov rax, s_280
          push rax
          ; 944 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 944 push integer
          mov rax, 16
          push rax
          ; 944 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 944 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 944 push integer
          mov rax, 29
          push rax
          ; 944 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 944 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 945 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 945 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 945 push string
          mov rax, s_317
          push rax
          ; 945 push integer
          mov rax, 945
          push rax
          ; 945 push string
          mov rax, s_328
          push rax
          ; 945 push boolean
          mov rax, 1
          push rax
          ; 945 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 945 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 945 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 947 duplicate
          pop rax
          push rax
          push rax
          ; 947 push integer
          mov rax, 8
          push rax
          ; 947 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 947 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 948 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 948 push integer
          mov rax, 16
          push rax
          ; 948 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 948 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 949 push integer
          mov rax, 4
          push rax
          ; 949 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 949 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 950 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 950 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 950 push string
          mov rax, s_317
          push rax
          ; 950 push integer
          mov rax, 950
          push rax
          ; 950 push string
          mov rax, s_328
          push rax
          ; 950 push boolean
          mov rax, 1
          push rax
          ; 950 call
          call fn_create_opcode
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 950 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 950 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 953 duplicate
          pop rax
          push rax
          push rax
          ; 953 push integer
          mov rax, 16
          push rax
          ; 953 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 953 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 954 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 954 push integer
          mov rax, 8
          push rax
          ; 954 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 954 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 954 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 954 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 954 push string
          mov rax, s_317
          push rax
          ; 954 push integer
          mov rax, 954
          push rax
          ; 954 push string
          mov rax, s_328
          push rax
          ; 954 push boolean
          mov rax, 1
          push rax
          ; 954 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 955 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 955 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 955 push integer
          mov rax, 8
          push rax
          ; 955 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 955 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 956 push string
          mov rax, s_317
          push rax
          ; 956 push integer
          mov rax, 956
          push rax
          ; 956 push string
          mov rax, s_328
          push rax
          ; 956 push boolean
          mov rax, 1
          push rax
          ; 956 call
          call fn__pop_args
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 959 push integer
          mov rax, 16
          push rax
          ; 959 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 959 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 960 duplicate
          pop rax
          push rax
          push rax
          ; 960 push integer
          mov rax, 5
          push rax
          ; 960 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 960 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000018c
          ; 961 push string
          mov rax, s_317
          push rax
          ; 961 push integer
          mov rax, 961
          push rax
          ; 961 push string
          mov rax, s_328
          push rax
          ; 961 push boolean
          mov rax, 1
          push rax
          ; 961 call
          call fn__push_type
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 961 jump
          jmp end_0x000000000000018c
          ; 961 label
if_0x000000000000018c: 
          ; 963 drop
          pop rax
          ; 963 label
end_0x000000000000018c: 
          ; 923 jump
          jmp end_0x0000000000000187
          ; 923 label
elif_0x000000000000018a: 
          ; 965 duplicate
          pop rax
          push rax
          push rax
          ; 965 push integer
          mov rax, 16
          push rax
          ; 965 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 965 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 965 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 965 push integer
          mov rax, 8
          push rax
          ; 965 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 965 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 966 push string
          mov rax, s_350
          push rax
          ; 966 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 966 push string
          mov rax, s_317
          push rax
          ; 966 push integer
          mov rax, 966
          push rax
          ; 966 push string
          mov rax, s_328
          push rax
          ; 966 push boolean
          mov rax, 1
          push rax
          ; 966 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 966 push string
          mov rax, s_317
          push rax
          ; 966 push integer
          mov rax, 966
          push rax
          ; 966 push string
          mov rax, s_328
          push rax
          ; 966 push boolean
          mov rax, 1
          push rax
          ; 966 call
          call fn_syntax_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 965 label
end_0x0000000000000187: 
          ; 897 jump
          jmp end_0x000000000000010e
          ; 897 label
elif_0x0000000000000186: 
          ; 968 push string
          mov rax, s_390
          push rax
          ; 969 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 969 push integer
          mov rax, 0
          push rax
          ; 969 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 969 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 969 push string
          mov rax, s_317
          push rax
          ; 969 push integer
          mov rax, 969
          push rax
          ; 969 push string
          mov rax, s_328
          push rax
          ; 969 push boolean
          mov rax, 1
          push rax
          ; 969 call
          call fn_token_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 969 push string
          mov rax, s_317
          push rax
          ; 969 push integer
          mov rax, 969
          push rax
          ; 969 push string
          mov rax, s_328
          push rax
          ; 969 push boolean
          mov rax, 1
          push rax
          ; 969 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 970 push string
          mov rax, s_317
          push rax
          ; 970 push integer
          mov rax, 970
          push rax
          ; 970 push string
          mov rax, s_328
          push rax
          ; 970 push boolean
          mov rax, 1
          push rax
          ; 970 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 968 label
end_0x000000000000010e: 
          ; 972 drop
          pop rax
          ; 974 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 974 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 974 push string
          mov rax, s_317
          push rax
          ; 974 push integer
          mov rax, 974
          push rax
          ; 974 push string
          mov rax, s_328
          push rax
          ; 974 push boolean
          mov rax, 1
          push rax
          ; 974 call
          call fn__peek_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 974 push string
          mov rax, s_317
          push rax
          ; 974 push integer
          mov rax, 974
          push rax
          ; 974 push string
          mov rax, s_328
          push rax
          ; 974 push boolean
          mov rax, 1
          push rax
          ; 974 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 974 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 974 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000018d
          ; 975 push string
          mov rax, s_391
          push rax
          ; 975 push string
          mov rax, s_317
          push rax
          ; 975 push integer
          mov rax, 975
          push rax
          ; 975 push string
          mov rax, s_328
          push rax
          ; 975 push boolean
          mov rax, 1
          push rax
          ; 975 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 975 jump
          jmp end_0x000000000000018d
          ; 975 label
if_0x000000000000018d: 
          ; 975 label
end_0x000000000000018d: 
          ; 95 end of while-loop
          jmp while_0x0000000000000032
while_0x0000000000000032_end: 
          ; 977 get argument
          mov rax, rbp
          add rax, 80
          mov rbx, [rax]
          push rbx
          ; 977 get argument
          mov rax, rbp
          add rax, 72
          mov rbx, [rax]
          push rbx
          ; 977 push string
          mov rax, s_317
          push rax
          ; 977 push integer
          mov rax, 977
          push rax
          ; 977 push string
          mov rax, s_328
          push rax
          ; 977 push boolean
          mov rax, 1
          push rax
          ; 977 call
          call fn__get_next_token
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 977 push integer
          mov rax, 0
          push rax
          ; 977 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 977 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 977 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 977 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 978 push string
          mov rax, s_392
          push rax
          ; 978 push string
          mov rax, s_317
          push rax
          ; 978 push integer
          mov rax, 978
          push rax
          ; 978 push string
          mov rax, s_328
          push rax
          ; 978 push boolean
          mov rax, 1
          push rax
          ; 978 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 980 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 980 push string
          mov rax, s_317
          push rax
          ; 980 push integer
          mov rax, 980
          push rax
          ; 980 push string
          mov rax, s_328
          push rax
          ; 980 push boolean
          mov rax, 1
          push rax
          ; 980 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 981 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 981 push string
          mov rax, s_317
          push rax
          ; 981 push integer
          mov rax, 981
          push rax
          ; 981 push string
          mov rax, s_328
          push rax
          ; 981 push boolean
          mov rax, 1
          push rax
          ; 981 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 983 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 983 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 94 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 94 return
          ret
          ; 986 function definition
fn__parse_core_functions: 
          push rbp
          mov rbp, rsp
          ; 988 push string
          mov rax, s_2
          push rax
          ; 988 duplicate
          pop rax
          push rax
          push rax
          ; 989 push string
          mov rax, s_317
          push rax
          ; 989 push integer
          mov rax, 989
          push rax
          ; 989 push string
          mov rax, s_393
          push rax
          ; 989 push boolean
          mov rax, 1
          push rax
          ; 989 call
          call fn_read_file
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 990 push string
          mov rax, s_317
          push rax
          ; 990 push integer
          mov rax, 990
          push rax
          ; 990 push string
          mov rax, s_393
          push rax
          ; 990 push boolean
          mov rax, 1
          push rax
          ; 990 call
          call fn_tokenize
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 991 push integer
          mov rax, 8
          push rax
          ; 991 push string
          mov rax, s_317
          push rax
          ; 991 push integer
          mov rax, 991
          push rax
          ; 991 push string
          mov rax, s_393
          push rax
          ; 991 push boolean
          mov rax, 1
          push rax
          ; 991 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 991 duplicate
          pop rax
          push rax
          push rax
          ; 991 push integer
          mov rax, 0
          push rax
          ; 991 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 991 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 992 push integer
          mov rax, 8
          push rax
          ; 992 push string
          mov rax, s_317
          push rax
          ; 992 push integer
          mov rax, 992
          push rax
          ; 992 push string
          mov rax, s_393
          push rax
          ; 992 push boolean
          mov rax, 1
          push rax
          ; 992 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 993 push integer
          mov rax, 8
          push rax
          ; 993 push string
          mov rax, s_317
          push rax
          ; 993 push integer
          mov rax, 993
          push rax
          ; 993 push string
          mov rax, s_393
          push rax
          ; 993 push boolean
          mov rax, 1
          push rax
          ; 993 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 994 push integer
          mov rax, 99
          push rax
          ; 994 push string
          mov rax, s_317
          push rax
          ; 994 push integer
          mov rax, 994
          push rax
          ; 994 push string
          mov rax, s_393
          push rax
          ; 994 push boolean
          mov rax, 1
          push rax
          ; 994 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 987 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 987 return
          ret
          ; 997 function definition
fn_parse: 
          push rbp
          mov rbp, rsp
          ; 999 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 999 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 999 push integer
          mov rax, 0
          push rax
          ; 999 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 999 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000018e
          ; 1000 push integer
          mov rax, 1
          push rax
          ; 1000 get pointer to buffer
          mov rax, buf__if_index
          push rax
          ; 1000 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1000 jump
          jmp end_0x000000000000018e
          ; 1000 label
if_0x000000000000018e: 
          ; 1000 label
end_0x000000000000018e: 
          ; 1002 get pointer to buffer
          mov rax, buf__while_index
          push rax
          ; 1002 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1002 push integer
          mov rax, 0
          push rax
          ; 1002 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1002 start of if-block
          pop rax
          test rax, rax
          jz if_0x000000000000018f
          ; 1003 push integer
          mov rax, 1
          push rax
          ; 1003 get pointer to buffer
          mov rax, buf__while_index
          push rax
          ; 1003 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1003 jump
          jmp end_0x000000000000018f
          ; 1003 label
if_0x000000000000018f: 
          ; 1003 label
end_0x000000000000018f: 
          ; 1005 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 1005 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1005 push string
          mov rax, s_317
          push rax
          ; 1005 push integer
          mov rax, 1005
          push rax
          ; 1005 push string
          mov rax, s_394
          push rax
          ; 1005 push boolean
          mov rax, 1
          push rax
          ; 1005 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1005 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1005 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000190
          ; 1006 push integer
          mov rax, 8
          push rax
          ; 1006 push string
          mov rax, s_317
          push rax
          ; 1006 push integer
          mov rax, 1006
          push rax
          ; 1006 push string
          mov rax, s_394
          push rax
          ; 1006 push boolean
          mov rax, 1
          push rax
          ; 1006 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1006 get pointer to buffer
          mov rax, buf__type_stack
          push rax
          ; 1006 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1006 jump
          jmp end_0x0000000000000190
          ; 1006 label
if_0x0000000000000190: 
          ; 1006 label
end_0x0000000000000190: 
          ; 1008 get pointer to buffer
          mov rax, buf__buffers
          push rax
          ; 1008 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1008 push string
          mov rax, s_317
          push rax
          ; 1008 push integer
          mov rax, 1008
          push rax
          ; 1008 push string
          mov rax, s_394
          push rax
          ; 1008 push boolean
          mov rax, 1
          push rax
          ; 1008 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1008 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1008 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000191
          ; 1009 push string
          mov rax, s_317
          push rax
          ; 1009 push integer
          mov rax, 1009
          push rax
          ; 1009 push string
          mov rax, s_394
          push rax
          ; 1009 push boolean
          mov rax, 1
          push rax
          ; 1009 call
          call fn_new_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1009 get pointer to buffer
          mov rax, buf__buffers
          push rax
          ; 1009 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1009 jump
          jmp end_0x0000000000000191
          ; 1009 label
if_0x0000000000000191: 
          ; 1009 label
end_0x0000000000000191: 
          ; 1011 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 1011 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1011 push string
          mov rax, s_317
          push rax
          ; 1011 push integer
          mov rax, 1011
          push rax
          ; 1011 push string
          mov rax, s_394
          push rax
          ; 1011 push boolean
          mov rax, 1
          push rax
          ; 1011 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1011 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1011 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000192
          ; 1012 push string
          mov rax, s_317
          push rax
          ; 1012 push integer
          mov rax, 1012
          push rax
          ; 1012 push string
          mov rax, s_394
          push rax
          ; 1012 push boolean
          mov rax, 1
          push rax
          ; 1012 call
          call fn_new_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1012 get pointer to buffer
          mov rax, buf__constants
          push rax
          ; 1012 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1012 jump
          jmp end_0x0000000000000192
          ; 1012 label
if_0x0000000000000192: 
          ; 1012 label
end_0x0000000000000192: 
          ; 1014 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 1014 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1014 push string
          mov rax, s_317
          push rax
          ; 1014 push integer
          mov rax, 1014
          push rax
          ; 1014 push string
          mov rax, s_394
          push rax
          ; 1014 push boolean
          mov rax, 1
          push rax
          ; 1014 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1014 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1014 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000193
          ; 1015 push integer
          mov rax, 1024
          push rax
          ; 1015 push integer
          mov rax, 24
          push rax
          ; 1015 push string
          mov rax, s_317
          push rax
          ; 1015 push integer
          mov rax, 1015
          push rax
          ; 1015 push string
          mov rax, s_394
          push rax
          ; 1015 push boolean
          mov rax, 1
          push rax
          ; 1015 call
          call fn_list_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1015 get pointer to buffer
          mov rax, buf__opcodes
          push rax
          ; 1015 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1015 jump
          jmp end_0x0000000000000193
          ; 1015 label
if_0x0000000000000193: 
          ; 1015 label
end_0x0000000000000193: 
          ; 1017 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 1017 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1017 push string
          mov rax, s_317
          push rax
          ; 1017 push integer
          mov rax, 1017
          push rax
          ; 1017 push string
          mov rax, s_394
          push rax
          ; 1017 push boolean
          mov rax, 1
          push rax
          ; 1017 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1017 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1017 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000194
          ; 1018 push string
          mov rax, s_317
          push rax
          ; 1018 push integer
          mov rax, 1018
          push rax
          ; 1018 push string
          mov rax, s_394
          push rax
          ; 1018 push boolean
          mov rax, 1
          push rax
          ; 1018 call
          call fn_new_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1018 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 1018 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1018 jump
          jmp end_0x0000000000000194
          ; 1018 label
if_0x0000000000000194: 
          ; 1018 label
end_0x0000000000000194: 
          ; 1020 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 1020 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1020 push string
          mov rax, s_317
          push rax
          ; 1020 push integer
          mov rax, 1020
          push rax
          ; 1020 push string
          mov rax, s_394
          push rax
          ; 1020 push boolean
          mov rax, 1
          push rax
          ; 1020 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1020 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1020 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000195
          ; 1021 push integer
          mov rax, 8
          push rax
          ; 1021 push string
          mov rax, s_317
          push rax
          ; 1021 push integer
          mov rax, 1021
          push rax
          ; 1021 push string
          mov rax, s_394
          push rax
          ; 1021 push boolean
          mov rax, 1
          push rax
          ; 1021 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1021 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 1021 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1022 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 1022 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 1022 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1022 push string
          mov rax, s_317
          push rax
          ; 1022 push integer
          mov rax, 1022
          push rax
          ; 1022 push string
          mov rax, s_394
          push rax
          ; 1022 push boolean
          mov rax, 1
          push rax
          ; 1022 call
          call fn_list_append_int
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1022 get pointer to buffer
          mov rax, buf__files
          push rax
          ; 1022 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1021 jump
          jmp end_0x0000000000000195
          ; 1021 label
if_0x0000000000000195: 
          ; 1021 label
end_0x0000000000000195: 
          ; 1024 push string
          mov rax, s_317
          push rax
          ; 1024 push integer
          mov rax, 1024
          push rax
          ; 1024 push string
          mov rax, s_394
          push rax
          ; 1024 push boolean
          mov rax, 1
          push rax
          ; 1024 call
          call fn__parse_core_functions
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 1026 push integer
          mov rax, 8
          push rax
          ; 1026 push string
          mov rax, s_317
          push rax
          ; 1026 push integer
          mov rax, 1026
          push rax
          ; 1026 push string
          mov rax, s_394
          push rax
          ; 1026 push boolean
          mov rax, 1
          push rax
          ; 1026 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1027 duplicate
          pop rax
          push rax
          push rax
          ; 1027 push integer
          mov rax, 0
          push rax
          ; 1027 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 1027 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 1028 duplicate
          pop rax
          push rax
          push rax
          ; 1028 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 1028 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 1028 rot
          pop rax
          pop rbx
          pop rcx
          push rbx
          push rax
          push rcx
          ; 1029 push integer
          mov rax, 8
          push rax
          ; 1029 push string
          mov rax, s_317
          push rax
          ; 1029 push integer
          mov rax, 1029
          push rax
          ; 1029 push string
          mov rax, s_394
          push rax
          ; 1029 push boolean
          mov rax, 1
          push rax
          ; 1029 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1030 push integer
          mov rax, 8
          push rax
          ; 1030 push string
          mov rax, s_317
          push rax
          ; 1030 push integer
          mov rax, 1030
          push rax
          ; 1030 push string
          mov rax, s_394
          push rax
          ; 1030 push boolean
          mov rax, 1
          push rax
          ; 1030 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1031 push integer
          mov rax, 99
          push rax
          ; 1031 push string
          mov rax, s_317
          push rax
          ; 1031 push integer
          mov rax, 1031
          push rax
          ; 1031 push string
          mov rax, s_394
          push rax
          ; 1031 push boolean
          mov rax, 1
          push rax
          ; 1031 call
          call fn__parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1032 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 1032 push string
          mov rax, s_317
          push rax
          ; 1032 push integer
          mov rax, 1032
          push rax
          ; 1032 push string
          mov rax, s_394
          push rax
          ; 1032 push boolean
          mov rax, 1
          push rax
          ; 1032 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 1034 push string
          mov rax, s_395
          push rax
          ; 1034 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 1034 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 1034 push string
          mov rax, s_317
          push rax
          ; 1034 push integer
          mov rax, 1034
          push rax
          ; 1034 push string
          mov rax, s_394
          push rax
          ; 1034 push boolean
          mov rax, 1
          push rax
          ; 1034 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1034 push string
          mov rax, s_317
          push rax
          ; 1034 push integer
          mov rax, 1034
          push rax
          ; 1034 push string
          mov rax, s_394
          push rax
          ; 1034 push boolean
          mov rax, 1
          push rax
          ; 1034 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 1034 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 1034 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000196
          ; 1035 push string
          mov rax, s_396
          push rax
          ; 1035 push string
          mov rax, s_317
          push rax
          ; 1035 push integer
          mov rax, 1035
          push rax
          ; 1035 push string
          mov rax, s_394
          push rax
          ; 1035 push boolean
          mov rax, 1
          push rax
          ; 1035 call
          call fn_error
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 1036 push integer
          mov rax, 1
          push rax
          ; 1036 push string
          mov rax, s_317
          push rax
          ; 1036 push integer
          mov rax, 1036
          push rax
          ; 1036 push string
          mov rax, s_394
          push rax
          ; 1036 push boolean
          mov rax, 1
          push rax
          ; 1036 call
          call fn_exit
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 1035 jump
          jmp end_0x0000000000000196
          ; 1035 label
if_0x0000000000000196: 
          ; 1035 label
end_0x0000000000000196: 
          ; 998 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 998 return
          ret
          ; 9 create buffer
          ; 10 create buffer
          ; 11 create buffer
          ; 12 create buffer
          ; 13 create buffer
          ; 14 create buffer
          ; 17 function definition
fn__format: 
          push rbp
          mov rbp, rsp
          ; 19 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 19 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 19 push string
          mov rax, s_397
          push rax
          ; 19 push integer
          mov rax, 19
          push rax
          ; 19 push string
          mov rax, s_398
          push rax
          ; 19 push boolean
          mov rax, 1
          push rax
          ; 19 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 19 drop
          pop rax
          ; 20 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 20 push string
          mov rax, s_397
          push rax
          ; 20 push integer
          mov rax, 20
          push rax
          ; 20 push string
          mov rax, s_398
          push rax
          ; 20 push boolean
          mov rax, 1
          push rax
          ; 20 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 21 push character
          mov rax, 32
          mov rax, 32
          push rax
          ; 21 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 21 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 21 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 21 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 22 push integer
          mov rax, 1
          push rax
          ; 22 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 23 label
while_0x0000000000000037: 
          ; 23 duplicate
          pop rax
          push rax
          push rax
          ; 23 push integer
          mov rax, 10
          push rax
          ; 23 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 23 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000037_end
          ; 24 push character
          mov rax, 32
          mov rax, 32
          push rax
          ; 24 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 24 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 24 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 24 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 25 push integer
          mov rax, 1
          push rax
          ; 25 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 23 end of while-loop
          jmp while_0x0000000000000037
while_0x0000000000000037_end: 
          ; 26 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 26 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 26 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 26 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 26 push string
          mov rax, s_397
          push rax
          ; 26 push integer
          mov rax, 26
          push rax
          ; 26 push string
          mov rax, s_398
          push rax
          ; 26 push boolean
          mov rax, 1
          push rax
          ; 26 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 26 drop
          pop rax
          ; 27 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 27 push string
          mov rax, s_397
          push rax
          ; 27 push integer
          mov rax, 27
          push rax
          ; 27 push string
          mov rax, s_398
          push rax
          ; 27 push boolean
          mov rax, 1
          push rax
          ; 27 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 27 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 27 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 27 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 28 push integer
          mov rax, 10
          push rax
          ; 28 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 28 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 29 push integer
          mov rax, 0
          push rax
          ; 29 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 29 push integer
          mov rax, 1
          push rax
          ; 29 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 29 set character value
          pop rax
          pop rbx
          mov [rax], bl
          ; 30 get pointer to buffer
          mov rax, buf__format_buffer
          push rax
          ; 18 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 18 return
          ret
          ; 33 function definition
fn__append: 
          push rbp
          mov rbp, rsp
          ; 35 get argument
          mov rax, rbp
          add rax, 64
          mov rbx, [rax]
          push rbx
          ; 35 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 35 push string
          mov rax, s_397
          push rax
          ; 35 push integer
          mov rax, 35
          push rax
          ; 35 push string
          mov rax, s_399
          push rax
          ; 35 push boolean
          mov rax, 1
          push rax
          ; 35 call
          call fn__format
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 36 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 36 push string
          mov rax, s_397
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_399
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 36 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 36 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 34 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 34 return
          ret
          ; 39 function definition
fn__append_opcode_info: 
          push rbp
          mov rbp, rsp
          ; 41 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 41 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 41 push string
          mov rax, s_397
          push rax
          ; 41 push integer
          mov rax, 41
          push rax
          ; 41 push string
          mov rax, s_400
          push rax
          ; 41 push boolean
          mov rax, 1
          push rax
          ; 41 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 42 push string
          mov rax, s_401
          push rax
          ; 42 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 42 push string
          mov rax, s_397
          push rax
          ; 42 push integer
          mov rax, 42
          push rax
          ; 42 push string
          mov rax, s_400
          push rax
          ; 42 push boolean
          mov rax, 1
          push rax
          ; 42 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 43 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 43 push string
          mov rax, s_397
          push rax
          ; 43 push integer
          mov rax, 43
          push rax
          ; 43 push string
          mov rax, s_400
          push rax
          ; 43 push boolean
          mov rax, 1
          push rax
          ; 43 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 43 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 43 push string
          mov rax, s_397
          push rax
          ; 43 push integer
          mov rax, 43
          push rax
          ; 43 push string
          mov rax, s_400
          push rax
          ; 43 push boolean
          mov rax, 1
          push rax
          ; 43 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 44 push string
          mov rax, s_134
          push rax
          ; 44 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 44 push string
          mov rax, s_397
          push rax
          ; 44 push integer
          mov rax, 44
          push rax
          ; 44 push string
          mov rax, s_400
          push rax
          ; 44 push boolean
          mov rax, 1
          push rax
          ; 44 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 45 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 45 push string
          mov rax, s_397
          push rax
          ; 45 push integer
          mov rax, 45
          push rax
          ; 45 push string
          mov rax, s_400
          push rax
          ; 45 push boolean
          mov rax, 1
          push rax
          ; 45 call
          call fn_opcode_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 45 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 45 push string
          mov rax, s_397
          push rax
          ; 45 push integer
          mov rax, 45
          push rax
          ; 45 push string
          mov rax, s_400
          push rax
          ; 45 push boolean
          mov rax, 1
          push rax
          ; 45 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 46 push string
          mov rax, s_59
          push rax
          ; 46 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 46 push integer
          mov rax, 16
          push rax
          ; 46 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 46 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 46 push string
          mov rax, s_397
          push rax
          ; 46 push integer
          mov rax, 46
          push rax
          ; 46 push string
          mov rax, s_400
          push rax
          ; 46 push boolean
          mov rax, 1
          push rax
          ; 46 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 47 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 47 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 40 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 40 return
          ret
          ; 50 function definition
fn_generate_code_x86_64_linux: 
          push rbp
          mov rbp, rsp
          ; 54 push integer
          mov rax, 512000
          push rax
          ; 54 push string
          mov rax, s_397
          push rax
          ; 54 push integer
          mov rax, 54
          push rax
          ; 54 push string
          mov rax, s_402
          push rax
          ; 54 push boolean
          mov rax, 1
          push rax
          ; 54 call
          call fn_textbuffer_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 54 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 54 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 55 push integer
          mov rax, 512000
          push rax
          ; 55 push string
          mov rax, s_397
          push rax
          ; 55 push integer
          mov rax, 55
          push rax
          ; 55 push string
          mov rax, s_402
          push rax
          ; 55 push boolean
          mov rax, 1
          push rax
          ; 55 call
          call fn_textbuffer_create
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 55 get pointer to buffer
          mov rax, buf__data
          push rax
          ; 55 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 56 push string
          mov rax, s_397
          push rax
          ; 56 push integer
          mov rax, 56
          push rax
          ; 56 push string
          mov rax, s_402
          push rax
          ; 56 push boolean
          mov rax, 1
          push rax
          ; 56 call
          call fn_new_textbuffer
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 56 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 56 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 57 push integer
          mov rax, 0
          push rax
          ; 57 get pointer to buffer
          mov rax, buf__string_index
          push rax
          ; 57 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 58 push string
          mov rax, s_397
          push rax
          ; 58 push integer
          mov rax, 58
          push rax
          ; 58 push string
          mov rax, s_402
          push rax
          ; 58 push boolean
          mov rax, 1
          push rax
          ; 58 call
          call fn_new_dict
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 58 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 58 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 60 push string
          mov rax, s_403
          push rax
          ; 60 push string
          mov rax, s_59
          push rax
          ; 60 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 60 push string
          mov rax, s_397
          push rax
          ; 60 push integer
          mov rax, 60
          push rax
          ; 60 push string
          mov rax, s_402
          push rax
          ; 60 push boolean
          mov rax, 1
          push rax
          ; 60 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 61 push string
          mov rax, s_404
          push rax
          ; 61 push string
          mov rax, s_59
          push rax
          ; 61 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 61 push string
          mov rax, s_397
          push rax
          ; 61 push integer
          mov rax, 61
          push rax
          ; 61 push string
          mov rax, s_402
          push rax
          ; 61 push boolean
          mov rax, 1
          push rax
          ; 61 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 62 push string
          mov rax, s_59
          push rax
          ; 62 push string
          mov rax, s_405
          push rax
          ; 62 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 62 push string
          mov rax, s_397
          push rax
          ; 62 push integer
          mov rax, 62
          push rax
          ; 62 push string
          mov rax, s_402
          push rax
          ; 62 push boolean
          mov rax, 1
          push rax
          ; 62 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 63 push string
          mov rax, s_406
          push rax
          ; 63 push string
          mov rax, s_59
          push rax
          ; 63 get pointer to buffer
          mov rax, buf__data
          push rax
          ; 63 push string
          mov rax, s_397
          push rax
          ; 63 push integer
          mov rax, 63
          push rax
          ; 63 push string
          mov rax, s_402
          push rax
          ; 63 push boolean
          mov rax, 1
          push rax
          ; 63 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 66 push integer
          mov rax, 0
          push rax
          ; 67 label
while_0x0000000000000038: 
          ; 67 duplicate
          pop rax
          push rax
          push rax
          ; 67 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 67 push integer
          mov rax, 8
          push rax
          ; 67 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 67 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 67 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 67 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000038_end
          ; 68 duplicate
          pop rax
          push rax
          push rax
          ; 68 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 68 push string
          mov rax, s_397
          push rax
          ; 68 push integer
          mov rax, 68
          push rax
          ; 68 push string
          mov rax, s_402
          push rax
          ; 68 push boolean
          mov rax, 1
          push rax
          ; 68 call
          call fn_list_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 71 duplicate
          pop rax
          push rax
          push rax
          ; 71 push integer
          mov rax, 16
          push rax
          ; 71 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 71 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 72 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 72 push integer
          mov rax, 0
          push rax
          ; 72 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 72 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 73 push string
          mov rax, s_397
          push rax
          ; 73 push integer
          mov rax, 73
          push rax
          ; 73 push string
          mov rax, s_402
          push rax
          ; 73 push boolean
          mov rax, 1
          push rax
          ; 73 call
          call fn__append_opcode_info
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 75 duplicate
          pop rax
          push rax
          push rax
          ; 75 push integer
          mov rax, 0
          push rax
          ; 75 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 75 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 75 push integer
          mov rax, 13
          push rax
          ; 75 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 75 start of if-block
          pop rax
          test rax, rax
          jz if_0x0000000000000197
          ; 76 push string
          mov rax, s_59
          push rax
          ; 76 push string
          mov rax, s_407
          push rax
          ; 76 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 76 push string
          mov rax, s_397
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_402
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 77 push string
          mov rax, s_59
          push rax
          ; 77 push string
          mov rax, s_408
          push rax
          ; 77 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 77 push string
          mov rax, s_397
          push rax
          ; 77 push integer
          mov rax, 77
          push rax
          ; 77 push string
          mov rax, s_402
          push rax
          ; 77 push boolean
          mov rax, 1
          push rax
          ; 77 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 78 push string
          mov rax, s_59
          push rax
          ; 78 push string
          mov rax, s_408
          push rax
          ; 78 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 78 push string
          mov rax, s_397
          push rax
          ; 78 push integer
          mov rax, 78
          push rax
          ; 78 push string
          mov rax, s_402
          push rax
          ; 78 push boolean
          mov rax, 1
          push rax
          ; 78 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 76 jump
          jmp end_0x0000000000000197
          ; 76 label
if_0x0000000000000197: 
          ; 79 duplicate
          pop rax
          push rax
          push rax
          ; 79 push integer
          mov rax, 0
          push rax
          ; 79 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 79 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 79 push integer
          mov rax, 12
          push rax
          ; 79 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 79 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000198
          ; 80 push string
          mov rax, s_59
          push rax
          ; 80 push string
          mov rax, s_407
          push rax
          ; 80 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 80 push string
          mov rax, s_397
          push rax
          ; 80 push integer
          mov rax, 80
          push rax
          ; 80 push string
          mov rax, s_402
          push rax
          ; 80 push boolean
          mov rax, 1
          push rax
          ; 80 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 79 jump
          jmp end_0x0000000000000197
          ; 79 label
elif_0x0000000000000198: 
          ; 81 duplicate
          pop rax
          push rax
          push rax
          ; 81 push integer
          mov rax, 0
          push rax
          ; 81 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 81 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 81 push integer
          mov rax, 44
          push rax
          ; 81 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 81 start of if-block
          pop rax
          test rax, rax
          jz elif_0x0000000000000199
          ; 82 push string
          mov rax, s_59
          push rax
          ; 82 push string
          mov rax, s_407
          push rax
          ; 82 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 82 push string
          mov rax, s_397
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_402
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 83 push string
          mov rax, s_59
          push rax
          ; 83 push string
          mov rax, s_409
          push rax
          ; 83 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 83 push string
          mov rax, s_397
          push rax
          ; 83 push integer
          mov rax, 83
          push rax
          ; 83 push string
          mov rax, s_402
          push rax
          ; 83 push boolean
          mov rax, 1
          push rax
          ; 83 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 84 push string
          mov rax, s_59
          push rax
          ; 84 push string
          mov rax, s_408
          push rax
          ; 84 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 84 push string
          mov rax, s_397
          push rax
          ; 84 push integer
          mov rax, 84
          push rax
          ; 84 push string
          mov rax, s_402
          push rax
          ; 84 push boolean
          mov rax, 1
          push rax
          ; 84 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 85 push string
          mov rax, s_59
          push rax
          ; 85 push string
          mov rax, s_410
          push rax
          ; 85 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 85 push string
          mov rax, s_397
          push rax
          ; 85 push integer
          mov rax, 85
          push rax
          ; 85 push string
          mov rax, s_402
          push rax
          ; 85 push boolean
          mov rax, 1
          push rax
          ; 85 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 81 jump
          jmp end_0x0000000000000197
          ; 81 label
elif_0x0000000000000199: 
          ; 86 duplicate
          pop rax
          push rax
          push rax
          ; 86 push integer
          mov rax, 0
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 86 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 86 push integer
          mov rax, 28
          push rax
          ; 86 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 86 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019a
          ; 87 push string
          mov rax, s_59
          push rax
          ; 87 push string
          mov rax, s_407
          push rax
          ; 87 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 87 push string
          mov rax, s_397
          push rax
          ; 87 push integer
          mov rax, 87
          push rax
          ; 87 push string
          mov rax, s_402
          push rax
          ; 87 push boolean
          mov rax, 1
          push rax
          ; 87 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 88 push string
          mov rax, s_59
          push rax
          ; 88 push string
          mov rax, s_409
          push rax
          ; 88 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 88 push string
          mov rax, s_397
          push rax
          ; 88 push integer
          mov rax, 88
          push rax
          ; 88 push string
          mov rax, s_402
          push rax
          ; 88 push boolean
          mov rax, 1
          push rax
          ; 88 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 89 push string
          mov rax, s_59
          push rax
          ; 89 push string
          mov rax, s_410
          push rax
          ; 89 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 89 push string
          mov rax, s_397
          push rax
          ; 89 push integer
          mov rax, 89
          push rax
          ; 89 push string
          mov rax, s_402
          push rax
          ; 89 push boolean
          mov rax, 1
          push rax
          ; 89 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 90 push string
          mov rax, s_59
          push rax
          ; 90 push string
          mov rax, s_408
          push rax
          ; 90 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 90 push string
          mov rax, s_397
          push rax
          ; 90 push integer
          mov rax, 90
          push rax
          ; 90 push string
          mov rax, s_402
          push rax
          ; 90 push boolean
          mov rax, 1
          push rax
          ; 90 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 91 push string
          mov rax, s_59
          push rax
          ; 91 push string
          mov rax, s_410
          push rax
          ; 91 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 91 push string
          mov rax, s_397
          push rax
          ; 91 push integer
          mov rax, 91
          push rax
          ; 91 push string
          mov rax, s_402
          push rax
          ; 91 push boolean
          mov rax, 1
          push rax
          ; 91 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 86 jump
          jmp end_0x0000000000000197
          ; 86 label
elif_0x000000000000019a: 
          ; 92 duplicate
          pop rax
          push rax
          push rax
          ; 92 push integer
          mov rax, 0
          push rax
          ; 92 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 92 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 92 push integer
          mov rax, 36
          push rax
          ; 92 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 92 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019b
          ; 93 push string
          mov rax, s_59
          push rax
          ; 93 push string
          mov rax, s_407
          push rax
          ; 93 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 93 push string
          mov rax, s_397
          push rax
          ; 93 push integer
          mov rax, 93
          push rax
          ; 93 push string
          mov rax, s_402
          push rax
          ; 93 push boolean
          mov rax, 1
          push rax
          ; 93 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 94 push string
          mov rax, s_59
          push rax
          ; 94 push string
          mov rax, s_409
          push rax
          ; 94 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 94 push string
          mov rax, s_397
          push rax
          ; 94 push integer
          mov rax, 94
          push rax
          ; 94 push string
          mov rax, s_402
          push rax
          ; 94 push boolean
          mov rax, 1
          push rax
          ; 94 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 95 push string
          mov rax, s_59
          push rax
          ; 95 push string
          mov rax, s_411
          push rax
          ; 95 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 95 push string
          mov rax, s_397
          push rax
          ; 95 push integer
          mov rax, 95
          push rax
          ; 95 push string
          mov rax, s_402
          push rax
          ; 95 push boolean
          mov rax, 1
          push rax
          ; 95 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 96 push string
          mov rax, s_59
          push rax
          ; 96 push string
          mov rax, s_410
          push rax
          ; 96 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 96 push string
          mov rax, s_397
          push rax
          ; 96 push integer
          mov rax, 96
          push rax
          ; 96 push string
          mov rax, s_402
          push rax
          ; 96 push boolean
          mov rax, 1
          push rax
          ; 96 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 97 push string
          mov rax, s_59
          push rax
          ; 97 push string
          mov rax, s_408
          push rax
          ; 97 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 97 push string
          mov rax, s_397
          push rax
          ; 97 push integer
          mov rax, 97
          push rax
          ; 97 push string
          mov rax, s_402
          push rax
          ; 97 push boolean
          mov rax, 1
          push rax
          ; 97 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 98 push string
          mov rax, s_59
          push rax
          ; 98 push string
          mov rax, s_412
          push rax
          ; 98 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 98 push string
          mov rax, s_397
          push rax
          ; 98 push integer
          mov rax, 98
          push rax
          ; 98 push string
          mov rax, s_402
          push rax
          ; 98 push boolean
          mov rax, 1
          push rax
          ; 98 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 92 jump
          jmp end_0x0000000000000197
          ; 92 label
elif_0x000000000000019b: 
          ; 99 duplicate
          pop rax
          push rax
          push rax
          ; 99 push integer
          mov rax, 0
          push rax
          ; 99 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 99 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 99 push integer
          mov rax, 31
          push rax
          ; 99 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 99 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019c
          ; 100 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 100 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 100 push string
          mov rax, s_397
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_402
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 101 push string
          mov rax, s_413
          push rax
          ; 101 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 101 push string
          mov rax, s_397
          push rax
          ; 101 push integer
          mov rax, 101
          push rax
          ; 101 push string
          mov rax, s_402
          push rax
          ; 101 push boolean
          mov rax, 1
          push rax
          ; 101 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 102 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 102 push integer
          mov rax, 8
          push rax
          ; 102 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 102 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 102 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 102 push string
          mov rax, s_397
          push rax
          ; 102 push integer
          mov rax, 102
          push rax
          ; 102 push string
          mov rax, s_402
          push rax
          ; 102 push boolean
          mov rax, 1
          push rax
          ; 102 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 103 push string
          mov rax, s_59
          push rax
          ; 103 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 103 push integer
          mov rax, 16
          push rax
          ; 103 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 103 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 103 push string
          mov rax, s_397
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_402
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 104 push string
          mov rax, s_59
          push rax
          ; 104 push string
          mov rax, s_408
          push rax
          ; 104 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 104 push string
          mov rax, s_397
          push rax
          ; 104 push integer
          mov rax, 104
          push rax
          ; 104 push string
          mov rax, s_402
          push rax
          ; 104 push boolean
          mov rax, 1
          push rax
          ; 104 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 105 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 105 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 99 jump
          jmp end_0x0000000000000197
          ; 99 label
elif_0x000000000000019c: 
          ; 106 duplicate
          pop rax
          push rax
          push rax
          ; 106 push integer
          mov rax, 0
          push rax
          ; 106 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 106 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 106 push integer
          mov rax, 29
          push rax
          ; 106 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 106 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019d
          ; 107 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 107 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 107 push string
          mov rax, s_397
          push rax
          ; 107 push integer
          mov rax, 107
          push rax
          ; 107 push string
          mov rax, s_402
          push rax
          ; 107 push boolean
          mov rax, 1
          push rax
          ; 107 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 108 push string
          mov rax, s_413
          push rax
          ; 108 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 108 push string
          mov rax, s_397
          push rax
          ; 108 push integer
          mov rax, 108
          push rax
          ; 108 push string
          mov rax, s_402
          push rax
          ; 108 push boolean
          mov rax, 1
          push rax
          ; 108 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 109 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 109 push integer
          mov rax, 8
          push rax
          ; 109 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 109 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 109 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 109 push string
          mov rax, s_397
          push rax
          ; 109 push integer
          mov rax, 109
          push rax
          ; 109 push string
          mov rax, s_402
          push rax
          ; 109 push boolean
          mov rax, 1
          push rax
          ; 109 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 110 push string
          mov rax, s_59
          push rax
          ; 110 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 110 push integer
          mov rax, 16
          push rax
          ; 110 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 110 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 110 push string
          mov rax, s_397
          push rax
          ; 110 push integer
          mov rax, 110
          push rax
          ; 110 push string
          mov rax, s_402
          push rax
          ; 110 push boolean
          mov rax, 1
          push rax
          ; 110 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 111 push string
          mov rax, s_59
          push rax
          ; 111 push string
          mov rax, s_408
          push rax
          ; 111 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 111 push string
          mov rax, s_397
          push rax
          ; 111 push integer
          mov rax, 111
          push rax
          ; 111 push string
          mov rax, s_402
          push rax
          ; 111 push boolean
          mov rax, 1
          push rax
          ; 111 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 112 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 112 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 106 jump
          jmp end_0x0000000000000197
          ; 106 label
elif_0x000000000000019d: 
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 push integer
          mov rax, 0
          push rax
          ; 113 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 113 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 113 push integer
          mov rax, 30
          push rax
          ; 113 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 113 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019e
          ; 114 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 114 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 114 push string
          mov rax, s_397
          push rax
          ; 114 push integer
          mov rax, 114
          push rax
          ; 114 push string
          mov rax, s_402
          push rax
          ; 114 push boolean
          mov rax, 1
          push rax
          ; 114 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 115 push string
          mov rax, s_413
          push rax
          ; 115 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 115 push string
          mov rax, s_397
          push rax
          ; 115 push integer
          mov rax, 115
          push rax
          ; 115 push string
          mov rax, s_402
          push rax
          ; 115 push boolean
          mov rax, 1
          push rax
          ; 115 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 116 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 116 push integer
          mov rax, 8
          push rax
          ; 116 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 116 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 116 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 116 push string
          mov rax, s_397
          push rax
          ; 116 push integer
          mov rax, 116
          push rax
          ; 116 push string
          mov rax, s_402
          push rax
          ; 116 push boolean
          mov rax, 1
          push rax
          ; 116 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 116 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 116 push string
          mov rax, s_397
          push rax
          ; 116 push integer
          mov rax, 116
          push rax
          ; 116 push string
          mov rax, s_402
          push rax
          ; 116 push boolean
          mov rax, 1
          push rax
          ; 116 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 116 push string
          mov rax, s_59
          push rax
          ; 116 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 116 push integer
          mov rax, 16
          push rax
          ; 116 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 116 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 116 push string
          mov rax, s_397
          push rax
          ; 116 push integer
          mov rax, 116
          push rax
          ; 116 push string
          mov rax, s_402
          push rax
          ; 116 push boolean
          mov rax, 1
          push rax
          ; 116 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 117 push string
          mov rax, s_59
          push rax
          ; 117 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 117 push integer
          mov rax, 16
          push rax
          ; 117 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 117 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 117 push string
          mov rax, s_397
          push rax
          ; 117 push integer
          mov rax, 117
          push rax
          ; 117 push string
          mov rax, s_402
          push rax
          ; 117 push boolean
          mov rax, 1
          push rax
          ; 117 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 118 push string
          mov rax, s_59
          push rax
          ; 118 push string
          mov rax, s_408
          push rax
          ; 118 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 118 push string
          mov rax, s_397
          push rax
          ; 118 push integer
          mov rax, 118
          push rax
          ; 118 push string
          mov rax, s_402
          push rax
          ; 118 push boolean
          mov rax, 1
          push rax
          ; 118 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 119 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 119 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 113 jump
          jmp end_0x0000000000000197
          ; 113 label
elif_0x000000000000019e: 
          ; 120 duplicate
          pop rax
          push rax
          push rax
          ; 120 push integer
          mov rax, 0
          push rax
          ; 120 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 120 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 120 push integer
          mov rax, 32
          push rax
          ; 120 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 120 start of if-block
          pop rax
          test rax, rax
          jz elif_0x000000000000019f
          ; 122 duplicate
          pop rax
          push rax
          push rax
          ; 122 push integer
          mov rax, 8
          push rax
          ; 122 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 122 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 122 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 122 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 122 push string
          mov rax, s_397
          push rax
          ; 122 push integer
          mov rax, 122
          push rax
          ; 122 push string
          mov rax, s_402
          push rax
          ; 122 push boolean
          mov rax, 1
          push rax
          ; 122 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 123 push string
          mov rax, s_397
          push rax
          ; 123 push integer
          mov rax, 123
          push rax
          ; 123 push string
          mov rax, s_402
          push rax
          ; 123 push boolean
          mov rax, 1
          push rax
          ; 123 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 123 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 123 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001a0
          ; 125 get pointer to buffer
          mov rax, buf__string_index
          push rax
          ; 125 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 126 push integer
          mov rax, 1
          push rax
          ; 126 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 126 duplicate
          pop rax
          push rax
          push rax
          ; 126 get pointer to buffer
          mov rax, buf__string_index
          push rax
          ; 126 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 129 push string
          mov rax, s_397
          push rax
          ; 129 push integer
          mov rax, 129
          push rax
          ; 129 push string
          mov rax, s_402
          push rax
          ; 129 push boolean
          mov rax, 1
          push rax
          ; 129 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 duplicate
          pop rax
          push rax
          push rax
          ; 130 push string
          mov rax, s_397
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_402
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 push integer
          mov rax, 3
          push rax
          ; 130 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 130 push string
          mov rax, s_397
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_402
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_malloc
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 131 push string
          mov rax, s_414
          push rax
          ; 131 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 131 push string
          mov rax, s_397
          push rax
          ; 131 push integer
          mov rax, 131
          push rax
          ; 131 push string
          mov rax, s_402
          push rax
          ; 131 push boolean
          mov rax, 1
          push rax
          ; 131 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 131 drop
          pop rax
          ; 132 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 132 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 132 push integer
          mov rax, 2
          push rax
          ; 132 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 132 push string
          mov rax, s_397
          push rax
          ; 132 push integer
          mov rax, 132
          push rax
          ; 132 push string
          mov rax, s_402
          push rax
          ; 132 push boolean
          mov rax, 1
          push rax
          ; 132 call
          call fn_strcpy
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 132 drop
          pop rax
          ; 133 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 133 drop
          pop rax
          ; 135 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 135 push integer
          mov rax, 8
          push rax
          ; 135 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 135 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 135 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 136 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 136 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 136 push string
          mov rax, s_397
          push rax
          ; 136 push integer
          mov rax, 136
          push rax
          ; 136 push string
          mov rax, s_402
          push rax
          ; 136 push boolean
          mov rax, 1
          push rax
          ; 136 call
          call fn_dict_insert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 136 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 136 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 139 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 139 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 139 push string
          mov rax, s_397
          push rax
          ; 139 push integer
          mov rax, 139
          push rax
          ; 139 push string
          mov rax, s_402
          push rax
          ; 139 push boolean
          mov rax, 1
          push rax
          ; 139 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 140 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 140 push integer
          mov rax, 8
          push rax
          ; 140 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 140 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 141 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 141 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 141 push string
          mov rax, s_397
          push rax
          ; 141 push integer
          mov rax, 141
          push rax
          ; 141 push string
          mov rax, s_402
          push rax
          ; 141 push boolean
          mov rax, 1
          push rax
          ; 141 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 141 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 141 push string
          mov rax, s_397
          push rax
          ; 141 push integer
          mov rax, 141
          push rax
          ; 141 push string
          mov rax, s_402
          push rax
          ; 141 push boolean
          mov rax, 1
          push rax
          ; 141 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 142 push string
          mov rax, s_415
          push rax
          ; 142 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 142 push string
          mov rax, s_397
          push rax
          ; 142 push integer
          mov rax, 142
          push rax
          ; 142 push string
          mov rax, s_402
          push rax
          ; 142 push boolean
          mov rax, 1
          push rax
          ; 142 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 144 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 144 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 145 duplicate
          pop rax
          push rax
          push rax
          ; 145 push integer
          mov rax, 8
          push rax
          ; 145 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 145 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 147 push integer
          mov rax, 0
          push rax
          ; 147 label
while_0x0000000000000039: 
          ; 147 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 147 push string
          mov rax, s_397
          push rax
          ; 147 push integer
          mov rax, 147
          push rax
          ; 147 push string
          mov rax, s_402
          push rax
          ; 147 push boolean
          mov rax, 1
          push rax
          ; 147 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 147 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 147 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 147 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 147 start of while-loop
          pop rax
          test rax, rax
          jz while_0x0000000000000039_end
          ; 148 duplicate
          pop rax
          push rax
          push rax
          ; 148 push integer
          mov rax, 0
          push rax
          ; 148 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 148 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001a1
          ; 149 push string
          mov rax, s_416
          push rax
          ; 149 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 149 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 149 push string
          mov rax, s_397
          push rax
          ; 149 push integer
          mov rax, 149
          push rax
          ; 149 push string
          mov rax, s_402
          push rax
          ; 149 push boolean
          mov rax, 1
          push rax
          ; 149 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 149 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 149 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 149 jump
          jmp end_0x00000000000001a1
          ; 149 label
if_0x00000000000001a1: 
          ; 149 label
end_0x00000000000001a1: 
          ; 150 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 150 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 150 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 151 duplicate
          pop rax
          push rax
          push rax
          ; 151 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 151 push character
          mov rax, 92
          mov rax, 92
          push rax
          ; 151 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 151 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001a2
          ; 152 push integer
          mov rax, 1
          push rax
          ; 152 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 152 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 153 duplicate
          pop rax
          push rax
          push rax
          ; 153 push character
          mov rax, 110
          mov rax, 110
          push rax
          ; 153 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 153 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001a3
          ; 154 push string
          mov rax, s_417
          push rax
          ; 154 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 154 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 154 push string
          mov rax, s_397
          push rax
          ; 154 push integer
          mov rax, 154
          push rax
          ; 154 push string
          mov rax, s_402
          push rax
          ; 154 push boolean
          mov rax, 1
          push rax
          ; 154 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 154 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 154 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 154 jump
          jmp end_0x00000000000001a3
          ; 154 label
if_0x00000000000001a3: 
          ; 155 duplicate
          pop rax
          push rax
          push rax
          ; 155 push character
          mov rax, 114
          mov rax, 114
          push rax
          ; 155 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 155 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001a4
          ; 156 push string
          mov rax, s_418
          push rax
          ; 156 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 156 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 156 push string
          mov rax, s_397
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_402
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 156 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 156 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 155 jump
          jmp end_0x00000000000001a3
          ; 155 label
elif_0x00000000000001a4: 
          ; 157 duplicate
          pop rax
          push rax
          push rax
          ; 157 push character
          mov rax, 92
          mov rax, 92
          push rax
          ; 157 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 157 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001a5
          ; 158 push string
          mov rax, s_419
          push rax
          ; 158 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 158 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 158 push string
          mov rax, s_397
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_402
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 158 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 158 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 157 jump
          jmp end_0x00000000000001a3
          ; 157 label
elif_0x00000000000001a5: 
          ; 159 duplicate
          pop rax
          push rax
          push rax
          ; 159 push character
          mov rax, 48
          mov rax, 48
          push rax
          ; 159 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 159 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001a6
          ; 160 push string
          mov rax, s_1
          push rax
          ; 160 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 160 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 160 push string
          mov rax, s_397
          push rax
          ; 160 push integer
          mov rax, 160
          push rax
          ; 160 push string
          mov rax, s_402
          push rax
          ; 160 push boolean
          mov rax, 1
          push rax
          ; 160 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 160 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 160 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 159 jump
          jmp end_0x00000000000001a3
          ; 159 label
elif_0x00000000000001a6: 
          ; 161 duplicate
          pop rax
          push rax
          push rax
          ; 161 push character
          mov rax, 34
          mov rax, 34
          push rax
          ; 161 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 161 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001a7
          ; 162 push string
          mov rax, s_420
          push rax
          ; 162 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 162 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 162 push string
          mov rax, s_397
          push rax
          ; 162 push integer
          mov rax, 162
          push rax
          ; 162 push string
          mov rax, s_402
          push rax
          ; 162 push boolean
          mov rax, 1
          push rax
          ; 162 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 162 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 162 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 161 jump
          jmp end_0x00000000000001a3
          ; 161 label
elif_0x00000000000001a7: 
          ; 164 push string
          mov rax, s_421
          push rax
          ; 164 push string
          mov rax, s_397
          push rax
          ; 164 push integer
          mov rax, 164
          push rax
          ; 164 push string
          mov rax, s_402
          push rax
          ; 164 push boolean
          mov rax, 1
          push rax
          ; 164 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 164 label
end_0x00000000000001a3: 
          ; 165 drop
          pop rax
          ; 166 push integer
          mov rax, 1
          push rax
          ; 166 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 152 jump
          jmp end_0x00000000000001a2
          ; 152 label
if_0x00000000000001a2: 
          ; 168 dereference character
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 168 push string
          mov rax, s_397
          push rax
          ; 168 push integer
          mov rax, 168
          push rax
          ; 168 push string
          mov rax, s_402
          push rax
          ; 168 push boolean
          mov rax, 1
          push rax
          ; 168 call
          call fn_itos
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 168 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 168 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 168 push string
          mov rax, s_397
          push rax
          ; 168 push integer
          mov rax, 168
          push rax
          ; 168 push string
          mov rax, s_402
          push rax
          ; 168 push boolean
          mov rax, 1
          push rax
          ; 168 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 168 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 168 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 168 label
end_0x00000000000001a2: 
          ; 169 push integer
          mov rax, 1
          push rax
          ; 169 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 147 end of while-loop
          jmp while_0x0000000000000039
while_0x0000000000000039_end: 
          ; 170 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 170 drop
          pop rax
          ; 172 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 172 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 174 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 174 push integer
          mov rax, 0
          push rax
          ; 174 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 174 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001a8
          ; 175 push string
          mov rax, s_422
          push rax
          ; 175 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 175 push string
          mov rax, s_397
          push rax
          ; 175 push integer
          mov rax, 175
          push rax
          ; 175 push string
          mov rax, s_402
          push rax
          ; 175 push boolean
          mov rax, 1
          push rax
          ; 175 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 175 jump
          jmp end_0x00000000000001a8
          ; 175 label
if_0x00000000000001a8: 
          ; 177 push string
          mov rax, s_1
          push rax
          ; 177 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 177 push string
          mov rax, s_397
          push rax
          ; 177 push integer
          mov rax, 177
          push rax
          ; 177 push string
          mov rax, s_402
          push rax
          ; 177 push boolean
          mov rax, 1
          push rax
          ; 177 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 177 label
end_0x00000000000001a8: 
          ; 179 duplicate
          pop rax
          push rax
          push rax
          ; 179 push integer
          mov rax, 16
          push rax
          ; 179 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 179 push string
          mov rax, s_59
          push rax
          ; 179 get pointer to buffer
          mov rax, buf__data
          push rax
          ; 179 push string
          mov rax, s_397
          push rax
          ; 179 push integer
          mov rax, 179
          push rax
          ; 179 push string
          mov rax, s_402
          push rax
          ; 179 push boolean
          mov rax, 1
          push rax
          ; 179 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 180 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 180 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 124 jump
          jmp end_0x00000000000001a0
          ; 124 label
if_0x00000000000001a0: 
          ; 124 label
end_0x00000000000001a0: 
          ; 182 duplicate
          pop rax
          push rax
          push rax
          ; 182 push integer
          mov rax, 8
          push rax
          ; 182 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 182 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 182 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 182 push string
          mov rax, s_397
          push rax
          ; 182 push integer
          mov rax, 182
          push rax
          ; 182 push string
          mov rax, s_402
          push rax
          ; 182 push boolean
          mov rax, 1
          push rax
          ; 182 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 182 push string
          mov rax, s_397
          push rax
          ; 182 push integer
          mov rax, 182
          push rax
          ; 182 push string
          mov rax, s_402
          push rax
          ; 182 push boolean
          mov rax, 1
          push rax
          ; 182 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 182 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 183 push string
          mov rax, s_423
          push rax
          ; 183 push string
          mov rax, s_397
          push rax
          ; 183 push integer
          mov rax, 183
          push rax
          ; 183 push string
          mov rax, s_402
          push rax
          ; 183 push boolean
          mov rax, 1
          push rax
          ; 183 call
          call fn_assert
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 185 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 185 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 185 push string
          mov rax, s_397
          push rax
          ; 185 push integer
          mov rax, 185
          push rax
          ; 185 push string
          mov rax, s_402
          push rax
          ; 185 push boolean
          mov rax, 1
          push rax
          ; 185 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 186 push string
          mov rax, s_413
          push rax
          ; 186 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 186 push string
          mov rax, s_397
          push rax
          ; 186 push integer
          mov rax, 186
          push rax
          ; 186 push string
          mov rax, s_402
          push rax
          ; 186 push boolean
          mov rax, 1
          push rax
          ; 186 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 187 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 187 push integer
          mov rax, 8
          push rax
          ; 187 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 187 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 188 get pointer to buffer
          mov rax, buf__string_labels
          push rax
          ; 188 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 188 push string
          mov rax, s_397
          push rax
          ; 188 push integer
          mov rax, 188
          push rax
          ; 188 push string
          mov rax, s_402
          push rax
          ; 188 push boolean
          mov rax, 1
          push rax
          ; 188 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 188 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 188 push string
          mov rax, s_397
          push rax
          ; 188 push integer
          mov rax, 188
          push rax
          ; 188 push string
          mov rax, s_402
          push rax
          ; 188 push boolean
          mov rax, 1
          push rax
          ; 188 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 189 push string
          mov rax, s_59
          push rax
          ; 189 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 189 push integer
          mov rax, 16
          push rax
          ; 189 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 189 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 189 push string
          mov rax, s_397
          push rax
          ; 189 push integer
          mov rax, 189
          push rax
          ; 189 push string
          mov rax, s_402
          push rax
          ; 189 push boolean
          mov rax, 1
          push rax
          ; 189 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 190 push string
          mov rax, s_59
          push rax
          ; 190 push string
          mov rax, s_408
          push rax
          ; 190 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 190 push string
          mov rax, s_397
          push rax
          ; 190 push integer
          mov rax, 190
          push rax
          ; 190 push string
          mov rax, s_402
          push rax
          ; 190 push boolean
          mov rax, 1
          push rax
          ; 190 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 191 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 191 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 120 jump
          jmp end_0x0000000000000197
          ; 120 label
elif_0x000000000000019f: 
          ; 192 duplicate
          pop rax
          push rax
          push rax
          ; 192 push integer
          mov rax, 0
          push rax
          ; 192 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 192 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 192 push integer
          mov rax, 14
          push rax
          ; 192 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 192 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001a9
          ; 193 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 193 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 193 push string
          mov rax, s_397
          push rax
          ; 193 push integer
          mov rax, 193
          push rax
          ; 193 push string
          mov rax, s_402
          push rax
          ; 193 push boolean
          mov rax, 1
          push rax
          ; 193 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 194 push string
          mov rax, s_379
          push rax
          ; 194 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 194 push string
          mov rax, s_397
          push rax
          ; 194 push integer
          mov rax, 194
          push rax
          ; 194 push string
          mov rax, s_402
          push rax
          ; 194 push boolean
          mov rax, 1
          push rax
          ; 194 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 195 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 195 push integer
          mov rax, 8
          push rax
          ; 195 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 195 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 195 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 195 push string
          mov rax, s_397
          push rax
          ; 195 push integer
          mov rax, 195
          push rax
          ; 195 push string
          mov rax, s_402
          push rax
          ; 195 push boolean
          mov rax, 1
          push rax
          ; 195 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 196 push string
          mov rax, s_424
          push rax
          ; 196 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 196 push string
          mov rax, s_397
          push rax
          ; 196 push integer
          mov rax, 196
          push rax
          ; 196 push string
          mov rax, s_402
          push rax
          ; 196 push boolean
          mov rax, 1
          push rax
          ; 196 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 197 duplicate
          pop rax
          push rax
          push rax
          ; 197 push integer
          mov rax, 16
          push rax
          ; 197 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 197 push string
          mov rax, s_59
          push rax
          ; 197 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 197 push string
          mov rax, s_397
          push rax
          ; 197 push integer
          mov rax, 197
          push rax
          ; 197 push string
          mov rax, s_402
          push rax
          ; 197 push boolean
          mov rax, 1
          push rax
          ; 197 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 198 push string
          mov rax, s_59
          push rax
          ; 198 push string
          mov rax, s_425
          push rax
          ; 198 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 198 push string
          mov rax, s_397
          push rax
          ; 198 push integer
          mov rax, 198
          push rax
          ; 198 push string
          mov rax, s_402
          push rax
          ; 198 push boolean
          mov rax, 1
          push rax
          ; 198 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 199 push string
          mov rax, s_59
          push rax
          ; 199 push string
          mov rax, s_426
          push rax
          ; 199 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 199 push string
          mov rax, s_397
          push rax
          ; 199 push integer
          mov rax, 199
          push rax
          ; 199 push string
          mov rax, s_402
          push rax
          ; 199 push boolean
          mov rax, 1
          push rax
          ; 199 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 200 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 200 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 192 jump
          jmp end_0x0000000000000197
          ; 192 label
elif_0x00000000000001a9: 
          ; 201 duplicate
          pop rax
          push rax
          push rax
          ; 201 push integer
          mov rax, 0
          push rax
          ; 201 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 201 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 201 push integer
          mov rax, 4
          push rax
          ; 201 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 201 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001aa
          ; 202 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 202 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 202 push string
          mov rax, s_397
          push rax
          ; 202 push integer
          mov rax, 202
          push rax
          ; 202 push string
          mov rax, s_402
          push rax
          ; 202 push boolean
          mov rax, 1
          push rax
          ; 202 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 203 push string
          mov rax, s_427
          push rax
          ; 203 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 203 push string
          mov rax, s_397
          push rax
          ; 203 push integer
          mov rax, 203
          push rax
          ; 203 push string
          mov rax, s_402
          push rax
          ; 203 push boolean
          mov rax, 1
          push rax
          ; 203 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 204 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 204 push integer
          mov rax, 8
          push rax
          ; 204 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 204 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 204 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 204 push string
          mov rax, s_397
          push rax
          ; 204 push integer
          mov rax, 204
          push rax
          ; 204 push string
          mov rax, s_402
          push rax
          ; 204 push boolean
          mov rax, 1
          push rax
          ; 204 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 205 push string
          mov rax, s_59
          push rax
          ; 205 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 205 push integer
          mov rax, 16
          push rax
          ; 205 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 205 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 205 push string
          mov rax, s_397
          push rax
          ; 205 push integer
          mov rax, 205
          push rax
          ; 205 push string
          mov rax, s_402
          push rax
          ; 205 push boolean
          mov rax, 1
          push rax
          ; 205 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 206 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 206 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 208 duplicate
          pop rax
          push rax
          push rax
          ; 208 push integer
          mov rax, 8
          push rax
          ; 208 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 208 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 208 get pointer to buffer
          mov rax, buf_functions
          push rax
          ; 208 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 208 push string
          mov rax, s_397
          push rax
          ; 208 push integer
          mov rax, 208
          push rax
          ; 208 push string
          mov rax, s_402
          push rax
          ; 208 push boolean
          mov rax, 1
          push rax
          ; 208 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 209 push integer
          mov rax, 0
          push rax
          ; 210 label
while_0x000000000000003a: 
          ; 210 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 210 push integer
          mov rax, 8
          push rax
          ; 210 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 210 push integer
          mov rax, 8
          push rax
          ; 210 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 210 push integer
          mov rax, 4
          push rax
          ; 210 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 210 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 210 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000003a_end
          ; 211 push string
          mov rax, s_59
          push rax
          ; 211 push string
          mov rax, s_409
          push rax
          ; 211 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 211 push string
          mov rax, s_397
          push rax
          ; 211 push integer
          mov rax, 211
          push rax
          ; 211 push string
          mov rax, s_402
          push rax
          ; 211 push boolean
          mov rax, 1
          push rax
          ; 211 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 212 push integer
          mov rax, 1
          push rax
          ; 212 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 210 end of while-loop
          jmp while_0x000000000000003a
while_0x000000000000003a_end: 
          ; 213 drop
          pop rax
          ; 214 push integer
          mov rax, 16
          push rax
          ; 214 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 214 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 214 push integer
          mov rax, 5
          push rax
          ; 214 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 214 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001ab
          ; 215 push string
          mov rax, s_59
          push rax
          ; 215 push string
          mov rax, s_408
          push rax
          ; 215 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 215 push string
          mov rax, s_397
          push rax
          ; 215 push integer
          mov rax, 215
          push rax
          ; 215 push string
          mov rax, s_402
          push rax
          ; 215 push boolean
          mov rax, 1
          push rax
          ; 215 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 215 jump
          jmp end_0x00000000000001ab
          ; 215 label
if_0x00000000000001ab: 
          ; 215 label
end_0x00000000000001ab: 
          ; 201 jump
          jmp end_0x0000000000000197
          ; 201 label
elif_0x00000000000001aa: 
          ; 216 duplicate
          pop rax
          push rax
          push rax
          ; 216 push integer
          mov rax, 0
          push rax
          ; 216 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 216 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 216 push integer
          mov rax, 15
          push rax
          ; 216 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 216 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ac
          ; 217 push string
          mov rax, s_59
          push rax
          ; 217 push string
          mov rax, s_428
          push rax
          ; 217 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 217 push string
          mov rax, s_397
          push rax
          ; 217 push integer
          mov rax, 217
          push rax
          ; 217 push string
          mov rax, s_402
          push rax
          ; 217 push boolean
          mov rax, 1
          push rax
          ; 217 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 218 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 218 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 218 push string
          mov rax, s_397
          push rax
          ; 218 push integer
          mov rax, 218
          push rax
          ; 218 push string
          mov rax, s_402
          push rax
          ; 218 push boolean
          mov rax, 1
          push rax
          ; 218 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 219 push string
          mov rax, s_429
          push rax
          ; 219 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 219 push string
          mov rax, s_397
          push rax
          ; 219 push integer
          mov rax, 219
          push rax
          ; 219 push string
          mov rax, s_402
          push rax
          ; 219 push boolean
          mov rax, 1
          push rax
          ; 219 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 220 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 220 push integer
          mov rax, 8
          push rax
          ; 220 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 220 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 220 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 220 push string
          mov rax, s_397
          push rax
          ; 220 push integer
          mov rax, 220
          push rax
          ; 220 push string
          mov rax, s_402
          push rax
          ; 220 push boolean
          mov rax, 1
          push rax
          ; 220 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 221 push string
          mov rax, s_59
          push rax
          ; 221 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 221 push integer
          mov rax, 16
          push rax
          ; 221 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 221 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 221 push string
          mov rax, s_397
          push rax
          ; 221 push integer
          mov rax, 221
          push rax
          ; 221 push string
          mov rax, s_402
          push rax
          ; 221 push boolean
          mov rax, 1
          push rax
          ; 221 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 222 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 222 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 223 push string
          mov rax, s_59
          push rax
          ; 223 push string
          mov rax, s_430
          push rax
          ; 223 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 223 push string
          mov rax, s_397
          push rax
          ; 223 push integer
          mov rax, 223
          push rax
          ; 223 push string
          mov rax, s_402
          push rax
          ; 223 push boolean
          mov rax, 1
          push rax
          ; 223 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 224 push string
          mov rax, s_59
          push rax
          ; 224 push string
          mov rax, s_410
          push rax
          ; 224 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 224 push string
          mov rax, s_397
          push rax
          ; 224 push integer
          mov rax, 224
          push rax
          ; 224 push string
          mov rax, s_402
          push rax
          ; 224 push boolean
          mov rax, 1
          push rax
          ; 224 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 216 jump
          jmp end_0x0000000000000197
          ; 216 label
elif_0x00000000000001ac: 
          ; 225 duplicate
          pop rax
          push rax
          push rax
          ; 225 push integer
          mov rax, 0
          push rax
          ; 225 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 225 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 225 push integer
          mov rax, 1
          push rax
          ; 225 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 225 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ad
          ; 226 push string
          mov rax, s_59
          push rax
          ; 226 push string
          mov rax, s_407
          push rax
          ; 226 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 226 push string
          mov rax, s_397
          push rax
          ; 226 push integer
          mov rax, 226
          push rax
          ; 226 push string
          mov rax, s_402
          push rax
          ; 226 push boolean
          mov rax, 1
          push rax
          ; 226 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 227 push string
          mov rax, s_59
          push rax
          ; 227 push string
          mov rax, s_409
          push rax
          ; 227 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 227 push string
          mov rax, s_397
          push rax
          ; 227 push integer
          mov rax, 227
          push rax
          ; 227 push string
          mov rax, s_402
          push rax
          ; 227 push boolean
          mov rax, 1
          push rax
          ; 227 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 228 push string
          mov rax, s_59
          push rax
          ; 228 push string
          mov rax, s_431
          push rax
          ; 228 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 228 push string
          mov rax, s_397
          push rax
          ; 228 push integer
          mov rax, 228
          push rax
          ; 228 push string
          mov rax, s_402
          push rax
          ; 228 push boolean
          mov rax, 1
          push rax
          ; 228 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 229 push string
          mov rax, s_59
          push rax
          ; 229 push string
          mov rax, s_410
          push rax
          ; 229 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 229 push string
          mov rax, s_397
          push rax
          ; 229 push integer
          mov rax, 229
          push rax
          ; 229 push string
          mov rax, s_402
          push rax
          ; 229 push boolean
          mov rax, 1
          push rax
          ; 229 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 225 jump
          jmp end_0x0000000000000197
          ; 225 label
elif_0x00000000000001ad: 
          ; 230 duplicate
          pop rax
          push rax
          push rax
          ; 230 push integer
          mov rax, 0
          push rax
          ; 230 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 230 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 230 push integer
          mov rax, 43
          push rax
          ; 230 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 230 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ae
          ; 231 push string
          mov rax, s_59
          push rax
          ; 231 push string
          mov rax, s_407
          push rax
          ; 231 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 231 push string
          mov rax, s_397
          push rax
          ; 231 push integer
          mov rax, 231
          push rax
          ; 231 push string
          mov rax, s_402
          push rax
          ; 231 push boolean
          mov rax, 1
          push rax
          ; 231 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 232 push string
          mov rax, s_59
          push rax
          ; 232 push string
          mov rax, s_409
          push rax
          ; 232 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 232 push string
          mov rax, s_397
          push rax
          ; 232 push integer
          mov rax, 232
          push rax
          ; 232 push string
          mov rax, s_402
          push rax
          ; 232 push boolean
          mov rax, 1
          push rax
          ; 232 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 233 push string
          mov rax, s_59
          push rax
          ; 233 push string
          mov rax, s_432
          push rax
          ; 233 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 233 push string
          mov rax, s_397
          push rax
          ; 233 push integer
          mov rax, 233
          push rax
          ; 233 push string
          mov rax, s_402
          push rax
          ; 233 push boolean
          mov rax, 1
          push rax
          ; 233 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 234 push string
          mov rax, s_59
          push rax
          ; 234 push string
          mov rax, s_410
          push rax
          ; 234 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 234 push string
          mov rax, s_397
          push rax
          ; 234 push integer
          mov rax, 234
          push rax
          ; 234 push string
          mov rax, s_402
          push rax
          ; 234 push boolean
          mov rax, 1
          push rax
          ; 234 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 230 jump
          jmp end_0x0000000000000197
          ; 230 label
elif_0x00000000000001ae: 
          ; 235 duplicate
          pop rax
          push rax
          push rax
          ; 235 push integer
          mov rax, 0
          push rax
          ; 235 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 235 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 235 push integer
          mov rax, 26
          push rax
          ; 235 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 235 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001af
          ; 236 push string
          mov rax, s_59
          push rax
          ; 236 push string
          mov rax, s_407
          push rax
          ; 236 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 236 push string
          mov rax, s_397
          push rax
          ; 236 push integer
          mov rax, 236
          push rax
          ; 236 push string
          mov rax, s_402
          push rax
          ; 236 push boolean
          mov rax, 1
          push rax
          ; 236 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 237 push string
          mov rax, s_59
          push rax
          ; 237 push string
          mov rax, s_409
          push rax
          ; 237 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 237 push string
          mov rax, s_397
          push rax
          ; 237 push integer
          mov rax, 237
          push rax
          ; 237 push string
          mov rax, s_402
          push rax
          ; 237 push boolean
          mov rax, 1
          push rax
          ; 237 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 238 push string
          mov rax, s_59
          push rax
          ; 238 push string
          mov rax, s_433
          push rax
          ; 238 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 238 push string
          mov rax, s_397
          push rax
          ; 238 push integer
          mov rax, 238
          push rax
          ; 238 push string
          mov rax, s_402
          push rax
          ; 238 push boolean
          mov rax, 1
          push rax
          ; 238 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 239 push string
          mov rax, s_59
          push rax
          ; 239 push string
          mov rax, s_410
          push rax
          ; 239 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 239 push string
          mov rax, s_397
          push rax
          ; 239 push integer
          mov rax, 239
          push rax
          ; 239 push string
          mov rax, s_402
          push rax
          ; 239 push boolean
          mov rax, 1
          push rax
          ; 239 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 235 jump
          jmp end_0x0000000000000197
          ; 235 label
elif_0x00000000000001af: 
          ; 240 duplicate
          pop rax
          push rax
          push rax
          ; 240 push integer
          mov rax, 0
          push rax
          ; 240 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 240 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 240 push integer
          mov rax, 11
          push rax
          ; 240 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 240 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b0
          ; 241 push string
          mov rax, s_59
          push rax
          ; 241 push string
          mov rax, s_434
          push rax
          ; 241 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 241 push string
          mov rax, s_397
          push rax
          ; 241 push integer
          mov rax, 241
          push rax
          ; 241 push string
          mov rax, s_402
          push rax
          ; 241 push boolean
          mov rax, 1
          push rax
          ; 241 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 242 push string
          mov rax, s_59
          push rax
          ; 242 push string
          mov rax, s_409
          push rax
          ; 242 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 242 push string
          mov rax, s_397
          push rax
          ; 242 push integer
          mov rax, 242
          push rax
          ; 242 push string
          mov rax, s_402
          push rax
          ; 242 push boolean
          mov rax, 1
          push rax
          ; 242 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 243 push string
          mov rax, s_59
          push rax
          ; 243 push string
          mov rax, s_407
          push rax
          ; 243 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 243 push string
          mov rax, s_397
          push rax
          ; 243 push integer
          mov rax, 243
          push rax
          ; 243 push string
          mov rax, s_402
          push rax
          ; 243 push boolean
          mov rax, 1
          push rax
          ; 243 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 244 push string
          mov rax, s_59
          push rax
          ; 244 push string
          mov rax, s_435
          push rax
          ; 244 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 244 push string
          mov rax, s_397
          push rax
          ; 244 push integer
          mov rax, 244
          push rax
          ; 244 push string
          mov rax, s_402
          push rax
          ; 244 push boolean
          mov rax, 1
          push rax
          ; 244 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 245 push string
          mov rax, s_59
          push rax
          ; 245 push string
          mov rax, s_408
          push rax
          ; 245 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 245 push string
          mov rax, s_397
          push rax
          ; 245 push integer
          mov rax, 245
          push rax
          ; 245 push string
          mov rax, s_402
          push rax
          ; 245 push boolean
          mov rax, 1
          push rax
          ; 245 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 240 jump
          jmp end_0x0000000000000197
          ; 240 label
elif_0x00000000000001b0: 
          ; 246 duplicate
          pop rax
          push rax
          push rax
          ; 246 push integer
          mov rax, 0
          push rax
          ; 246 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 246 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 246 push integer
          mov rax, 27
          push rax
          ; 246 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 246 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b1
          ; 247 push string
          mov rax, s_59
          push rax
          ; 247 push string
          mov rax, s_434
          push rax
          ; 247 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 247 push string
          mov rax, s_397
          push rax
          ; 247 push integer
          mov rax, 247
          push rax
          ; 247 push string
          mov rax, s_402
          push rax
          ; 247 push boolean
          mov rax, 1
          push rax
          ; 247 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 248 push string
          mov rax, s_59
          push rax
          ; 248 push string
          mov rax, s_409
          push rax
          ; 248 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 248 push string
          mov rax, s_397
          push rax
          ; 248 push integer
          mov rax, 248
          push rax
          ; 248 push string
          mov rax, s_402
          push rax
          ; 248 push boolean
          mov rax, 1
          push rax
          ; 248 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 249 push string
          mov rax, s_59
          push rax
          ; 249 push string
          mov rax, s_407
          push rax
          ; 249 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 249 push string
          mov rax, s_397
          push rax
          ; 249 push integer
          mov rax, 249
          push rax
          ; 249 push string
          mov rax, s_402
          push rax
          ; 249 push boolean
          mov rax, 1
          push rax
          ; 249 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 250 push string
          mov rax, s_59
          push rax
          ; 250 push string
          mov rax, s_435
          push rax
          ; 250 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 250 push string
          mov rax, s_397
          push rax
          ; 250 push integer
          mov rax, 250
          push rax
          ; 250 push string
          mov rax, s_402
          push rax
          ; 250 push boolean
          mov rax, 1
          push rax
          ; 250 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 251 push string
          mov rax, s_59
          push rax
          ; 251 push string
          mov rax, s_436
          push rax
          ; 251 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 251 push string
          mov rax, s_397
          push rax
          ; 251 push integer
          mov rax, 251
          push rax
          ; 251 push string
          mov rax, s_402
          push rax
          ; 251 push boolean
          mov rax, 1
          push rax
          ; 251 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 246 jump
          jmp end_0x0000000000000197
          ; 246 label
elif_0x00000000000001b1: 
          ; 252 duplicate
          pop rax
          push rax
          push rax
          ; 252 push integer
          mov rax, 0
          push rax
          ; 252 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 252 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 252 push integer
          mov rax, 34
          push rax
          ; 252 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 252 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b2
          ; 253 push string
          mov rax, s_59
          push rax
          ; 253 push string
          mov rax, s_407
          push rax
          ; 253 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 253 push string
          mov rax, s_397
          push rax
          ; 253 push integer
          mov rax, 253
          push rax
          ; 253 push string
          mov rax, s_402
          push rax
          ; 253 push boolean
          mov rax, 1
          push rax
          ; 253 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 254 push string
          mov rax, s_59
          push rax
          ; 254 push string
          mov rax, s_437
          push rax
          ; 254 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 254 push string
          mov rax, s_397
          push rax
          ; 254 push integer
          mov rax, 254
          push rax
          ; 254 push string
          mov rax, s_402
          push rax
          ; 254 push boolean
          mov rax, 1
          push rax
          ; 254 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 255 push string
          mov rax, s_59
          push rax
          ; 255 push string
          mov rax, s_438
          push rax
          ; 255 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 255 push string
          mov rax, s_397
          push rax
          ; 255 push integer
          mov rax, 255
          push rax
          ; 255 push string
          mov rax, s_402
          push rax
          ; 255 push boolean
          mov rax, 1
          push rax
          ; 255 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 252 jump
          jmp end_0x0000000000000197
          ; 252 label
elif_0x00000000000001b2: 
          ; 256 duplicate
          pop rax
          push rax
          push rax
          ; 256 push integer
          mov rax, 0
          push rax
          ; 256 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 256 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 256 push integer
          mov rax, 35
          push rax
          ; 256 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 256 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b3
          ; 257 push string
          mov rax, s_59
          push rax
          ; 257 push string
          mov rax, s_439
          push rax
          ; 257 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 257 push string
          mov rax, s_397
          push rax
          ; 257 push integer
          mov rax, 257
          push rax
          ; 257 push string
          mov rax, s_402
          push rax
          ; 257 push boolean
          mov rax, 1
          push rax
          ; 257 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 256 jump
          jmp end_0x0000000000000197
          ; 256 label
elif_0x00000000000001b3: 
          ; 258 duplicate
          pop rax
          push rax
          push rax
          ; 258 push integer
          mov rax, 0
          push rax
          ; 258 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 258 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 258 push integer
          mov rax, 2
          push rax
          ; 258 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 258 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b4
          ; 259 push string
          mov rax, s_59
          push rax
          ; 259 push string
          mov rax, s_407
          push rax
          ; 259 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 259 push string
          mov rax, s_397
          push rax
          ; 259 push integer
          mov rax, 259
          push rax
          ; 259 push string
          mov rax, s_402
          push rax
          ; 259 push boolean
          mov rax, 1
          push rax
          ; 259 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 260 push string
          mov rax, s_59
          push rax
          ; 260 push string
          mov rax, s_409
          push rax
          ; 260 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 260 push string
          mov rax, s_397
          push rax
          ; 260 push integer
          mov rax, 260
          push rax
          ; 260 push string
          mov rax, s_402
          push rax
          ; 260 push boolean
          mov rax, 1
          push rax
          ; 260 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 261 push string
          mov rax, s_59
          push rax
          ; 261 push string
          mov rax, s_440
          push rax
          ; 261 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 261 push string
          mov rax, s_397
          push rax
          ; 261 push integer
          mov rax, 261
          push rax
          ; 261 push string
          mov rax, s_402
          push rax
          ; 261 push boolean
          mov rax, 1
          push rax
          ; 261 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 262 push string
          mov rax, s_59
          push rax
          ; 262 push string
          mov rax, s_410
          push rax
          ; 262 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 262 push string
          mov rax, s_397
          push rax
          ; 262 push integer
          mov rax, 262
          push rax
          ; 262 push string
          mov rax, s_402
          push rax
          ; 262 push boolean
          mov rax, 1
          push rax
          ; 262 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 258 jump
          jmp end_0x0000000000000197
          ; 258 label
elif_0x00000000000001b4: 
          ; 263 duplicate
          pop rax
          push rax
          push rax
          ; 263 push integer
          mov rax, 0
          push rax
          ; 263 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 263 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 263 push integer
          mov rax, 3
          push rax
          ; 263 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 263 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b5
          ; 264 push string
          mov rax, s_59
          push rax
          ; 264 push string
          mov rax, s_407
          push rax
          ; 264 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 264 push string
          mov rax, s_397
          push rax
          ; 264 push integer
          mov rax, 264
          push rax
          ; 264 push string
          mov rax, s_402
          push rax
          ; 264 push boolean
          mov rax, 1
          push rax
          ; 264 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 265 push string
          mov rax, s_59
          push rax
          ; 265 push string
          mov rax, s_409
          push rax
          ; 265 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 265 push string
          mov rax, s_397
          push rax
          ; 265 push integer
          mov rax, 265
          push rax
          ; 265 push string
          mov rax, s_402
          push rax
          ; 265 push boolean
          mov rax, 1
          push rax
          ; 265 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 266 push string
          mov rax, s_59
          push rax
          ; 266 push string
          mov rax, s_441
          push rax
          ; 266 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 266 push string
          mov rax, s_397
          push rax
          ; 266 push integer
          mov rax, 266
          push rax
          ; 266 push string
          mov rax, s_402
          push rax
          ; 266 push boolean
          mov rax, 1
          push rax
          ; 266 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 267 push string
          mov rax, s_59
          push rax
          ; 267 push string
          mov rax, s_410
          push rax
          ; 267 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 267 push string
          mov rax, s_397
          push rax
          ; 267 push integer
          mov rax, 267
          push rax
          ; 267 push string
          mov rax, s_402
          push rax
          ; 267 push boolean
          mov rax, 1
          push rax
          ; 267 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 263 jump
          jmp end_0x0000000000000197
          ; 263 label
elif_0x00000000000001b5: 
          ; 268 duplicate
          pop rax
          push rax
          push rax
          ; 268 push integer
          mov rax, 0
          push rax
          ; 268 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 268 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 268 push integer
          mov rax, 16
          push rax
          ; 268 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 268 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b6
          ; 269 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 269 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 269 push string
          mov rax, s_397
          push rax
          ; 269 push integer
          mov rax, 269
          push rax
          ; 269 push string
          mov rax, s_402
          push rax
          ; 269 push boolean
          mov rax, 1
          push rax
          ; 269 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 270 push string
          mov rax, s_442
          push rax
          ; 270 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 270 push string
          mov rax, s_397
          push rax
          ; 270 push integer
          mov rax, 270
          push rax
          ; 270 push string
          mov rax, s_402
          push rax
          ; 270 push boolean
          mov rax, 1
          push rax
          ; 270 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 271 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 271 push integer
          mov rax, 8
          push rax
          ; 271 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 271 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 271 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 271 push string
          mov rax, s_397
          push rax
          ; 271 push integer
          mov rax, 271
          push rax
          ; 271 push string
          mov rax, s_402
          push rax
          ; 271 push boolean
          mov rax, 1
          push rax
          ; 271 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 272 push string
          mov rax, s_59
          push rax
          ; 272 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 272 push integer
          mov rax, 16
          push rax
          ; 272 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 272 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 272 push string
          mov rax, s_397
          push rax
          ; 272 push integer
          mov rax, 272
          push rax
          ; 272 push string
          mov rax, s_402
          push rax
          ; 272 push boolean
          mov rax, 1
          push rax
          ; 272 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 273 push string
          mov rax, s_59
          push rax
          ; 273 push string
          mov rax, s_408
          push rax
          ; 273 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 273 push string
          mov rax, s_397
          push rax
          ; 273 push integer
          mov rax, 273
          push rax
          ; 273 push string
          mov rax, s_402
          push rax
          ; 273 push boolean
          mov rax, 1
          push rax
          ; 273 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 274 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 274 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 268 jump
          jmp end_0x0000000000000197
          ; 268 label
elif_0x00000000000001b6: 
          ; 275 duplicate
          pop rax
          push rax
          push rax
          ; 275 push integer
          mov rax, 0
          push rax
          ; 275 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 275 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 275 push integer
          mov rax, 6
          push rax
          ; 275 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 275 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b7
          ; 276 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 276 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 276 push string
          mov rax, s_397
          push rax
          ; 276 push integer
          mov rax, 276
          push rax
          ; 276 push string
          mov rax, s_402
          push rax
          ; 276 push boolean
          mov rax, 1
          push rax
          ; 276 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 277 push string
          mov rax, s_443
          push rax
          ; 277 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 277 push string
          mov rax, s_397
          push rax
          ; 277 push integer
          mov rax, 277
          push rax
          ; 277 push string
          mov rax, s_402
          push rax
          ; 277 push boolean
          mov rax, 1
          push rax
          ; 277 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 278 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 278 push integer
          mov rax, 8
          push rax
          ; 278 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 278 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 278 push integer
          mov rax, 0
          push rax
          ; 278 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 278 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 279 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 279 push string
          mov rax, s_397
          push rax
          ; 279 push integer
          mov rax, 279
          push rax
          ; 279 push string
          mov rax, s_402
          push rax
          ; 279 push boolean
          mov rax, 1
          push rax
          ; 279 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 280 push string
          mov rax, s_444
          push rax
          ; 280 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 280 push string
          mov rax, s_397
          push rax
          ; 280 push integer
          mov rax, 280
          push rax
          ; 280 push string
          mov rax, s_402
          push rax
          ; 280 push boolean
          mov rax, 1
          push rax
          ; 280 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 281 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 281 push integer
          mov rax, 8
          push rax
          ; 281 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 281 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 281 push integer
          mov rax, 8
          push rax
          ; 281 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 281 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 282 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 282 push string
          mov rax, s_397
          push rax
          ; 282 push integer
          mov rax, 282
          push rax
          ; 282 push string
          mov rax, s_402
          push rax
          ; 282 push boolean
          mov rax, 1
          push rax
          ; 282 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 284 duplicate
          pop rax
          push rax
          push rax
          ; 284 push integer
          mov rax, 16
          push rax
          ; 284 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 284 push string
          mov rax, s_59
          push rax
          ; 284 get pointer to buffer
          mov rax, buf__data
          push rax
          ; 284 push string
          mov rax, s_397
          push rax
          ; 284 push integer
          mov rax, 284
          push rax
          ; 284 push string
          mov rax, s_402
          push rax
          ; 284 push boolean
          mov rax, 1
          push rax
          ; 284 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 285 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 285 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 275 jump
          jmp end_0x0000000000000197
          ; 275 label
elif_0x00000000000001b7: 
          ; 286 duplicate
          pop rax
          push rax
          push rax
          ; 286 push integer
          mov rax, 0
          push rax
          ; 286 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 286 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 286 push integer
          mov rax, 18
          push rax
          ; 286 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 286 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b8
          ; 287 push string
          mov rax, s_59
          push rax
          ; 287 push string
          mov rax, s_445
          push rax
          ; 287 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 287 push string
          mov rax, s_397
          push rax
          ; 287 push integer
          mov rax, 287
          push rax
          ; 287 push string
          mov rax, s_402
          push rax
          ; 287 push boolean
          mov rax, 1
          push rax
          ; 287 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 288 push string
          mov rax, s_59
          push rax
          ; 288 push string
          mov rax, s_446
          push rax
          ; 288 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 288 push string
          mov rax, s_397
          push rax
          ; 288 push integer
          mov rax, 288
          push rax
          ; 288 push string
          mov rax, s_402
          push rax
          ; 288 push boolean
          mov rax, 1
          push rax
          ; 288 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 289 push string
          mov rax, s_59
          push rax
          ; 289 push string
          mov rax, s_411
          push rax
          ; 289 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 289 push string
          mov rax, s_397
          push rax
          ; 289 push integer
          mov rax, 289
          push rax
          ; 289 push string
          mov rax, s_402
          push rax
          ; 289 push boolean
          mov rax, 1
          push rax
          ; 289 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 290 push string
          mov rax, s_59
          push rax
          ; 290 push string
          mov rax, s_447
          push rax
          ; 290 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 290 push string
          mov rax, s_397
          push rax
          ; 290 push integer
          mov rax, 290
          push rax
          ; 290 push string
          mov rax, s_402
          push rax
          ; 290 push boolean
          mov rax, 1
          push rax
          ; 290 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 291 push string
          mov rax, s_59
          push rax
          ; 291 push string
          mov rax, s_448
          push rax
          ; 291 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 291 push string
          mov rax, s_397
          push rax
          ; 291 push integer
          mov rax, 291
          push rax
          ; 291 push string
          mov rax, s_402
          push rax
          ; 291 push boolean
          mov rax, 1
          push rax
          ; 291 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 292 push string
          mov rax, s_59
          push rax
          ; 292 push string
          mov rax, s_449
          push rax
          ; 292 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 292 push string
          mov rax, s_397
          push rax
          ; 292 push integer
          mov rax, 292
          push rax
          ; 292 push string
          mov rax, s_402
          push rax
          ; 292 push boolean
          mov rax, 1
          push rax
          ; 292 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 293 push string
          mov rax, s_59
          push rax
          ; 293 push string
          mov rax, s_408
          push rax
          ; 293 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 293 push string
          mov rax, s_397
          push rax
          ; 293 push integer
          mov rax, 293
          push rax
          ; 293 push string
          mov rax, s_402
          push rax
          ; 293 push boolean
          mov rax, 1
          push rax
          ; 293 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 286 jump
          jmp end_0x0000000000000197
          ; 286 label
elif_0x00000000000001b8: 
          ; 294 duplicate
          pop rax
          push rax
          push rax
          ; 294 push integer
          mov rax, 0
          push rax
          ; 294 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 294 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 294 push integer
          mov rax, 23
          push rax
          ; 294 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 294 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001b9
          ; 295 push string
          mov rax, s_59
          push rax
          ; 295 push string
          mov rax, s_445
          push rax
          ; 295 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 295 push string
          mov rax, s_397
          push rax
          ; 295 push integer
          mov rax, 295
          push rax
          ; 295 push string
          mov rax, s_402
          push rax
          ; 295 push boolean
          mov rax, 1
          push rax
          ; 295 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 296 push string
          mov rax, s_59
          push rax
          ; 296 push string
          mov rax, s_446
          push rax
          ; 296 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 296 push string
          mov rax, s_397
          push rax
          ; 296 push integer
          mov rax, 296
          push rax
          ; 296 push string
          mov rax, s_402
          push rax
          ; 296 push boolean
          mov rax, 1
          push rax
          ; 296 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 297 push string
          mov rax, s_59
          push rax
          ; 297 push string
          mov rax, s_411
          push rax
          ; 297 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 297 push string
          mov rax, s_397
          push rax
          ; 297 push integer
          mov rax, 297
          push rax
          ; 297 push string
          mov rax, s_402
          push rax
          ; 297 push boolean
          mov rax, 1
          push rax
          ; 297 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 298 push string
          mov rax, s_59
          push rax
          ; 298 push string
          mov rax, s_447
          push rax
          ; 298 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 298 push string
          mov rax, s_397
          push rax
          ; 298 push integer
          mov rax, 298
          push rax
          ; 298 push string
          mov rax, s_402
          push rax
          ; 298 push boolean
          mov rax, 1
          push rax
          ; 298 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 299 push string
          mov rax, s_59
          push rax
          ; 299 push string
          mov rax, s_448
          push rax
          ; 299 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 299 push string
          mov rax, s_397
          push rax
          ; 299 push integer
          mov rax, 299
          push rax
          ; 299 push string
          mov rax, s_402
          push rax
          ; 299 push boolean
          mov rax, 1
          push rax
          ; 299 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 300 push string
          mov rax, s_59
          push rax
          ; 300 push string
          mov rax, s_450
          push rax
          ; 300 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 300 push string
          mov rax, s_397
          push rax
          ; 300 push integer
          mov rax, 300
          push rax
          ; 300 push string
          mov rax, s_402
          push rax
          ; 300 push boolean
          mov rax, 1
          push rax
          ; 300 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 301 push string
          mov rax, s_59
          push rax
          ; 301 push string
          mov rax, s_408
          push rax
          ; 301 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 301 push string
          mov rax, s_397
          push rax
          ; 301 push integer
          mov rax, 301
          push rax
          ; 301 push string
          mov rax, s_402
          push rax
          ; 301 push boolean
          mov rax, 1
          push rax
          ; 301 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 294 jump
          jmp end_0x0000000000000197
          ; 294 label
elif_0x00000000000001b9: 
          ; 302 duplicate
          pop rax
          push rax
          push rax
          ; 302 push integer
          mov rax, 0
          push rax
          ; 302 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 302 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 302 push integer
          mov rax, 20
          push rax
          ; 302 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 302 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ba
          ; 303 push string
          mov rax, s_59
          push rax
          ; 303 push string
          mov rax, s_445
          push rax
          ; 303 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 303 push string
          mov rax, s_397
          push rax
          ; 303 push integer
          mov rax, 303
          push rax
          ; 303 push string
          mov rax, s_402
          push rax
          ; 303 push boolean
          mov rax, 1
          push rax
          ; 303 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 304 push string
          mov rax, s_59
          push rax
          ; 304 push string
          mov rax, s_446
          push rax
          ; 304 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 304 push string
          mov rax, s_397
          push rax
          ; 304 push integer
          mov rax, 304
          push rax
          ; 304 push string
          mov rax, s_402
          push rax
          ; 304 push boolean
          mov rax, 1
          push rax
          ; 304 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 305 push string
          mov rax, s_59
          push rax
          ; 305 push string
          mov rax, s_411
          push rax
          ; 305 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 305 push string
          mov rax, s_397
          push rax
          ; 305 push integer
          mov rax, 305
          push rax
          ; 305 push string
          mov rax, s_402
          push rax
          ; 305 push boolean
          mov rax, 1
          push rax
          ; 305 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 306 push string
          mov rax, s_59
          push rax
          ; 306 push string
          mov rax, s_447
          push rax
          ; 306 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 306 push string
          mov rax, s_397
          push rax
          ; 306 push integer
          mov rax, 306
          push rax
          ; 306 push string
          mov rax, s_402
          push rax
          ; 306 push boolean
          mov rax, 1
          push rax
          ; 306 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 307 push string
          mov rax, s_59
          push rax
          ; 307 push string
          mov rax, s_448
          push rax
          ; 307 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 307 push string
          mov rax, s_397
          push rax
          ; 307 push integer
          mov rax, 307
          push rax
          ; 307 push string
          mov rax, s_402
          push rax
          ; 307 push boolean
          mov rax, 1
          push rax
          ; 307 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 308 push string
          mov rax, s_59
          push rax
          ; 308 push string
          mov rax, s_451
          push rax
          ; 308 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 308 push string
          mov rax, s_397
          push rax
          ; 308 push integer
          mov rax, 308
          push rax
          ; 308 push string
          mov rax, s_402
          push rax
          ; 308 push boolean
          mov rax, 1
          push rax
          ; 308 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 309 push string
          mov rax, s_59
          push rax
          ; 309 push string
          mov rax, s_408
          push rax
          ; 309 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 309 push string
          mov rax, s_397
          push rax
          ; 309 push integer
          mov rax, 309
          push rax
          ; 309 push string
          mov rax, s_402
          push rax
          ; 309 push boolean
          mov rax, 1
          push rax
          ; 309 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 302 jump
          jmp end_0x0000000000000197
          ; 302 label
elif_0x00000000000001ba: 
          ; 310 duplicate
          pop rax
          push rax
          push rax
          ; 310 push integer
          mov rax, 0
          push rax
          ; 310 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 310 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 310 push integer
          mov rax, 19
          push rax
          ; 310 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 310 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001bb
          ; 311 push string
          mov rax, s_59
          push rax
          ; 311 push string
          mov rax, s_445
          push rax
          ; 311 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 311 push string
          mov rax, s_397
          push rax
          ; 311 push integer
          mov rax, 311
          push rax
          ; 311 push string
          mov rax, s_402
          push rax
          ; 311 push boolean
          mov rax, 1
          push rax
          ; 311 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 312 push string
          mov rax, s_59
          push rax
          ; 312 push string
          mov rax, s_446
          push rax
          ; 312 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 312 push string
          mov rax, s_397
          push rax
          ; 312 push integer
          mov rax, 312
          push rax
          ; 312 push string
          mov rax, s_402
          push rax
          ; 312 push boolean
          mov rax, 1
          push rax
          ; 312 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 313 push string
          mov rax, s_59
          push rax
          ; 313 push string
          mov rax, s_411
          push rax
          ; 313 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 313 push string
          mov rax, s_397
          push rax
          ; 313 push integer
          mov rax, 313
          push rax
          ; 313 push string
          mov rax, s_402
          push rax
          ; 313 push boolean
          mov rax, 1
          push rax
          ; 313 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 314 push string
          mov rax, s_59
          push rax
          ; 314 push string
          mov rax, s_447
          push rax
          ; 314 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 314 push string
          mov rax, s_397
          push rax
          ; 314 push integer
          mov rax, 314
          push rax
          ; 314 push string
          mov rax, s_402
          push rax
          ; 314 push boolean
          mov rax, 1
          push rax
          ; 314 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 315 push string
          mov rax, s_59
          push rax
          ; 315 push string
          mov rax, s_448
          push rax
          ; 315 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 315 push string
          mov rax, s_397
          push rax
          ; 315 push integer
          mov rax, 315
          push rax
          ; 315 push string
          mov rax, s_402
          push rax
          ; 315 push boolean
          mov rax, 1
          push rax
          ; 315 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 316 push string
          mov rax, s_59
          push rax
          ; 316 push string
          mov rax, s_452
          push rax
          ; 316 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 316 push string
          mov rax, s_397
          push rax
          ; 316 push integer
          mov rax, 316
          push rax
          ; 316 push string
          mov rax, s_402
          push rax
          ; 316 push boolean
          mov rax, 1
          push rax
          ; 316 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 317 push string
          mov rax, s_59
          push rax
          ; 317 push string
          mov rax, s_408
          push rax
          ; 317 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 317 push string
          mov rax, s_397
          push rax
          ; 317 push integer
          mov rax, 317
          push rax
          ; 317 push string
          mov rax, s_402
          push rax
          ; 317 push boolean
          mov rax, 1
          push rax
          ; 317 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 310 jump
          jmp end_0x0000000000000197
          ; 310 label
elif_0x00000000000001bb: 
          ; 318 duplicate
          pop rax
          push rax
          push rax
          ; 318 push integer
          mov rax, 0
          push rax
          ; 318 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 318 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 318 push integer
          mov rax, 22
          push rax
          ; 318 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 318 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001bc
          ; 319 push string
          mov rax, s_59
          push rax
          ; 319 push string
          mov rax, s_445
          push rax
          ; 319 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 319 push string
          mov rax, s_397
          push rax
          ; 319 push integer
          mov rax, 319
          push rax
          ; 319 push string
          mov rax, s_402
          push rax
          ; 319 push boolean
          mov rax, 1
          push rax
          ; 319 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 320 push string
          mov rax, s_59
          push rax
          ; 320 push string
          mov rax, s_446
          push rax
          ; 320 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 320 push string
          mov rax, s_397
          push rax
          ; 320 push integer
          mov rax, 320
          push rax
          ; 320 push string
          mov rax, s_402
          push rax
          ; 320 push boolean
          mov rax, 1
          push rax
          ; 320 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 321 push string
          mov rax, s_59
          push rax
          ; 321 push string
          mov rax, s_411
          push rax
          ; 321 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 321 push string
          mov rax, s_397
          push rax
          ; 321 push integer
          mov rax, 321
          push rax
          ; 321 push string
          mov rax, s_402
          push rax
          ; 321 push boolean
          mov rax, 1
          push rax
          ; 321 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 322 push string
          mov rax, s_59
          push rax
          ; 322 push string
          mov rax, s_447
          push rax
          ; 322 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 322 push string
          mov rax, s_397
          push rax
          ; 322 push integer
          mov rax, 322
          push rax
          ; 322 push string
          mov rax, s_402
          push rax
          ; 322 push boolean
          mov rax, 1
          push rax
          ; 322 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 323 push string
          mov rax, s_59
          push rax
          ; 323 push string
          mov rax, s_448
          push rax
          ; 323 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 323 push string
          mov rax, s_397
          push rax
          ; 323 push integer
          mov rax, 323
          push rax
          ; 323 push string
          mov rax, s_402
          push rax
          ; 323 push boolean
          mov rax, 1
          push rax
          ; 323 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 324 push string
          mov rax, s_59
          push rax
          ; 324 push string
          mov rax, s_453
          push rax
          ; 324 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 324 push string
          mov rax, s_397
          push rax
          ; 324 push integer
          mov rax, 324
          push rax
          ; 324 push string
          mov rax, s_402
          push rax
          ; 324 push boolean
          mov rax, 1
          push rax
          ; 324 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 325 push string
          mov rax, s_59
          push rax
          ; 325 push string
          mov rax, s_408
          push rax
          ; 325 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 325 push string
          mov rax, s_397
          push rax
          ; 325 push integer
          mov rax, 325
          push rax
          ; 325 push string
          mov rax, s_402
          push rax
          ; 325 push boolean
          mov rax, 1
          push rax
          ; 325 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 318 jump
          jmp end_0x0000000000000197
          ; 318 label
elif_0x00000000000001bc: 
          ; 326 duplicate
          pop rax
          push rax
          push rax
          ; 326 push integer
          mov rax, 0
          push rax
          ; 326 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 326 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 326 push integer
          mov rax, 21
          push rax
          ; 326 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 326 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001bd
          ; 327 push string
          mov rax, s_59
          push rax
          ; 327 push string
          mov rax, s_445
          push rax
          ; 327 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 327 push string
          mov rax, s_397
          push rax
          ; 327 push integer
          mov rax, 327
          push rax
          ; 327 push string
          mov rax, s_402
          push rax
          ; 327 push boolean
          mov rax, 1
          push rax
          ; 327 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 328 push string
          mov rax, s_59
          push rax
          ; 328 push string
          mov rax, s_446
          push rax
          ; 328 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 328 push string
          mov rax, s_397
          push rax
          ; 328 push integer
          mov rax, 328
          push rax
          ; 328 push string
          mov rax, s_402
          push rax
          ; 328 push boolean
          mov rax, 1
          push rax
          ; 328 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 329 push string
          mov rax, s_59
          push rax
          ; 329 push string
          mov rax, s_411
          push rax
          ; 329 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 329 push string
          mov rax, s_397
          push rax
          ; 329 push integer
          mov rax, 329
          push rax
          ; 329 push string
          mov rax, s_402
          push rax
          ; 329 push boolean
          mov rax, 1
          push rax
          ; 329 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 330 push string
          mov rax, s_59
          push rax
          ; 330 push string
          mov rax, s_447
          push rax
          ; 330 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 330 push string
          mov rax, s_397
          push rax
          ; 330 push integer
          mov rax, 330
          push rax
          ; 330 push string
          mov rax, s_402
          push rax
          ; 330 push boolean
          mov rax, 1
          push rax
          ; 330 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 331 push string
          mov rax, s_59
          push rax
          ; 331 push string
          mov rax, s_448
          push rax
          ; 331 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 331 push string
          mov rax, s_397
          push rax
          ; 331 push integer
          mov rax, 331
          push rax
          ; 331 push string
          mov rax, s_402
          push rax
          ; 331 push boolean
          mov rax, 1
          push rax
          ; 331 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 332 push string
          mov rax, s_59
          push rax
          ; 332 push string
          mov rax, s_454
          push rax
          ; 332 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 332 push string
          mov rax, s_397
          push rax
          ; 332 push integer
          mov rax, 332
          push rax
          ; 332 push string
          mov rax, s_402
          push rax
          ; 332 push boolean
          mov rax, 1
          push rax
          ; 332 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 333 push string
          mov rax, s_59
          push rax
          ; 333 push string
          mov rax, s_408
          push rax
          ; 333 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 333 push string
          mov rax, s_397
          push rax
          ; 333 push integer
          mov rax, 333
          push rax
          ; 333 push string
          mov rax, s_402
          push rax
          ; 333 push boolean
          mov rax, 1
          push rax
          ; 333 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 326 jump
          jmp end_0x0000000000000197
          ; 326 label
elif_0x00000000000001bd: 
          ; 334 duplicate
          pop rax
          push rax
          push rax
          ; 334 push integer
          mov rax, 0
          push rax
          ; 334 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 334 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 334 push integer
          mov rax, 17
          push rax
          ; 334 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 334 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001be
          ; 335 push string
          mov rax, s_59
          push rax
          ; 335 push string
          mov rax, s_407
          push rax
          ; 335 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 335 push string
          mov rax, s_397
          push rax
          ; 335 push integer
          mov rax, 335
          push rax
          ; 335 push string
          mov rax, s_402
          push rax
          ; 335 push boolean
          mov rax, 1
          push rax
          ; 335 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 336 push string
          mov rax, s_59
          push rax
          ; 336 push string
          mov rax, s_455
          push rax
          ; 336 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 336 push string
          mov rax, s_397
          push rax
          ; 336 push integer
          mov rax, 336
          push rax
          ; 336 push string
          mov rax, s_402
          push rax
          ; 336 push boolean
          mov rax, 1
          push rax
          ; 336 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 337 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 337 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 337 push string
          mov rax, s_397
          push rax
          ; 337 push integer
          mov rax, 337
          push rax
          ; 337 push string
          mov rax, s_402
          push rax
          ; 337 push boolean
          mov rax, 1
          push rax
          ; 337 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 338 push string
          mov rax, s_456
          push rax
          ; 338 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 338 push string
          mov rax, s_397
          push rax
          ; 338 push integer
          mov rax, 338
          push rax
          ; 338 push string
          mov rax, s_402
          push rax
          ; 338 push boolean
          mov rax, 1
          push rax
          ; 338 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 339 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 339 push integer
          mov rax, 8
          push rax
          ; 339 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 339 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 339 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 339 push string
          mov rax, s_397
          push rax
          ; 339 push integer
          mov rax, 339
          push rax
          ; 339 push string
          mov rax, s_402
          push rax
          ; 339 push boolean
          mov rax, 1
          push rax
          ; 339 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 340 push string
          mov rax, s_59
          push rax
          ; 340 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 340 push integer
          mov rax, 16
          push rax
          ; 340 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 340 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 340 push string
          mov rax, s_397
          push rax
          ; 340 push integer
          mov rax, 340
          push rax
          ; 340 push string
          mov rax, s_402
          push rax
          ; 340 push boolean
          mov rax, 1
          push rax
          ; 340 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 341 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 341 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 334 jump
          jmp end_0x0000000000000197
          ; 334 label
elif_0x00000000000001be: 
          ; 342 duplicate
          pop rax
          push rax
          push rax
          ; 342 push integer
          mov rax, 0
          push rax
          ; 342 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 342 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 342 push integer
          mov rax, 25
          push rax
          ; 342 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 342 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001bf
          ; 343 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 343 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 343 push string
          mov rax, s_397
          push rax
          ; 343 push integer
          mov rax, 343
          push rax
          ; 343 push string
          mov rax, s_402
          push rax
          ; 343 push boolean
          mov rax, 1
          push rax
          ; 343 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 344 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 344 push integer
          mov rax, 8
          push rax
          ; 344 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 344 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 344 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 344 push string
          mov rax, s_397
          push rax
          ; 344 push integer
          mov rax, 344
          push rax
          ; 344 push string
          mov rax, s_402
          push rax
          ; 344 push boolean
          mov rax, 1
          push rax
          ; 344 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 345 push string
          mov rax, s_424
          push rax
          ; 345 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 345 push string
          mov rax, s_397
          push rax
          ; 345 push integer
          mov rax, 345
          push rax
          ; 345 push string
          mov rax, s_402
          push rax
          ; 345 push boolean
          mov rax, 1
          push rax
          ; 345 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 346 duplicate
          pop rax
          push rax
          push rax
          ; 346 push integer
          mov rax, 16
          push rax
          ; 346 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 346 push string
          mov rax, s_59
          push rax
          ; 346 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 346 push string
          mov rax, s_397
          push rax
          ; 346 push integer
          mov rax, 346
          push rax
          ; 346 push string
          mov rax, s_402
          push rax
          ; 346 push boolean
          mov rax, 1
          push rax
          ; 346 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 347 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 347 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 342 jump
          jmp end_0x0000000000000197
          ; 342 label
elif_0x00000000000001bf: 
          ; 348 duplicate
          pop rax
          push rax
          push rax
          ; 348 push integer
          mov rax, 0
          push rax
          ; 348 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 348 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 348 push integer
          mov rax, 24
          push rax
          ; 348 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 348 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001c0
          ; 349 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 349 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 349 push string
          mov rax, s_397
          push rax
          ; 349 push integer
          mov rax, 349
          push rax
          ; 349 push string
          mov rax, s_402
          push rax
          ; 349 push boolean
          mov rax, 1
          push rax
          ; 349 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 350 push string
          mov rax, s_457
          push rax
          ; 350 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 350 push string
          mov rax, s_397
          push rax
          ; 350 push integer
          mov rax, 350
          push rax
          ; 350 push string
          mov rax, s_402
          push rax
          ; 350 push boolean
          mov rax, 1
          push rax
          ; 350 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 351 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 351 push integer
          mov rax, 8
          push rax
          ; 351 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 351 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 351 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 351 push string
          mov rax, s_397
          push rax
          ; 351 push integer
          mov rax, 351
          push rax
          ; 351 push string
          mov rax, s_402
          push rax
          ; 351 push boolean
          mov rax, 1
          push rax
          ; 351 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 352 push string
          mov rax, s_59
          push rax
          ; 352 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 352 push integer
          mov rax, 16
          push rax
          ; 352 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 352 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 352 push string
          mov rax, s_397
          push rax
          ; 352 push integer
          mov rax, 352
          push rax
          ; 352 push string
          mov rax, s_402
          push rax
          ; 352 push boolean
          mov rax, 1
          push rax
          ; 352 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 353 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 353 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 348 jump
          jmp end_0x0000000000000197
          ; 348 label
elif_0x00000000000001c0: 
          ; 354 duplicate
          pop rax
          push rax
          push rax
          ; 354 push integer
          mov rax, 0
          push rax
          ; 354 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 354 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 354 push integer
          mov rax, 45
          push rax
          ; 354 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 354 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001c1
          ; 355 push string
          mov rax, s_59
          push rax
          ; 355 push string
          mov rax, s_407
          push rax
          ; 355 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 355 push string
          mov rax, s_397
          push rax
          ; 355 push integer
          mov rax, 355
          push rax
          ; 355 push string
          mov rax, s_402
          push rax
          ; 355 push boolean
          mov rax, 1
          push rax
          ; 355 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 356 duplicate
          pop rax
          push rax
          push rax
          ; 356 push integer
          mov rax, 8
          push rax
          ; 356 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 356 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 356 push string
          mov rax, s_397
          push rax
          ; 356 push integer
          mov rax, 356
          push rax
          ; 356 push string
          mov rax, s_402
          push rax
          ; 356 push boolean
          mov rax, 1
          push rax
          ; 356 call
          call fn_stoi
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 357 duplicate
          pop rax
          push rax
          push rax
          ; 357 push integer
          mov rax, 6
          push rax
          ; 357 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 357 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c2
          ; 358 push string
          mov rax, s_458
          push rax
          ; 358 push string
          mov rax, s_397
          push rax
          ; 358 push integer
          mov rax, 358
          push rax
          ; 358 push string
          mov rax, s_402
          push rax
          ; 358 push boolean
          mov rax, 1
          push rax
          ; 358 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 358 jump
          jmp end_0x00000000000001c2
          ; 358 label
if_0x00000000000001c2: 
          ; 358 label
end_0x00000000000001c2: 
          ; 359 duplicate
          pop rax
          push rax
          push rax
          ; 359 push integer
          mov rax, 5
          push rax
          ; 359 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 359 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c3
          ; 360 push string
          mov rax, s_59
          push rax
          ; 360 push string
          mov rax, s_459
          push rax
          ; 360 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 360 push string
          mov rax, s_397
          push rax
          ; 360 push integer
          mov rax, 360
          push rax
          ; 360 push string
          mov rax, s_402
          push rax
          ; 360 push boolean
          mov rax, 1
          push rax
          ; 360 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 360 jump
          jmp end_0x00000000000001c3
          ; 360 label
if_0x00000000000001c3: 
          ; 360 label
end_0x00000000000001c3: 
          ; 361 duplicate
          pop rax
          push rax
          push rax
          ; 361 push integer
          mov rax, 4
          push rax
          ; 361 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 361 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c4
          ; 362 push string
          mov rax, s_59
          push rax
          ; 362 push string
          mov rax, s_460
          push rax
          ; 362 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 362 push string
          mov rax, s_397
          push rax
          ; 362 push integer
          mov rax, 362
          push rax
          ; 362 push string
          mov rax, s_402
          push rax
          ; 362 push boolean
          mov rax, 1
          push rax
          ; 362 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 362 jump
          jmp end_0x00000000000001c4
          ; 362 label
if_0x00000000000001c4: 
          ; 362 label
end_0x00000000000001c4: 
          ; 363 duplicate
          pop rax
          push rax
          push rax
          ; 363 push integer
          mov rax, 3
          push rax
          ; 363 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 363 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c5
          ; 364 push string
          mov rax, s_59
          push rax
          ; 364 push string
          mov rax, s_461
          push rax
          ; 364 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 364 push string
          mov rax, s_397
          push rax
          ; 364 push integer
          mov rax, 364
          push rax
          ; 364 push string
          mov rax, s_402
          push rax
          ; 364 push boolean
          mov rax, 1
          push rax
          ; 364 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 364 jump
          jmp end_0x00000000000001c5
          ; 364 label
if_0x00000000000001c5: 
          ; 364 label
end_0x00000000000001c5: 
          ; 365 duplicate
          pop rax
          push rax
          push rax
          ; 365 push integer
          mov rax, 2
          push rax
          ; 365 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 365 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c6
          ; 366 push string
          mov rax, s_59
          push rax
          ; 366 push string
          mov rax, s_447
          push rax
          ; 366 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 366 push string
          mov rax, s_397
          push rax
          ; 366 push integer
          mov rax, 366
          push rax
          ; 366 push string
          mov rax, s_402
          push rax
          ; 366 push boolean
          mov rax, 1
          push rax
          ; 366 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 366 jump
          jmp end_0x00000000000001c6
          ; 366 label
if_0x00000000000001c6: 
          ; 366 label
end_0x00000000000001c6: 
          ; 367 duplicate
          pop rax
          push rax
          push rax
          ; 367 push integer
          mov rax, 1
          push rax
          ; 367 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 367 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c7
          ; 368 push string
          mov rax, s_59
          push rax
          ; 368 push string
          mov rax, s_462
          push rax
          ; 368 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 368 push string
          mov rax, s_397
          push rax
          ; 368 push integer
          mov rax, 368
          push rax
          ; 368 push string
          mov rax, s_402
          push rax
          ; 368 push boolean
          mov rax, 1
          push rax
          ; 368 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 368 jump
          jmp end_0x00000000000001c7
          ; 368 label
if_0x00000000000001c7: 
          ; 368 label
end_0x00000000000001c7: 
          ; 369 duplicate
          pop rax
          push rax
          push rax
          ; 369 push integer
          mov rax, 0
          push rax
          ; 369 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 369 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001c8
          ; 370 push string
          mov rax, s_59
          push rax
          ; 370 push string
          mov rax, s_463
          push rax
          ; 370 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 370 push string
          mov rax, s_397
          push rax
          ; 370 push integer
          mov rax, 370
          push rax
          ; 370 push string
          mov rax, s_402
          push rax
          ; 370 push boolean
          mov rax, 1
          push rax
          ; 370 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 370 jump
          jmp end_0x00000000000001c8
          ; 370 label
if_0x00000000000001c8: 
          ; 370 label
end_0x00000000000001c8: 
          ; 371 drop
          pop rax
          ; 372 push string
          mov rax, s_59
          push rax
          ; 372 push string
          mov rax, s_208
          push rax
          ; 372 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 372 push string
          mov rax, s_397
          push rax
          ; 372 push integer
          mov rax, 372
          push rax
          ; 372 push string
          mov rax, s_402
          push rax
          ; 372 push boolean
          mov rax, 1
          push rax
          ; 372 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 373 push string
          mov rax, s_59
          push rax
          ; 373 push string
          mov rax, s_408
          push rax
          ; 373 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 373 push string
          mov rax, s_397
          push rax
          ; 373 push integer
          mov rax, 373
          push rax
          ; 373 push string
          mov rax, s_402
          push rax
          ; 373 push boolean
          mov rax, 1
          push rax
          ; 373 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 354 jump
          jmp end_0x0000000000000197
          ; 354 label
elif_0x00000000000001c1: 
          ; 374 duplicate
          pop rax
          push rax
          push rax
          ; 374 push integer
          mov rax, 0
          push rax
          ; 374 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 374 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 374 push integer
          mov rax, 33
          push rax
          ; 374 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 374 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001c9
          ; 375 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 375 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 375 push string
          mov rax, s_397
          push rax
          ; 375 push integer
          mov rax, 375
          push rax
          ; 375 push string
          mov rax, s_402
          push rax
          ; 375 push boolean
          mov rax, 1
          push rax
          ; 375 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 376 push string
          mov rax, s_464
          push rax
          ; 376 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 376 push string
          mov rax, s_397
          push rax
          ; 376 push integer
          mov rax, 376
          push rax
          ; 376 push string
          mov rax, s_402
          push rax
          ; 376 push boolean
          mov rax, 1
          push rax
          ; 376 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 377 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 377 push integer
          mov rax, 8
          push rax
          ; 377 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 377 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 377 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 377 push string
          mov rax, s_397
          push rax
          ; 377 push integer
          mov rax, 377
          push rax
          ; 377 push string
          mov rax, s_402
          push rax
          ; 377 push boolean
          mov rax, 1
          push rax
          ; 377 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 378 push string
          mov rax, s_59
          push rax
          ; 378 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 378 push integer
          mov rax, 16
          push rax
          ; 378 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 378 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 378 push string
          mov rax, s_397
          push rax
          ; 378 push integer
          mov rax, 378
          push rax
          ; 378 push string
          mov rax, s_402
          push rax
          ; 378 push boolean
          mov rax, 1
          push rax
          ; 378 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 379 push string
          mov rax, s_59
          push rax
          ; 379 push string
          mov rax, s_408
          push rax
          ; 379 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 379 push string
          mov rax, s_397
          push rax
          ; 379 push integer
          mov rax, 379
          push rax
          ; 379 push string
          mov rax, s_402
          push rax
          ; 379 push boolean
          mov rax, 1
          push rax
          ; 379 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 380 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 380 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 374 jump
          jmp end_0x0000000000000197
          ; 374 label
elif_0x00000000000001c9: 
          ; 381 duplicate
          pop rax
          push rax
          push rax
          ; 381 push integer
          mov rax, 0
          push rax
          ; 381 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 381 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 381 push integer
          mov rax, 7
          push rax
          ; 381 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 381 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ca
          ; 382 push string
          mov rax, s_59
          push rax
          ; 382 push string
          mov rax, s_407
          push rax
          ; 382 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 382 push string
          mov rax, s_397
          push rax
          ; 382 push integer
          mov rax, 382
          push rax
          ; 382 push string
          mov rax, s_402
          push rax
          ; 382 push boolean
          mov rax, 1
          push rax
          ; 382 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 383 push string
          mov rax, s_59
          push rax
          ; 383 push string
          mov rax, s_465
          push rax
          ; 383 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 383 push string
          mov rax, s_397
          push rax
          ; 383 push integer
          mov rax, 383
          push rax
          ; 383 push string
          mov rax, s_402
          push rax
          ; 383 push boolean
          mov rax, 1
          push rax
          ; 383 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 384 push string
          mov rax, s_59
          push rax
          ; 384 push string
          mov rax, s_466
          push rax
          ; 384 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 384 push string
          mov rax, s_397
          push rax
          ; 384 push integer
          mov rax, 384
          push rax
          ; 384 push string
          mov rax, s_402
          push rax
          ; 384 push boolean
          mov rax, 1
          push rax
          ; 384 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 385 push string
          mov rax, s_59
          push rax
          ; 385 push string
          mov rax, s_410
          push rax
          ; 385 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 385 push string
          mov rax, s_397
          push rax
          ; 385 push integer
          mov rax, 385
          push rax
          ; 385 push string
          mov rax, s_402
          push rax
          ; 385 push boolean
          mov rax, 1
          push rax
          ; 385 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 381 jump
          jmp end_0x0000000000000197
          ; 381 label
elif_0x00000000000001ca: 
          ; 386 duplicate
          pop rax
          push rax
          push rax
          ; 386 push integer
          mov rax, 0
          push rax
          ; 386 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 386 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 386 push integer
          mov rax, 8
          push rax
          ; 386 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 386 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001cb
          ; 387 push string
          mov rax, s_59
          push rax
          ; 387 push string
          mov rax, s_407
          push rax
          ; 387 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 387 push string
          mov rax, s_397
          push rax
          ; 387 push integer
          mov rax, 387
          push rax
          ; 387 push string
          mov rax, s_402
          push rax
          ; 387 push boolean
          mov rax, 1
          push rax
          ; 387 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 388 push string
          mov rax, s_59
          push rax
          ; 388 push string
          mov rax, s_465
          push rax
          ; 388 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 388 push string
          mov rax, s_397
          push rax
          ; 388 push integer
          mov rax, 388
          push rax
          ; 388 push string
          mov rax, s_402
          push rax
          ; 388 push boolean
          mov rax, 1
          push rax
          ; 388 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 389 push string
          mov rax, s_59
          push rax
          ; 389 push string
          mov rax, s_466
          push rax
          ; 389 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 389 push string
          mov rax, s_397
          push rax
          ; 389 push integer
          mov rax, 389
          push rax
          ; 389 push string
          mov rax, s_402
          push rax
          ; 389 push boolean
          mov rax, 1
          push rax
          ; 389 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 390 push string
          mov rax, s_59
          push rax
          ; 390 push string
          mov rax, s_410
          push rax
          ; 390 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 390 push string
          mov rax, s_397
          push rax
          ; 390 push integer
          mov rax, 390
          push rax
          ; 390 push string
          mov rax, s_402
          push rax
          ; 390 push boolean
          mov rax, 1
          push rax
          ; 390 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 386 jump
          jmp end_0x0000000000000197
          ; 386 label
elif_0x00000000000001cb: 
          ; 391 duplicate
          pop rax
          push rax
          push rax
          ; 391 push integer
          mov rax, 0
          push rax
          ; 391 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 391 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 391 push integer
          mov rax, 9
          push rax
          ; 391 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 391 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001cc
          ; 392 push string
          mov rax, s_59
          push rax
          ; 392 push string
          mov rax, s_407
          push rax
          ; 392 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 392 push string
          mov rax, s_397
          push rax
          ; 392 push integer
          mov rax, 392
          push rax
          ; 392 push string
          mov rax, s_402
          push rax
          ; 392 push boolean
          mov rax, 1
          push rax
          ; 392 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 393 push string
          mov rax, s_59
          push rax
          ; 393 push string
          mov rax, s_430
          push rax
          ; 393 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 393 push string
          mov rax, s_397
          push rax
          ; 393 push integer
          mov rax, 393
          push rax
          ; 393 push string
          mov rax, s_402
          push rax
          ; 393 push boolean
          mov rax, 1
          push rax
          ; 393 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 394 push string
          mov rax, s_59
          push rax
          ; 394 push string
          mov rax, s_410
          push rax
          ; 394 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 394 push string
          mov rax, s_397
          push rax
          ; 394 push integer
          mov rax, 394
          push rax
          ; 394 push string
          mov rax, s_402
          push rax
          ; 394 push boolean
          mov rax, 1
          push rax
          ; 394 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 391 jump
          jmp end_0x0000000000000197
          ; 391 label
elif_0x00000000000001cc: 
          ; 395 duplicate
          pop rax
          push rax
          push rax
          ; 395 push integer
          mov rax, 0
          push rax
          ; 395 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 395 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 395 push integer
          mov rax, 10
          push rax
          ; 395 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 395 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001cd
          ; 396 push string
          mov rax, s_59
          push rax
          ; 396 push string
          mov rax, s_407
          push rax
          ; 396 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 396 push string
          mov rax, s_397
          push rax
          ; 396 push integer
          mov rax, 396
          push rax
          ; 396 push string
          mov rax, s_402
          push rax
          ; 396 push boolean
          mov rax, 1
          push rax
          ; 396 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 397 push string
          mov rax, s_59
          push rax
          ; 397 push string
          mov rax, s_430
          push rax
          ; 397 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 397 push string
          mov rax, s_397
          push rax
          ; 397 push integer
          mov rax, 397
          push rax
          ; 397 push string
          mov rax, s_402
          push rax
          ; 397 push boolean
          mov rax, 1
          push rax
          ; 397 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 398 push string
          mov rax, s_59
          push rax
          ; 398 push string
          mov rax, s_410
          push rax
          ; 398 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 398 push string
          mov rax, s_397
          push rax
          ; 398 push integer
          mov rax, 398
          push rax
          ; 398 push string
          mov rax, s_402
          push rax
          ; 398 push boolean
          mov rax, 1
          push rax
          ; 398 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 395 jump
          jmp end_0x0000000000000197
          ; 395 label
elif_0x00000000000001cd: 
          ; 399 duplicate
          pop rax
          push rax
          push rax
          ; 399 push integer
          mov rax, 0
          push rax
          ; 399 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 399 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 399 push integer
          mov rax, 37
          push rax
          ; 399 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 399 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001ce
          ; 400 push string
          mov rax, s_59
          push rax
          ; 400 push string
          mov rax, s_407
          push rax
          ; 400 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 400 push string
          mov rax, s_397
          push rax
          ; 400 push integer
          mov rax, 400
          push rax
          ; 400 push string
          mov rax, s_402
          push rax
          ; 400 push boolean
          mov rax, 1
          push rax
          ; 400 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 401 push string
          mov rax, s_59
          push rax
          ; 401 push string
          mov rax, s_409
          push rax
          ; 401 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 401 push string
          mov rax, s_397
          push rax
          ; 401 push integer
          mov rax, 401
          push rax
          ; 401 push string
          mov rax, s_402
          push rax
          ; 401 push boolean
          mov rax, 1
          push rax
          ; 401 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 402 push string
          mov rax, s_59
          push rax
          ; 402 push string
          mov rax, s_467
          push rax
          ; 402 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 402 push string
          mov rax, s_397
          push rax
          ; 402 push integer
          mov rax, 402
          push rax
          ; 402 push string
          mov rax, s_402
          push rax
          ; 402 push boolean
          mov rax, 1
          push rax
          ; 402 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 399 jump
          jmp end_0x0000000000000197
          ; 399 label
elif_0x00000000000001ce: 
          ; 403 duplicate
          pop rax
          push rax
          push rax
          ; 403 push integer
          mov rax, 0
          push rax
          ; 403 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 403 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 403 push integer
          mov rax, 38
          push rax
          ; 403 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 403 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001cf
          ; 404 push string
          mov rax, s_59
          push rax
          ; 404 push string
          mov rax, s_407
          push rax
          ; 404 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 404 push string
          mov rax, s_397
          push rax
          ; 404 push integer
          mov rax, 404
          push rax
          ; 404 push string
          mov rax, s_402
          push rax
          ; 404 push boolean
          mov rax, 1
          push rax
          ; 404 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 405 push string
          mov rax, s_59
          push rax
          ; 405 push string
          mov rax, s_409
          push rax
          ; 405 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 405 push string
          mov rax, s_397
          push rax
          ; 405 push integer
          mov rax, 405
          push rax
          ; 405 push string
          mov rax, s_402
          push rax
          ; 405 push boolean
          mov rax, 1
          push rax
          ; 405 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 406 push string
          mov rax, s_59
          push rax
          ; 406 push string
          mov rax, s_467
          push rax
          ; 406 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 406 push string
          mov rax, s_397
          push rax
          ; 406 push integer
          mov rax, 406
          push rax
          ; 406 push string
          mov rax, s_402
          push rax
          ; 406 push boolean
          mov rax, 1
          push rax
          ; 406 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 403 jump
          jmp end_0x0000000000000197
          ; 403 label
elif_0x00000000000001cf: 
          ; 407 duplicate
          pop rax
          push rax
          push rax
          ; 407 push integer
          mov rax, 0
          push rax
          ; 407 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 407 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 407 push integer
          mov rax, 39
          push rax
          ; 407 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 407 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d0
          ; 408 push string
          mov rax, s_59
          push rax
          ; 408 push string
          mov rax, s_407
          push rax
          ; 408 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 408 push string
          mov rax, s_397
          push rax
          ; 408 push integer
          mov rax, 408
          push rax
          ; 408 push string
          mov rax, s_402
          push rax
          ; 408 push boolean
          mov rax, 1
          push rax
          ; 408 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 409 push string
          mov rax, s_59
          push rax
          ; 409 push string
          mov rax, s_409
          push rax
          ; 409 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 409 push string
          mov rax, s_397
          push rax
          ; 409 push integer
          mov rax, 409
          push rax
          ; 409 push string
          mov rax, s_402
          push rax
          ; 409 push boolean
          mov rax, 1
          push rax
          ; 409 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 410 push string
          mov rax, s_59
          push rax
          ; 410 push string
          mov rax, s_468
          push rax
          ; 410 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 410 push string
          mov rax, s_397
          push rax
          ; 410 push integer
          mov rax, 410
          push rax
          ; 410 push string
          mov rax, s_402
          push rax
          ; 410 push boolean
          mov rax, 1
          push rax
          ; 410 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 407 jump
          jmp end_0x0000000000000197
          ; 407 label
elif_0x00000000000001d0: 
          ; 411 duplicate
          pop rax
          push rax
          push rax
          ; 411 push integer
          mov rax, 0
          push rax
          ; 411 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 411 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 411 push integer
          mov rax, 40
          push rax
          ; 411 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 411 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d1
          ; 412 push string
          mov rax, s_59
          push rax
          ; 412 push string
          mov rax, s_407
          push rax
          ; 412 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 412 push string
          mov rax, s_397
          push rax
          ; 412 push integer
          mov rax, 412
          push rax
          ; 412 push string
          mov rax, s_402
          push rax
          ; 412 push boolean
          mov rax, 1
          push rax
          ; 412 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 413 push string
          mov rax, s_59
          push rax
          ; 413 push string
          mov rax, s_409
          push rax
          ; 413 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 413 push string
          mov rax, s_397
          push rax
          ; 413 push integer
          mov rax, 413
          push rax
          ; 413 push string
          mov rax, s_402
          push rax
          ; 413 push boolean
          mov rax, 1
          push rax
          ; 413 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 414 push string
          mov rax, s_59
          push rax
          ; 414 push string
          mov rax, s_468
          push rax
          ; 414 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 414 push string
          mov rax, s_397
          push rax
          ; 414 push integer
          mov rax, 414
          push rax
          ; 414 push string
          mov rax, s_402
          push rax
          ; 414 push boolean
          mov rax, 1
          push rax
          ; 414 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 411 jump
          jmp end_0x0000000000000197
          ; 411 label
elif_0x00000000000001d1: 
          ; 415 duplicate
          pop rax
          push rax
          push rax
          ; 415 push integer
          mov rax, 0
          push rax
          ; 415 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 415 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 415 push integer
          mov rax, 41
          push rax
          ; 415 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 415 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d2
          ; 416 push string
          mov rax, s_59
          push rax
          ; 416 push string
          mov rax, s_411
          push rax
          ; 416 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 416 push string
          mov rax, s_397
          push rax
          ; 416 push integer
          mov rax, 416
          push rax
          ; 416 push string
          mov rax, s_402
          push rax
          ; 416 push boolean
          mov rax, 1
          push rax
          ; 416 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 417 push string
          mov rax, s_59
          push rax
          ; 417 push string
          mov rax, s_407
          push rax
          ; 417 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 417 push string
          mov rax, s_397
          push rax
          ; 417 push integer
          mov rax, 417
          push rax
          ; 417 push string
          mov rax, s_402
          push rax
          ; 417 push boolean
          mov rax, 1
          push rax
          ; 417 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 418 push string
          mov rax, s_59
          push rax
          ; 418 push string
          mov rax, s_469
          push rax
          ; 418 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 418 push string
          mov rax, s_397
          push rax
          ; 418 push integer
          mov rax, 418
          push rax
          ; 418 push string
          mov rax, s_402
          push rax
          ; 418 push boolean
          mov rax, 1
          push rax
          ; 418 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 419 push string
          mov rax, s_59
          push rax
          ; 419 push string
          mov rax, s_408
          push rax
          ; 419 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 419 push string
          mov rax, s_397
          push rax
          ; 419 push integer
          mov rax, 419
          push rax
          ; 419 push string
          mov rax, s_402
          push rax
          ; 419 push boolean
          mov rax, 1
          push rax
          ; 419 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 415 jump
          jmp end_0x0000000000000197
          ; 415 label
elif_0x00000000000001d2: 
          ; 420 duplicate
          pop rax
          push rax
          push rax
          ; 420 push integer
          mov rax, 0
          push rax
          ; 420 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 420 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 420 push integer
          mov rax, 42
          push rax
          ; 420 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 420 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d3
          ; 421 push string
          mov rax, s_59
          push rax
          ; 421 push string
          mov rax, s_411
          push rax
          ; 421 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 421 push string
          mov rax, s_397
          push rax
          ; 421 push integer
          mov rax, 421
          push rax
          ; 421 push string
          mov rax, s_402
          push rax
          ; 421 push boolean
          mov rax, 1
          push rax
          ; 421 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 422 push string
          mov rax, s_59
          push rax
          ; 422 push string
          mov rax, s_407
          push rax
          ; 422 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 422 push string
          mov rax, s_397
          push rax
          ; 422 push integer
          mov rax, 422
          push rax
          ; 422 push string
          mov rax, s_402
          push rax
          ; 422 push boolean
          mov rax, 1
          push rax
          ; 422 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 423 push string
          mov rax, s_59
          push rax
          ; 423 push string
          mov rax, s_470
          push rax
          ; 423 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 423 push string
          mov rax, s_397
          push rax
          ; 423 push integer
          mov rax, 423
          push rax
          ; 423 push string
          mov rax, s_402
          push rax
          ; 423 push boolean
          mov rax, 1
          push rax
          ; 423 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 424 push string
          mov rax, s_59
          push rax
          ; 424 push string
          mov rax, s_408
          push rax
          ; 424 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 424 push string
          mov rax, s_397
          push rax
          ; 424 push integer
          mov rax, 424
          push rax
          ; 424 push string
          mov rax, s_402
          push rax
          ; 424 push boolean
          mov rax, 1
          push rax
          ; 424 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 420 jump
          jmp end_0x0000000000000197
          ; 420 label
elif_0x00000000000001d3: 
          ; 425 duplicate
          pop rax
          push rax
          push rax
          ; 425 push integer
          mov rax, 0
          push rax
          ; 425 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 425 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 425 push integer
          mov rax, 47
          push rax
          ; 425 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 425 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d4
          ; 426 push string
          mov rax, s_59
          push rax
          ; 426 push string
          mov rax, s_407
          push rax
          ; 426 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 426 push string
          mov rax, s_397
          push rax
          ; 426 push integer
          mov rax, 426
          push rax
          ; 426 push string
          mov rax, s_402
          push rax
          ; 426 push boolean
          mov rax, 1
          push rax
          ; 426 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 427 push string
          mov rax, s_59
          push rax
          ; 427 push string
          mov rax, s_455
          push rax
          ; 427 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 427 push string
          mov rax, s_397
          push rax
          ; 427 push integer
          mov rax, 427
          push rax
          ; 427 push string
          mov rax, s_402
          push rax
          ; 427 push boolean
          mov rax, 1
          push rax
          ; 427 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 428 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 428 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 428 push string
          mov rax, s_397
          push rax
          ; 428 push integer
          mov rax, 428
          push rax
          ; 428 push string
          mov rax, s_402
          push rax
          ; 428 push boolean
          mov rax, 1
          push rax
          ; 428 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 429 push string
          mov rax, s_456
          push rax
          ; 429 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 429 push string
          mov rax, s_397
          push rax
          ; 429 push integer
          mov rax, 429
          push rax
          ; 429 push string
          mov rax, s_402
          push rax
          ; 429 push boolean
          mov rax, 1
          push rax
          ; 429 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 430 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 430 push integer
          mov rax, 8
          push rax
          ; 430 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 430 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 430 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 430 push string
          mov rax, s_397
          push rax
          ; 430 push integer
          mov rax, 430
          push rax
          ; 430 push string
          mov rax, s_402
          push rax
          ; 430 push boolean
          mov rax, 1
          push rax
          ; 430 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 431 push string
          mov rax, s_471
          push rax
          ; 431 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 431 push string
          mov rax, s_397
          push rax
          ; 431 push integer
          mov rax, 431
          push rax
          ; 431 push string
          mov rax, s_402
          push rax
          ; 431 push boolean
          mov rax, 1
          push rax
          ; 431 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 432 push string
          mov rax, s_59
          push rax
          ; 432 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 432 push integer
          mov rax, 16
          push rax
          ; 432 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 432 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 432 push string
          mov rax, s_397
          push rax
          ; 432 push integer
          mov rax, 432
          push rax
          ; 432 push string
          mov rax, s_402
          push rax
          ; 432 push boolean
          mov rax, 1
          push rax
          ; 432 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 433 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 433 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 425 jump
          jmp end_0x0000000000000197
          ; 425 label
elif_0x00000000000001d4: 
          ; 434 duplicate
          pop rax
          push rax
          push rax
          ; 434 push integer
          mov rax, 0
          push rax
          ; 434 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 434 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 434 push integer
          mov rax, 46
          push rax
          ; 434 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 434 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001d5
          ; 435 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 435 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 435 push string
          mov rax, s_397
          push rax
          ; 435 push integer
          mov rax, 435
          push rax
          ; 435 push string
          mov rax, s_402
          push rax
          ; 435 push boolean
          mov rax, 1
          push rax
          ; 435 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 436 push string
          mov rax, s_457
          push rax
          ; 436 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 436 push string
          mov rax, s_397
          push rax
          ; 436 push integer
          mov rax, 436
          push rax
          ; 436 push string
          mov rax, s_402
          push rax
          ; 436 push boolean
          mov rax, 1
          push rax
          ; 436 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 437 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 437 push integer
          mov rax, 8
          push rax
          ; 437 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 437 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 437 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 437 push string
          mov rax, s_397
          push rax
          ; 437 push integer
          mov rax, 437
          push rax
          ; 437 push string
          mov rax, s_402
          push rax
          ; 437 push boolean
          mov rax, 1
          push rax
          ; 437 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 438 push string
          mov rax, s_59
          push rax
          ; 438 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 438 push integer
          mov rax, 16
          push rax
          ; 438 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 438 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 438 push string
          mov rax, s_397
          push rax
          ; 438 push integer
          mov rax, 438
          push rax
          ; 438 push string
          mov rax, s_402
          push rax
          ; 438 push boolean
          mov rax, 1
          push rax
          ; 438 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 439 push string
          mov rax, s_397
          push rax
          ; 439 push integer
          mov rax, 439
          push rax
          ; 439 push string
          mov rax, s_402
          push rax
          ; 439 push boolean
          mov rax, 1
          push rax
          ; 439 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 441 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 441 push integer
          mov rax, 8
          push rax
          ; 441 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 441 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 441 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 441 push string
          mov rax, s_397
          push rax
          ; 441 push integer
          mov rax, 441
          push rax
          ; 441 push string
          mov rax, s_402
          push rax
          ; 441 push boolean
          mov rax, 1
          push rax
          ; 441 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 442 push string
          mov rax, s_472
          push rax
          ; 442 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 442 push string
          mov rax, s_397
          push rax
          ; 442 push integer
          mov rax, 442
          push rax
          ; 442 push string
          mov rax, s_402
          push rax
          ; 442 push boolean
          mov rax, 1
          push rax
          ; 442 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 443 duplicate
          pop rax
          push rax
          push rax
          ; 443 push integer
          mov rax, 16
          push rax
          ; 443 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 443 push string
          mov rax, s_59
          push rax
          ; 443 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 443 push string
          mov rax, s_397
          push rax
          ; 443 push integer
          mov rax, 443
          push rax
          ; 443 push string
          mov rax, s_402
          push rax
          ; 443 push boolean
          mov rax, 1
          push rax
          ; 443 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 444 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 444 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 434 jump
          jmp end_0x0000000000000197
          ; 434 label
elif_0x00000000000001d5: 
          ; 446 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 446 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 446 push string
          mov rax, s_397
          push rax
          ; 446 push integer
          mov rax, 446
          push rax
          ; 446 push string
          mov rax, s_402
          push rax
          ; 446 push boolean
          mov rax, 1
          push rax
          ; 446 call
          call fn_textbuffer_clear
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 447 push string
          mov rax, s_473
          push rax
          ; 447 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 447 push string
          mov rax, s_397
          push rax
          ; 447 push integer
          mov rax, 447
          push rax
          ; 447 push string
          mov rax, s_402
          push rax
          ; 447 push boolean
          mov rax, 1
          push rax
          ; 447 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 448 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 448 push integer
          mov rax, 0
          push rax
          ; 448 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 448 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 448 push string
          mov rax, s_397
          push rax
          ; 448 push integer
          mov rax, 448
          push rax
          ; 448 push string
          mov rax, s_402
          push rax
          ; 448 push boolean
          mov rax, 1
          push rax
          ; 448 call
          call fn_opcode_to_str
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 448 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 448 push string
          mov rax, s_397
          push rax
          ; 448 push integer
          mov rax, 448
          push rax
          ; 448 push string
          mov rax, s_402
          push rax
          ; 448 push boolean
          mov rax, 1
          push rax
          ; 448 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 449 push string
          mov rax, s_7
          push rax
          ; 449 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 449 push string
          mov rax, s_397
          push rax
          ; 449 push integer
          mov rax, 449
          push rax
          ; 449 push string
          mov rax, s_402
          push rax
          ; 449 push boolean
          mov rax, 1
          push rax
          ; 449 call
          call fn_textbuffer_append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 450 duplicate
          pop rax
          push rax
          push rax
          ; 450 push integer
          mov rax, 16
          push rax
          ; 450 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 450 push string
          mov rax, s_397
          push rax
          ; 450 push integer
          mov rax, 450
          push rax
          ; 450 push string
          mov rax, s_402
          push rax
          ; 450 push boolean
          mov rax, 1
          push rax
          ; 450 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 451 get pointer to buffer
          mov rax, buf__textbuffer
          push rax
          ; 451 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 446 label
end_0x0000000000000197: 
          ; 453 drop
          pop rax
          ; 454 push integer
          mov rax, 1
          push rax
          ; 454 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 67 end of while-loop
          jmp while_0x0000000000000038
while_0x0000000000000038_end: 
          ; 457 push string
          mov rax, s_474
          push rax
          ; 457 push string
          mov rax, s_59
          push rax
          ; 457 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 457 push string
          mov rax, s_397
          push rax
          ; 457 push integer
          mov rax, 457
          push rax
          ; 457 push string
          mov rax, s_402
          push rax
          ; 457 push boolean
          mov rax, 1
          push rax
          ; 457 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 458 push string
          mov rax, s_59
          push rax
          ; 458 push string
          mov rax, s_475
          push rax
          ; 458 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 458 push string
          mov rax, s_397
          push rax
          ; 458 push integer
          mov rax, 458
          push rax
          ; 458 push string
          mov rax, s_402
          push rax
          ; 458 push boolean
          mov rax, 1
          push rax
          ; 458 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 459 push string
          mov rax, s_59
          push rax
          ; 459 push string
          mov rax, s_408
          push rax
          ; 459 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 459 push string
          mov rax, s_397
          push rax
          ; 459 push integer
          mov rax, 459
          push rax
          ; 459 push string
          mov rax, s_402
          push rax
          ; 459 push boolean
          mov rax, 1
          push rax
          ; 459 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 460 push string
          mov rax, s_59
          push rax
          ; 460 push string
          mov rax, s_408
          push rax
          ; 460 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 460 push string
          mov rax, s_397
          push rax
          ; 460 push integer
          mov rax, 460
          push rax
          ; 460 push string
          mov rax, s_402
          push rax
          ; 460 push boolean
          mov rax, 1
          push rax
          ; 460 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 461 push string
          mov rax, s_59
          push rax
          ; 461 push string
          mov rax, s_408
          push rax
          ; 461 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 461 push string
          mov rax, s_397
          push rax
          ; 461 push integer
          mov rax, 461
          push rax
          ; 461 push string
          mov rax, s_402
          push rax
          ; 461 push boolean
          mov rax, 1
          push rax
          ; 461 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 462 push string
          mov rax, s_59
          push rax
          ; 462 push string
          mov rax, s_408
          push rax
          ; 462 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 462 push string
          mov rax, s_397
          push rax
          ; 462 push integer
          mov rax, 462
          push rax
          ; 462 push string
          mov rax, s_402
          push rax
          ; 462 push boolean
          mov rax, 1
          push rax
          ; 462 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 463 push string
          mov rax, s_59
          push rax
          ; 463 push string
          mov rax, s_476
          push rax
          ; 463 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 463 push string
          mov rax, s_397
          push rax
          ; 463 push integer
          mov rax, 463
          push rax
          ; 463 push string
          mov rax, s_402
          push rax
          ; 463 push boolean
          mov rax, 1
          push rax
          ; 463 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 464 push string
          mov rax, s_472
          push rax
          ; 464 push string
          mov rax, s_59
          push rax
          ; 464 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 464 push string
          mov rax, s_397
          push rax
          ; 464 push integer
          mov rax, 464
          push rax
          ; 464 push string
          mov rax, s_402
          push rax
          ; 464 push boolean
          mov rax, 1
          push rax
          ; 464 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 465 push string
          mov rax, s_59
          push rax
          ; 465 push string
          mov rax, s_477
          push rax
          ; 465 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 465 push string
          mov rax, s_397
          push rax
          ; 465 push integer
          mov rax, 465
          push rax
          ; 465 push string
          mov rax, s_402
          push rax
          ; 465 push boolean
          mov rax, 1
          push rax
          ; 465 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 466 push string
          mov rax, s_59
          push rax
          ; 466 push string
          mov rax, s_478
          push rax
          ; 466 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 466 push string
          mov rax, s_397
          push rax
          ; 466 push integer
          mov rax, 466
          push rax
          ; 466 push string
          mov rax, s_402
          push rax
          ; 466 push boolean
          mov rax, 1
          push rax
          ; 466 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 467 push string
          mov rax, s_59
          push rax
          ; 467 push string
          mov rax, s_208
          push rax
          ; 467 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 467 push string
          mov rax, s_397
          push rax
          ; 467 push integer
          mov rax, 467
          push rax
          ; 467 push string
          mov rax, s_402
          push rax
          ; 467 push boolean
          mov rax, 1
          push rax
          ; 467 call
          call fn__append
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 470 get pointer to buffer
          mov rax, buf__text
          push rax
          ; 470 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 471 push integer
          mov rax, 16
          push rax
          ; 471 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 473 get pointer to buffer
          mov rax, buf__data
          push rax
          ; 473 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 474 push integer
          mov rax, 16
          push rax
          ; 474 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 474 push string
          mov rax, s_397
          push rax
          ; 474 push integer
          mov rax, 474
          push rax
          ; 474 push string
          mov rax, s_402
          push rax
          ; 474 push boolean
          mov rax, 1
          push rax
          ; 474 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 474 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 474 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 474 push string
          mov rax, s_397
          push rax
          ; 474 push integer
          mov rax, 474
          push rax
          ; 474 push string
          mov rax, s_402
          push rax
          ; 474 push boolean
          mov rax, 1
          push rax
          ; 474 call
          call fn_write
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 51 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 51 return
          ret
          ; 10 create buffer
          ; 11 create buffer
          ; 12 create buffer
          ; 13 create buffer
          ; 14 create buffer
          ; 15 create buffer
          ; 16 create buffer
          ; 18 create buffer
          ; 21 function definition
fn_parse_arguments: 
          push rbp
          mov rbp, rsp
          ; 23 push string
          mov rax, s_479
          push rax
          ; 23 push integer
          mov rax, 23
          push rax
          ; 23 push string
          mov rax, s_480
          push rax
          ; 23 push boolean
          mov rax, 1
          push rax
          ; 23 call
          call fn_argparse_init
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 25 push string
          mov rax, s_481
          push rax
          ; 25 push integer
          mov rax, 1
          push rax
          ; 25 push string
          mov rax, s_482
          push rax
          ; 26 push string
          mov rax, s_479
          push rax
          ; 26 push integer
          mov rax, 26
          push rax
          ; 26 push string
          mov rax, s_480
          push rax
          ; 26 push boolean
          mov rax, 1
          push rax
          ; 26 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 27 push string
          mov rax, s_483
          push rax
          ; 27 push integer
          mov rax, 2
          push rax
          ; 27 push string
          mov rax, s_484
          push rax
          ; 28 push string
          mov rax, s_479
          push rax
          ; 28 push integer
          mov rax, 28
          push rax
          ; 28 push string
          mov rax, s_480
          push rax
          ; 28 push boolean
          mov rax, 1
          push rax
          ; 28 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 29 push string
          mov rax, s_485
          push rax
          ; 29 push integer
          mov rax, 1
          push rax
          ; 29 push string
          mov rax, s_486
          push rax
          ; 30 push string
          mov rax, s_479
          push rax
          ; 30 push integer
          mov rax, 30
          push rax
          ; 30 push string
          mov rax, s_480
          push rax
          ; 30 push boolean
          mov rax, 1
          push rax
          ; 30 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 31 push string
          mov rax, s_487
          push rax
          ; 31 push integer
          mov rax, 1
          push rax
          ; 31 push string
          mov rax, s_488
          push rax
          ; 32 push string
          mov rax, s_479
          push rax
          ; 32 push integer
          mov rax, 32
          push rax
          ; 32 push string
          mov rax, s_480
          push rax
          ; 32 push boolean
          mov rax, 1
          push rax
          ; 32 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 33 push string
          mov rax, s_489
          push rax
          ; 33 push integer
          mov rax, 1
          push rax
          ; 33 push string
          mov rax, s_490
          push rax
          ; 34 push string
          mov rax, s_479
          push rax
          ; 34 push integer
          mov rax, 34
          push rax
          ; 34 push string
          mov rax, s_480
          push rax
          ; 34 push boolean
          mov rax, 1
          push rax
          ; 34 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 35 push string
          mov rax, s_491
          push rax
          ; 35 push integer
          mov rax, 1
          push rax
          ; 35 push string
          mov rax, s_492
          push rax
          ; 36 push string
          mov rax, s_479
          push rax
          ; 36 push integer
          mov rax, 36
          push rax
          ; 36 push string
          mov rax, s_480
          push rax
          ; 36 push boolean
          mov rax, 1
          push rax
          ; 36 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 37 push string
          mov rax, s_493
          push rax
          ; 37 push integer
          mov rax, 1
          push rax
          ; 37 push string
          mov rax, s_494
          push rax
          ; 38 push string
          mov rax, s_479
          push rax
          ; 38 push integer
          mov rax, 38
          push rax
          ; 38 push string
          mov rax, s_480
          push rax
          ; 38 push boolean
          mov rax, 1
          push rax
          ; 38 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 39 push string
          mov rax, s_495
          push rax
          ; 39 push integer
          mov rax, 1
          push rax
          ; 39 push string
          mov rax, s_496
          push rax
          ; 40 push string
          mov rax, s_479
          push rax
          ; 40 push integer
          mov rax, 40
          push rax
          ; 40 push string
          mov rax, s_480
          push rax
          ; 40 push boolean
          mov rax, 1
          push rax
          ; 40 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 41 push string
          mov rax, s_497
          push rax
          ; 41 push integer
          mov rax, 1
          push rax
          ; 41 push string
          mov rax, s_498
          push rax
          ; 42 push string
          mov rax, s_479
          push rax
          ; 42 push integer
          mov rax, 42
          push rax
          ; 42 push string
          mov rax, s_480
          push rax
          ; 42 push boolean
          mov rax, 1
          push rax
          ; 42 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 43 push string
          mov rax, s_499
          push rax
          ; 43 push integer
          mov rax, 0
          push rax
          ; 43 push string
          mov rax, s_500
          push rax
          ; 44 push string
          mov rax, s_479
          push rax
          ; 44 push integer
          mov rax, 44
          push rax
          ; 44 push string
          mov rax, s_480
          push rax
          ; 44 push boolean
          mov rax, 1
          push rax
          ; 44 call
          call fn_argparse_add_argument
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 46 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 46 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 46 push string
          mov rax, s_479
          push rax
          ; 46 push integer
          mov rax, 46
          push rax
          ; 46 push string
          mov rax, s_480
          push rax
          ; 46 push boolean
          mov rax, 1
          push rax
          ; 46 call
          call fn_argparse_parse_args
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 22 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 22 return
          ret
          ; 49 function definition
fn_log_cmd: 
          push rbp
          mov rbp, rsp
          ; 50 get pointer to buffer
          mov rax, buf_VERBOSE
          push rax
          ; 50 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 50 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001d6
          ; 51 push string
          mov rax, s_501
          push rax
          ; 51 push string
          mov rax, s_479
          push rax
          ; 51 push integer
          mov rax, 51
          push rax
          ; 51 push string
          mov rax, s_502
          push rax
          ; 51 push boolean
          mov rax, 1
          push rax
          ; 51 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 52 push integer
          mov rax, 0
          push rax
          ; 52 label
while_0x000000000000003b: 
          ; 52 duplicate
          pop rax
          push rax
          push rax
          ; 52 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 52 push integer
          mov rax, 8
          push rax
          ; 52 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 52 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 52 push integer
          mov rax, 1
          push rax
          ; 52 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 52 is less?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovl rax, rbx
          push rax
          ; 52 start of while-loop
          pop rax
          test rax, rax
          jz while_0x000000000000003b_end
          ; 53 duplicate
          pop rax
          push rax
          push rax
          ; 53 push integer
          mov rax, 0
          push rax
          ; 53 is greater?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovg rax, rbx
          push rax
          ; 53 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001d7
          ; 54 push string
          mov rax, s_134
          push rax
          ; 54 push string
          mov rax, s_479
          push rax
          ; 54 push integer
          mov rax, 54
          push rax
          ; 54 push string
          mov rax, s_502
          push rax
          ; 54 push boolean
          mov rax, 1
          push rax
          ; 54 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 54 jump
          jmp end_0x00000000000001d7
          ; 54 label
if_0x00000000000001d7: 
          ; 54 label
end_0x00000000000001d7: 
          ; 55 duplicate
          pop rax
          push rax
          push rax
          ; 55 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 55 push string
          mov rax, s_479
          push rax
          ; 55 push integer
          mov rax, 55
          push rax
          ; 55 push string
          mov rax, s_502
          push rax
          ; 55 push boolean
          mov rax, 1
          push rax
          ; 55 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 55 push string
          mov rax, s_479
          push rax
          ; 55 push integer
          mov rax, 55
          push rax
          ; 55 push string
          mov rax, s_502
          push rax
          ; 55 push boolean
          mov rax, 1
          push rax
          ; 55 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 56 push integer
          mov rax, 1
          push rax
          ; 56 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 52 end of while-loop
          jmp while_0x000000000000003b
while_0x000000000000003b_end: 
          ; 57 drop
          pop rax
          ; 57 push string
          mov rax, s_7
          push rax
          ; 57 push string
          mov rax, s_479
          push rax
          ; 57 push integer
          mov rax, 57
          push rax
          ; 57 push string
          mov rax, s_502
          push rax
          ; 57 push boolean
          mov rax, 1
          push rax
          ; 57 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 57 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 51 jump
          jmp end_0x00000000000001d6
          ; 51 label
if_0x00000000000001d6: 
          ; 59 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 59 label
end_0x00000000000001d6: 
          ; 50 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 50 return
          ret
          ; 62 function definition
fn_start: 
          push rbp
          mov rbp, rsp
          ; 64 get argument
          mov rax, rbp
          add rax, 56
          mov rbx, [rax]
          push rbx
          ; 64 get argument
          mov rax, rbp
          add rax, 48
          mov rbx, [rax]
          push rbx
          ; 64 push string
          mov rax, s_479
          push rax
          ; 64 push integer
          mov rax, 64
          push rax
          ; 64 push string
          mov rax, s_395
          push rax
          ; 64 push boolean
          mov rax, 1
          push rax
          ; 64 call
          call fn_parse_arguments
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 66 push string
          mov rax, s_483
          push rax
          ; 66 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 66 push integer
          mov rax, 8
          push rax
          ; 66 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 66 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 66 push string
          mov rax, s_479
          push rax
          ; 66 push integer
          mov rax, 66
          push rax
          ; 66 push string
          mov rax, s_395
          push rax
          ; 66 push boolean
          mov rax, 1
          push rax
          ; 66 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 66 push integer
          mov rax, 8
          push rax
          ; 66 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 66 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 67 duplicate
          pop rax
          push rax
          push rax
          ; 67 push string
          mov rax, s_479
          push rax
          ; 67 push integer
          mov rax, 67
          push rax
          ; 67 push string
          mov rax, s_395
          push rax
          ; 67 push boolean
          mov rax, 1
          push rax
          ; 67 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 67 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 67 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001d8
          ; 68 drop
          pop rax
          ; 68 push integer
          mov rax, 0
          push rax
          ; 68 get pointer to buffer
          mov rax, buf_FORMAT
          push rax
          ; 68 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 68 jump
          jmp end_0x00000000000001d8
          ; 68 label
if_0x00000000000001d8: 
          ; 70 push string
          mov rax, s_479
          push rax
          ; 70 push integer
          mov rax, 70
          push rax
          ; 70 push string
          mov rax, s_395
          push rax
          ; 70 push boolean
          mov rax, 1
          push rax
          ; 70 call
          call fn_str_to_format
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 70 get pointer to buffer
          mov rax, buf_FORMAT
          push rax
          ; 70 set integer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 70 label
end_0x00000000000001d8: 
          ; 72 push string
          mov rax, s_481
          push rax
          ; 72 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 72 push integer
          mov rax, 8
          push rax
          ; 72 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 72 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 72 push string
          mov rax, s_479
          push rax
          ; 72 push integer
          mov rax, 72
          push rax
          ; 72 push string
          mov rax, s_395
          push rax
          ; 72 push boolean
          mov rax, 1
          push rax
          ; 72 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 72 push integer
          mov rax, 8
          push rax
          ; 72 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 72 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 72 push string
          mov rax, s_479
          push rax
          ; 72 push integer
          mov rax, 72
          push rax
          ; 72 push string
          mov rax, s_395
          push rax
          ; 72 push boolean
          mov rax, 1
          push rax
          ; 72 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 72 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 73 get pointer to buffer
          mov rax, buf_SHOULD_RUN
          push rax
          ; 73 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 74 push string
          mov rax, s_485
          push rax
          ; 74 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 74 push integer
          mov rax, 8
          push rax
          ; 74 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 74 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 74 push string
          mov rax, s_479
          push rax
          ; 74 push integer
          mov rax, 74
          push rax
          ; 74 push string
          mov rax, s_395
          push rax
          ; 74 push boolean
          mov rax, 1
          push rax
          ; 74 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 74 push integer
          mov rax, 8
          push rax
          ; 74 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 74 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 74 push string
          mov rax, s_479
          push rax
          ; 74 push integer
          mov rax, 74
          push rax
          ; 74 push string
          mov rax, s_395
          push rax
          ; 74 push boolean
          mov rax, 1
          push rax
          ; 74 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 74 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 75 get pointer to buffer
          mov rax, buf_ENABLE_PROFILER
          push rax
          ; 75 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 76 push string
          mov rax, s_487
          push rax
          ; 76 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 76 push integer
          mov rax, 8
          push rax
          ; 76 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 76 push string
          mov rax, s_479
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_395
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 76 push integer
          mov rax, 8
          push rax
          ; 76 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 76 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 76 push string
          mov rax, s_479
          push rax
          ; 76 push integer
          mov rax, 76
          push rax
          ; 76 push string
          mov rax, s_395
          push rax
          ; 76 push boolean
          mov rax, 1
          push rax
          ; 76 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 76 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 77 get pointer to buffer
          mov rax, buf_VERBOSE
          push rax
          ; 77 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 78 push string
          mov rax, s_489
          push rax
          ; 78 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 78 push integer
          mov rax, 8
          push rax
          ; 78 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 78 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 78 push string
          mov rax, s_479
          push rax
          ; 78 push integer
          mov rax, 78
          push rax
          ; 78 push string
          mov rax, s_395
          push rax
          ; 78 push boolean
          mov rax, 1
          push rax
          ; 78 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 78 push integer
          mov rax, 8
          push rax
          ; 78 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 78 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 78 push string
          mov rax, s_479
          push rax
          ; 78 push integer
          mov rax, 78
          push rax
          ; 78 push string
          mov rax, s_395
          push rax
          ; 78 push boolean
          mov rax, 1
          push rax
          ; 78 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 78 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 79 get pointer to buffer
          mov rax, buf_VERIFY_MEMORY
          push rax
          ; 79 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 80 push string
          mov rax, s_491
          push rax
          ; 80 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 80 push integer
          mov rax, 8
          push rax
          ; 80 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 80 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 80 push string
          mov rax, s_479
          push rax
          ; 80 push integer
          mov rax, 80
          push rax
          ; 80 push string
          mov rax, s_395
          push rax
          ; 80 push boolean
          mov rax, 1
          push rax
          ; 80 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 80 push integer
          mov rax, 8
          push rax
          ; 80 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 80 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 80 push string
          mov rax, s_479
          push rax
          ; 80 push integer
          mov rax, 80
          push rax
          ; 80 push string
          mov rax, s_395
          push rax
          ; 80 push boolean
          mov rax, 1
          push rax
          ; 80 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 80 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 81 get pointer to buffer
          mov rax, buf_DUMP_MEMORY
          push rax
          ; 81 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 82 push string
          mov rax, s_493
          push rax
          ; 82 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 82 push integer
          mov rax, 8
          push rax
          ; 82 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 82 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 82 push string
          mov rax, s_479
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_395
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 82 push integer
          mov rax, 8
          push rax
          ; 82 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 82 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 82 push string
          mov rax, s_479
          push rax
          ; 82 push integer
          mov rax, 82
          push rax
          ; 82 push string
          mov rax, s_395
          push rax
          ; 82 push boolean
          mov rax, 1
          push rax
          ; 82 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 82 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 83 get pointer to buffer
          mov rax, buf_DUMP_TOKENS
          push rax
          ; 83 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 84 push string
          mov rax, s_495
          push rax
          ; 84 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 84 push integer
          mov rax, 8
          push rax
          ; 84 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 84 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 84 push string
          mov rax, s_479
          push rax
          ; 84 push integer
          mov rax, 84
          push rax
          ; 84 push string
          mov rax, s_395
          push rax
          ; 84 push boolean
          mov rax, 1
          push rax
          ; 84 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 84 push integer
          mov rax, 8
          push rax
          ; 84 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 84 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 84 push string
          mov rax, s_479
          push rax
          ; 84 push integer
          mov rax, 84
          push rax
          ; 84 push string
          mov rax, s_395
          push rax
          ; 84 push boolean
          mov rax, 1
          push rax
          ; 84 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 84 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 85 get pointer to buffer
          mov rax, buf_DUMP_OPCODES
          push rax
          ; 85 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 86 push string
          mov rax, s_497
          push rax
          ; 86 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 86 push integer
          mov rax, 8
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 86 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 86 push string
          mov rax, s_479
          push rax
          ; 86 push integer
          mov rax, 86
          push rax
          ; 86 push string
          mov rax, s_395
          push rax
          ; 86 push boolean
          mov rax, 1
          push rax
          ; 86 call
          call fn_dict_fetch
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 86 push integer
          mov rax, 8
          push rax
          ; 86 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 86 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 86 push string
          mov rax, s_479
          push rax
          ; 86 push integer
          mov rax, 86
          push rax
          ; 86 push string
          mov rax, s_395
          push rax
          ; 86 push boolean
          mov rax, 1
          push rax
          ; 86 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 86 is not equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmovne rax, rbx
          push rax
          ; 87 get pointer to buffer
          mov rax, buf_KEEP_ASSEMBLY
          push rax
          ; 87 set boolean value
          pop rax
          pop rbx
          mov [rax], bl
          ; 89 get pointer to buffer
          mov rax, buf_ENABLE_PROFILER
          push rax
          ; 89 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 89 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001d9
          ; 91 push string
          mov rax, s_479
          push rax
          ; 91 push integer
          mov rax, 91
          push rax
          ; 91 push string
          mov rax, s_395
          push rax
          ; 91 push boolean
          mov rax, 1
          push rax
          ; 91 call
          call fn_profiler_init
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 90 jump
          jmp end_0x00000000000001d9
          ; 90 label
if_0x00000000000001d9: 
          ; 90 label
end_0x00000000000001d9: 
          ; 94 push integer
          mov rax, 0
          push rax
          ; 94 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 94 push integer
          mov rax, 0
          push rax
          ; 94 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 94 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 94 push string
          mov rax, s_479
          push rax
          ; 94 push integer
          mov rax, 94
          push rax
          ; 94 push string
          mov rax, s_395
          push rax
          ; 94 push boolean
          mov rax, 1
          push rax
          ; 94 call
          call fn_list_fetch_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 97 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 97 push string
          mov rax, s_479
          push rax
          ; 97 push integer
          mov rax, 97
          push rax
          ; 97 push string
          mov rax, s_395
          push rax
          ; 97 push boolean
          mov rax, 1
          push rax
          ; 97 call
          call fn_free
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 99 get pointer to buffer
          mov rax, buf_VERBOSE
          push rax
          ; 99 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 99 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001da
          ; 100 push string
          mov rax, s_503
          push rax
          ; 100 push string
          mov rax, s_479
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_395
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 duplicate
          pop rax
          push rax
          push rax
          ; 100 push string
          mov rax, s_479
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_395
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 push string
          mov rax, s_7
          push rax
          ; 100 push string
          mov rax, s_479
          push rax
          ; 100 push integer
          mov rax, 100
          push rax
          ; 100 push string
          mov rax, s_395
          push rax
          ; 100 push boolean
          mov rax, 1
          push rax
          ; 100 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 100 jump
          jmp end_0x00000000000001da
          ; 100 label
if_0x00000000000001da: 
          ; 100 label
end_0x00000000000001da: 
          ; 103 duplicate
          pop rax
          push rax
          push rax
          ; 103 push string
          mov rax, s_479
          push rax
          ; 103 push integer
          mov rax, 103
          push rax
          ; 103 push string
          mov rax, s_395
          push rax
          ; 103 push boolean
          mov rax, 1
          push rax
          ; 103 call
          call fn_read_file
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 104 push string
          mov rax, s_479
          push rax
          ; 104 push integer
          mov rax, 104
          push rax
          ; 104 push string
          mov rax, s_395
          push rax
          ; 104 push boolean
          mov rax, 1
          push rax
          ; 104 call
          call fn_tokenize
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 106 get pointer to buffer
          mov rax, buf_DUMP_TOKENS
          push rax
          ; 106 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 106 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001db
          ; 107 duplicate
          pop rax
          push rax
          push rax
          ; 107 push string
          mov rax, s_479
          push rax
          ; 107 push integer
          mov rax, 107
          push rax
          ; 107 push string
          mov rax, s_395
          push rax
          ; 107 push boolean
          mov rax, 1
          push rax
          ; 107 call
          call fn_dump_tokens
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 107 jump
          jmp end_0x00000000000001db
          ; 107 label
if_0x00000000000001db: 
          ; 107 label
end_0x00000000000001db: 
          ; 110 over
          pop rax
          pop rbx
          push rbx
          push rax
          push rbx
          ; 110 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 110 push string
          mov rax, s_479
          push rax
          ; 110 push integer
          mov rax, 110
          push rax
          ; 110 push string
          mov rax, s_395
          push rax
          ; 110 push boolean
          mov rax, 1
          push rax
          ; 110 call
          call fn_parse
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 112 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 113 duplicate
          pop rax
          push rax
          push rax
          ; 113 push string
          mov rax, s_479
          push rax
          ; 113 push integer
          mov rax, 113
          push rax
          ; 113 push string
          mov rax, s_395
          push rax
          ; 113 push boolean
          mov rax, 1
          push rax
          ; 113 call
          call fn_strlen
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 113 push integer
          mov rax, 3
          push rax
          ; 113 subtract
          pop rax
          pop rbx
          sub rbx, rax
          push rbx
          ; 113 push string
          mov rax, s_479
          push rax
          ; 113 push integer
          mov rax, 113
          push rax
          ; 113 push string
          mov rax, s_395
          push rax
          ; 113 push boolean
          mov rax, 1
          push rax
          ; 113 call
          call fn_substring
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 114 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 114 set pointer value
          pop rax
          pop rbx
          mov [rax], rbx
          ; 116 get pointer to buffer
          mov rax, buf_DUMP_OPCODES
          push rax
          ; 116 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 116 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001dc
          ; 117 duplicate
          pop rax
          push rax
          push rax
          ; 117 push string
          mov rax, s_479
          push rax
          ; 117 push integer
          mov rax, 117
          push rax
          ; 117 push string
          mov rax, s_395
          push rax
          ; 117 push boolean
          mov rax, 1
          push rax
          ; 117 call
          call fn_dump_opcodes
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 117 jump
          jmp end_0x00000000000001dc
          ; 117 label
if_0x00000000000001dc: 
          ; 117 label
end_0x00000000000001dc: 
          ; 119 get pointer to buffer
          mov rax, buf_ENABLE_PROFILER
          push rax
          ; 119 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 119 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001dd
          ; 121 drop
          pop rax
          ; 122 push string
          mov rax, s_479
          push rax
          ; 122 push integer
          mov rax, 122
          push rax
          ; 122 push string
          mov rax, s_395
          push rax
          ; 122 push boolean
          mov rax, 1
          push rax
          ; 122 call
          call fn_profiler_dump
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 120 jump
          jmp end_0x00000000000001dd
          ; 120 label
if_0x00000000000001dd: 
          ; 123 get pointer to buffer
          mov rax, buf_FORMAT
          push rax
          ; 123 dereference integer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 123 push integer
          mov rax, 0
          push rax
          ; 123 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 123 start of if-block
          pop rax
          test rax, rax
          jz elif_0x00000000000001de
          ; 125 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 125 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 125 push string
          mov rax, s_504
          push rax
          ; 125 push string
          mov rax, s_479
          push rax
          ; 125 push integer
          mov rax, 125
          push rax
          ; 125 push string
          mov rax, s_395
          push rax
          ; 125 push boolean
          mov rax, 1
          push rax
          ; 125 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 126 get pointer to buffer
          mov rax, buf_VERBOSE
          push rax
          ; 126 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 126 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001df
          ; 127 push string
          mov rax, s_505
          push rax
          ; 127 push string
          mov rax, s_479
          push rax
          ; 127 push integer
          mov rax, 127
          push rax
          ; 127 push string
          mov rax, s_395
          push rax
          ; 127 push boolean
          mov rax, 1
          push rax
          ; 127 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 127 duplicate
          pop rax
          push rax
          push rax
          ; 127 push string
          mov rax, s_479
          push rax
          ; 127 push integer
          mov rax, 127
          push rax
          ; 127 push string
          mov rax, s_395
          push rax
          ; 127 push boolean
          mov rax, 1
          push rax
          ; 127 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 127 push string
          mov rax, s_7
          push rax
          ; 127 push string
          mov rax, s_479
          push rax
          ; 127 push integer
          mov rax, 127
          push rax
          ; 127 push string
          mov rax, s_395
          push rax
          ; 127 push boolean
          mov rax, 1
          push rax
          ; 127 call
          call fn_puts
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 127 jump
          jmp end_0x00000000000001df
          ; 127 label
if_0x00000000000001df: 
          ; 127 label
end_0x00000000000001df: 
          ; 129 push character
          mov rax, 119
          mov rax, 119
          push rax
          ; 129 push string
          mov rax, s_479
          push rax
          ; 129 push integer
          mov rax, 129
          push rax
          ; 129 push string
          mov rax, s_395
          push rax
          ; 129 push boolean
          mov rax, 1
          push rax
          ; 129 call
          call fn_open
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 130 push string
          mov rax, s_479
          push rax
          ; 130 push integer
          mov rax, 130
          push rax
          ; 130 push string
          mov rax, s_395
          push rax
          ; 130 push boolean
          mov rax, 1
          push rax
          ; 130 call
          call fn_generate_code_x86_64_linux
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 132 push string
          mov rax, s_506
          push rax
          ; 133 push integer
          mov rax, 8
          push rax
          ; 133 push string
          mov rax, s_479
          push rax
          ; 133 push integer
          mov rax, 133
          push rax
          ; 133 push string
          mov rax, s_395
          push rax
          ; 133 push boolean
          mov rax, 1
          push rax
          ; 133 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 134 push string
          mov rax, s_507
          push rax
          ; 134 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 134 push string
          mov rax, s_479
          push rax
          ; 134 push integer
          mov rax, 134
          push rax
          ; 134 push string
          mov rax, s_395
          push rax
          ; 134 push boolean
          mov rax, 1
          push rax
          ; 134 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 135 push string
          mov rax, s_483
          push rax
          ; 135 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 135 push string
          mov rax, s_479
          push rax
          ; 135 push integer
          mov rax, 135
          push rax
          ; 135 push string
          mov rax, s_395
          push rax
          ; 135 push boolean
          mov rax, 1
          push rax
          ; 135 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 136 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 136 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 136 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 136 push string
          mov rax, s_479
          push rax
          ; 136 push integer
          mov rax, 136
          push rax
          ; 136 push string
          mov rax, s_395
          push rax
          ; 136 push boolean
          mov rax, 1
          push rax
          ; 136 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 137 push string
          mov rax, s_479
          push rax
          ; 137 push integer
          mov rax, 137
          push rax
          ; 137 push string
          mov rax, s_395
          push rax
          ; 137 push boolean
          mov rax, 1
          push rax
          ; 137 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 137 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 137 push string
          mov rax, s_479
          push rax
          ; 137 push integer
          mov rax, 137
          push rax
          ; 137 push string
          mov rax, s_395
          push rax
          ; 137 push boolean
          mov rax, 1
          push rax
          ; 137 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 138 push integer
          mov rax, 24
          push rax
          ; 138 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 138 push string
          mov rax, s_479
          push rax
          ; 138 push integer
          mov rax, 138
          push rax
          ; 138 push string
          mov rax, s_395
          push rax
          ; 138 push boolean
          mov rax, 1
          push rax
          ; 138 call
          call fn_exec_silent
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 140 push string
          mov rax, s_508
          push rax
          ; 141 push integer
          mov rax, 8
          push rax
          ; 141 push string
          mov rax, s_479
          push rax
          ; 141 push integer
          mov rax, 141
          push rax
          ; 141 push string
          mov rax, s_395
          push rax
          ; 141 push boolean
          mov rax, 1
          push rax
          ; 141 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 142 push string
          mov rax, s_509
          push rax
          ; 142 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 142 push string
          mov rax, s_479
          push rax
          ; 142 push integer
          mov rax, 142
          push rax
          ; 142 push string
          mov rax, s_395
          push rax
          ; 142 push boolean
          mov rax, 1
          push rax
          ; 142 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 143 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 143 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 143 push string
          mov rax, s_504
          push rax
          ; 143 push string
          mov rax, s_479
          push rax
          ; 143 push integer
          mov rax, 143
          push rax
          ; 143 push string
          mov rax, s_395
          push rax
          ; 143 push boolean
          mov rax, 1
          push rax
          ; 143 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 143 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 143 push string
          mov rax, s_479
          push rax
          ; 143 push integer
          mov rax, 143
          push rax
          ; 143 push string
          mov rax, s_395
          push rax
          ; 143 push boolean
          mov rax, 1
          push rax
          ; 143 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 144 push string
          mov rax, s_479
          push rax
          ; 144 push integer
          mov rax, 144
          push rax
          ; 144 push string
          mov rax, s_395
          push rax
          ; 144 push boolean
          mov rax, 1
          push rax
          ; 144 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 144 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 144 push string
          mov rax, s_479
          push rax
          ; 144 push integer
          mov rax, 144
          push rax
          ; 144 push string
          mov rax, s_395
          push rax
          ; 144 push boolean
          mov rax, 1
          push rax
          ; 144 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 145 push string
          mov rax, s_479
          push rax
          ; 145 push integer
          mov rax, 145
          push rax
          ; 145 push string
          mov rax, s_395
          push rax
          ; 145 push boolean
          mov rax, 1
          push rax
          ; 145 call
          call fn_log_cmd
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 145 push integer
          mov rax, 24
          push rax
          ; 145 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 145 push string
          mov rax, s_479
          push rax
          ; 145 push integer
          mov rax, 145
          push rax
          ; 145 push string
          mov rax, s_395
          push rax
          ; 145 push boolean
          mov rax, 1
          push rax
          ; 145 call
          call fn_exec_silent
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 147 get pointer to buffer
          mov rax, buf_SHOULD_RUN
          push rax
          ; 147 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 147 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001e0
          ; 148 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 148 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 149 push integer
          mov rax, 8
          push rax
          ; 149 push string
          mov rax, s_479
          push rax
          ; 149 push integer
          mov rax, 149
          push rax
          ; 149 push string
          mov rax, s_395
          push rax
          ; 149 push boolean
          mov rax, 1
          push rax
          ; 149 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 push string
          mov rax, s_510
          push rax
          ; 150 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 150 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 150 push string
          mov rax, s_479
          push rax
          ; 150 push integer
          mov rax, 150
          push rax
          ; 150 push string
          mov rax, s_395
          push rax
          ; 150 push boolean
          mov rax, 1
          push rax
          ; 150 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 150 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 150 push string
          mov rax, s_479
          push rax
          ; 150 push integer
          mov rax, 150
          push rax
          ; 150 push string
          mov rax, s_395
          push rax
          ; 150 push boolean
          mov rax, 1
          push rax
          ; 150 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 151 push string
          mov rax, s_479
          push rax
          ; 151 push integer
          mov rax, 151
          push rax
          ; 151 push string
          mov rax, s_395
          push rax
          ; 151 push boolean
          mov rax, 1
          push rax
          ; 151 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 151 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 151 push string
          mov rax, s_479
          push rax
          ; 151 push integer
          mov rax, 151
          push rax
          ; 151 push string
          mov rax, s_395
          push rax
          ; 151 push boolean
          mov rax, 1
          push rax
          ; 151 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 push string
          mov rax, s_479
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_395
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_log_cmd
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 152 push integer
          mov rax, 24
          push rax
          ; 152 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 152 push string
          mov rax, s_479
          push rax
          ; 152 push integer
          mov rax, 152
          push rax
          ; 152 push string
          mov rax, s_395
          push rax
          ; 152 push boolean
          mov rax, 1
          push rax
          ; 152 call
          call fn_exec
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 148 jump
          jmp end_0x00000000000001e0
          ; 148 label
if_0x00000000000001e0: 
          ; 148 label
end_0x00000000000001e0: 
          ; 154 get pointer to buffer
          mov rax, buf_KEEP_ASSEMBLY
          push rax
          ; 154 dereference boolean
          pop rax
          xor rbx, rbx
          mov bl, [rax]
          push rbx
          ; 154 push boolean
          mov rax, 0
          push rax
          ; 154 is equal?
          mov rax, 0
          mov rbx, 1
          pop rcx
          pop rdx
          cmp rdx, rcx
          cmove rax, rbx
          push rax
          ; 154 start of if-block
          pop rax
          test rax, rax
          jz if_0x00000000000001e1
          ; 155 push string
          mov rax, s_506
          push rax
          ; 156 push integer
          mov rax, 8
          push rax
          ; 156 push string
          mov rax, s_479
          push rax
          ; 156 push integer
          mov rax, 156
          push rax
          ; 156 push string
          mov rax, s_395
          push rax
          ; 156 push boolean
          mov rax, 1
          push rax
          ; 156 call
          call fn_new_list
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 157 push string
          mov rax, s_507
          push rax
          ; 157 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 157 push string
          mov rax, s_479
          push rax
          ; 157 push integer
          mov rax, 157
          push rax
          ; 157 push string
          mov rax, s_395
          push rax
          ; 157 push boolean
          mov rax, 1
          push rax
          ; 157 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 158 get pointer to buffer
          mov rax, buf_input_file
          push rax
          ; 158 dereference pointer
          pop rax
          mov rbx, [rax]
          push rbx
          ; 158 push string
          mov rax, s_504
          push rax
          ; 158 push string
          mov rax, s_479
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_395
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn_concat
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 158 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 158 push string
          mov rax, s_479
          push rax
          ; 158 push integer
          mov rax, 158
          push rax
          ; 158 push string
          mov rax, s_395
          push rax
          ; 158 push boolean
          mov rax, 1
          push rax
          ; 158 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 159 push string
          mov rax, s_479
          push rax
          ; 159 push integer
          mov rax, 159
          push rax
          ; 159 push string
          mov rax, s_395
          push rax
          ; 159 push boolean
          mov rax, 1
          push rax
          ; 159 call
          call fn_NULL
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 159 swap
          pop rax
          pop rbx
          push rax
          push rbx
          ; 159 push string
          mov rax, s_479
          push rax
          ; 159 push integer
          mov rax, 159
          push rax
          ; 159 push string
          mov rax, s_395
          push rax
          ; 159 push boolean
          mov rax, 1
          push rax
          ; 159 call
          call fn_list_append_ptr
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          push rax
          ; 160 push integer
          mov rax, 24
          push rax
          ; 160 add
          pop rax
          pop rbx
          add rbx, rax
          push rbx
          ; 160 push string
          mov rax, s_479
          push rax
          ; 160 push integer
          mov rax, 160
          push rax
          ; 160 push string
          mov rax, s_395
          push rax
          ; 160 push boolean
          mov rax, 1
          push rax
          ; 160 call
          call fn_exec
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 155 jump
          jmp end_0x00000000000001e1
          ; 155 label
if_0x00000000000001e1: 
          ; 155 label
end_0x00000000000001e1: 
          ; 123 jump
          jmp end_0x00000000000001dd
          ; 123 label
elif_0x00000000000001de: 
          ; 162 drop
          pop rax
          ; 162 push string
          mov rax, s_511
          push rax
          ; 162 push string
          mov rax, s_479
          push rax
          ; 162 push integer
          mov rax, 162
          push rax
          ; 162 push string
          mov rax, s_395
          push rax
          ; 162 push boolean
          mov rax, 1
          push rax
          ; 162 call
          call fn_raise
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          pop rbx
          ; 162 label
end_0x00000000000001dd: 
          ; 164 push integer
          mov rax, 0
          push rax
          ; 63 restore frame
          pop rax
          mov rsp, rbp
          pop rbp
          ; 63 return
          ret
_start:   
          xor rax, rax
          push rax
          push rax
          push rax
          push rax
          call fn_start
_end:     
          mov rdi, rax
          mov rax, 60
          syscall
segment readable writeable 
buf__itos: rb 21 
s_1: db 48, 0 
s_2: db 108, 105, 98, 47, 99, 111, 114, 101, 46, 98, 98, 0 
s_3: db 116, 114, 97, 99, 101, 98, 97, 99, 107, 0 
s_4: db 10, 84, 114, 97, 99, 101, 98, 97, 99, 107, 58, 10, 0 
s_5: db 44, 32, 108, 105, 110, 101, 32, 0 
s_6: db 32, 105, 110, 32, 0 
s_7: db 10, 0 
s_8: db 108, 105, 98, 47, 115, 116, 100, 47, 108, 105, 110, 117, 120, 46, 98, 98, 0 
s_9: db 119, 114, 105, 116, 101, 0 
s_10: db 112, 117, 116, 115, 0 
s_11: db 101, 114, 114, 111, 114, 0 
s_12: db 114, 97, 105, 115, 101, 0 
s_13: db 97, 115, 115, 101, 114, 116, 0 
s_14: db 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 111, 112, 101, 110, 32, 102, 105, 108, 101, 10, 0 
s_15: db 111, 112, 101, 110, 0 
s_16: db 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 114, 101, 97, 100, 32, 102, 105, 108, 101, 10, 0 
s_17: db 114, 101, 97, 100, 0 
s_18: db 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 32, 115, 105, 103, 110, 97, 108, 32, 97, 99, 116, 105, 111, 110, 10, 0 
s_19: db 114, 116, 95, 115, 105, 103, 97, 99, 116, 105, 111, 110, 0 
s_20: db 82, 84, 95, 83, 73, 71, 82, 69, 84, 85, 82, 78, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 10, 0 
s_21: db 114, 116, 95, 115, 105, 103, 114, 101, 116, 117, 114, 110, 0 
s_22: db 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 115, 101, 116, 32, 116, 104, 101, 32, 116, 105, 109, 101, 114, 10, 0 
s_23: db 115, 101, 116, 105, 116, 105, 109, 101, 114, 0 
buf__sigaction: rb 32 
s_24: db 115, 101, 116, 117, 112, 95, 115, 105, 103, 110, 97, 108, 95, 104, 97, 110, 100, 108, 101, 114, 0 
buf__itimerval: rb 32 
s_25: db 115, 101, 116, 95, 116, 105, 109, 101, 114, 0 
s_26: db 47, 100, 101, 118, 47, 110, 117, 108, 108, 0 
s_27: db 101, 120, 101, 99, 95, 115, 105, 108, 101, 110, 116, 0 
s_28: db 108, 105, 98, 47, 115, 116, 100, 46, 98, 98, 0 
s_29: db 115, 116, 114, 101, 113, 0 
buf_current_page: rb 8 
buf_root_page: rb 8 
buf_VERIFY_MEMORY: rb 1 
buf_DUMP_MEMORY: rb 1 
buf__vm_buf: rb 19 
s_30: db 86, 101, 114, 105, 102, 121, 105, 110, 103, 32, 109, 101, 109, 111, 114, 121, 46, 46, 10, 0 
s_31: db 118, 101, 114, 105, 102, 121, 95, 109, 101, 109, 111, 114, 121, 0 
s_32: db 42, 32, 80, 97, 103, 101, 58, 32, 0 
s_33: db 32, 32, 42, 32, 112, 114, 101, 118, 58, 32, 0 
s_34: db 32, 32, 42, 32, 110, 101, 120, 116, 58, 32, 0 
s_35: db 32, 32, 42, 32, 115, 105, 122, 101, 58, 32, 0 
s_36: db 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 112, 114, 101, 118, 105, 111, 117, 115, 32, 112, 97, 103, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 118, 97, 108, 105, 100, 10, 0 
s_37: db 80, 97, 103, 101, 32, 115, 105, 122, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 118, 97, 108, 117, 101, 10, 0 
s_38: db 80, 97, 103, 101, 32, 119, 105, 116, 104, 111, 117, 116, 32, 98, 108, 111, 99, 107, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 117, 110, 109, 97, 112, 112, 101, 100, 0 
s_39: db 32, 32, 42, 32, 98, 108, 111, 99, 107, 58, 32, 0 
s_40: db 32, 32, 32, 32, 42, 32, 102, 105, 108, 101, 58, 32, 0 
s_41: db 32, 32, 32, 32, 42, 32, 108, 105, 110, 101, 58, 32, 0 
s_42: db 32, 32, 32, 32, 42, 32, 115, 105, 122, 101, 58, 32, 0 
s_43: db 32, 32, 32, 32, 42, 32, 110, 101, 120, 116, 58, 32, 0 
s_44: db 32, 32, 32, 32, 42, 32, 112, 114, 101, 118, 58, 32, 0 
s_45: db 32, 32, 32, 32, 42, 32, 102, 114, 101, 101, 58, 32, 0 
s_46: db 116, 114, 117, 101, 10, 0 
s_47: db 102, 97, 108, 115, 101, 10, 0 
s_48: db 66, 108, 111, 99, 107, 115, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 111, 118, 101, 114, 102, 108, 111, 119, 32, 112, 97, 103, 101, 32, 109, 101, 109, 111, 114, 121, 10, 0 
s_49: db 78, 101, 120, 116, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 112, 97, 103, 101, 10, 0 
s_50: db 80, 114, 101, 118, 105, 111, 117, 115, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 112, 97, 103, 101, 10, 0 
s_51: db 78, 101, 120, 116, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 97, 102, 116, 101, 114, 32, 116, 104, 105, 115, 32, 111, 110, 101, 10, 0 
s_52: db 80, 114, 101, 118, 105, 111, 117, 115, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 100, 105, 114, 101, 99, 116, 108, 121, 32, 98, 101, 102, 111, 114, 101, 32, 116, 104, 105, 115, 32, 111, 110, 101, 10, 0 
s_53: db 32, 32, 42, 32, 117, 110, 117, 115, 101, 100, 32, 98, 121, 116, 101, 115, 58, 32, 0 
s_54: db 66, 108, 111, 99, 107, 32, 115, 105, 122, 101, 115, 32, 115, 104, 111, 117, 108, 100, 32, 115, 117, 109, 32, 117, 112, 32, 116, 111, 32, 112, 97, 103, 101, 32, 115, 105, 122, 101, 10, 0 
s_55: db 77, 101, 109, 111, 114, 121, 32, 79, 75, 10, 0 
s_56: db 80, 97, 103, 101, 32, 115, 105, 122, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 116, 32, 108, 101, 97, 115, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 105, 122, 101, 10, 0 
s_57: db 95, 109, 97, 108, 108, 111, 99, 95, 103, 101, 116, 95, 110, 101, 120, 116, 95, 112, 97, 103, 101, 0 
s_58: db 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 32, 112, 97, 103, 101, 10, 0 
s_59: db 0 
s_60: db 78, 101, 120, 116, 32, 112, 97, 103, 101, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 78, 85, 76, 76, 10, 0 
s_61: db 83, 112, 108, 105, 116, 116, 101, 100, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 102, 114, 101, 101, 10, 0 
s_62: db 95, 109, 97, 108, 108, 111, 99, 95, 115, 112, 108, 105, 116, 95, 98, 108, 111, 99, 107, 0 
s_63: db 95, 109, 97, 108, 108, 111, 99, 95, 98, 108, 111, 99, 107, 95, 105, 115, 95, 97, 118, 97, 105, 108, 97, 98, 108, 101, 95, 111, 114, 95, 78, 85, 76, 76, 0 
s_64: db 109, 97, 108, 108, 111, 99, 0 
s_65: db 83, 105, 122, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 10, 0 
s_66: db 70, 105, 114, 115, 116, 32, 112, 97, 103, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 115, 101, 116, 10, 0 
s_67: db 80, 97, 103, 101, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 98, 101, 32, 114, 111, 111, 116, 32, 112, 97, 103, 101, 10, 0 
s_68: db 78, 101, 120, 116, 32, 112, 97, 103, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 115, 101, 116, 10, 0 
s_69: db 66, 108, 111, 99, 107, 32, 115, 105, 122, 101, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 103, 114, 101, 97, 116, 101, 114, 32, 116, 104, 97, 110, 32, 122, 101, 114, 111, 10, 0 
s_70: db 80, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 102, 111, 117, 110, 100, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 110, 111, 110, 45, 78, 85, 76, 76, 10, 0 
s_71: db 70, 111, 117, 110, 100, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 102, 114, 101, 101, 10, 0 
s_72: db 122, 97, 108, 108, 111, 99, 0 
s_73: db 109, 101, 109, 99, 112, 121, 0 
s_74: db 66, 108, 111, 99, 107, 115, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 102, 114, 101, 101, 0 
s_75: db 109, 101, 114, 103, 101, 95, 98, 108, 111, 99, 107, 115, 0 
s_76: db 84, 114, 121, 105, 110, 103, 32, 116, 111, 32, 102, 114, 101, 101, 32, 97, 108, 114, 101, 97, 100, 121, 32, 102, 114, 101, 101, 100, 32, 100, 97, 116, 97, 10, 0 
s_77: db 102, 114, 101, 101, 0 
s_78: db 80, 114, 101, 118, 105, 111, 117, 115, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 101, 97, 114, 108, 105, 101, 114, 10, 0 
s_79: db 80, 114, 101, 118, 105, 111, 117, 115, 32, 98, 108, 111, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 119, 105, 116, 104, 105, 110, 32, 116, 104, 101, 32, 115, 97, 109, 101, 32, 112, 97, 103, 101, 10, 0 
s_80: db 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 102, 114, 101, 101, 32, 109, 101, 109, 111, 114, 121, 32, 112, 97, 103, 101, 10, 0 
s_81: db 112, 117, 116, 105, 0 
s_82: db 101, 114, 114, 111, 114, 105, 0 
s_83: db 95, 99, 111, 110, 99, 97, 116, 0 
s_84: db 99, 111, 110, 99, 97, 116, 0 
s_85: db 99, 111, 110, 99, 97, 116, 102, 108, 0 
s_86: db 99, 111, 110, 99, 97, 116, 102, 114, 0 
s_87: db 99, 111, 110, 99, 97, 116, 102, 0 
s_88: db 85, 110, 97, 98, 108, 101, 32, 116, 111, 32, 99, 111, 110, 118, 101, 114, 116, 32, 115, 116, 114, 105, 110, 103, 32, 116, 111, 32, 105, 110, 116, 101, 103, 101, 114, 58, 32, 0 
s_89: db 115, 116, 111, 105, 0 
buf__read_file_buffer: rb 513 
s_90: db 114, 101, 97, 100, 95, 102, 105, 108, 101, 0 
s_91: db 115, 117, 98, 115, 116, 114, 105, 110, 103, 0 
s_92: db 99, 104, 111, 112, 95, 102, 105, 114, 115, 116, 0 
s_93: db 99, 104, 111, 112, 95, 98, 101, 102, 111, 114, 101, 0 
s_94: db 99, 104, 111, 112, 95, 97, 102, 116, 101, 114, 0 
s_95: db 108, 105, 98, 47, 115, 116, 100, 47, 108, 105, 115, 116, 46, 98, 98, 0 
s_96: db 108, 105, 115, 116, 95, 99, 114, 101, 97, 116, 101, 0 
s_97: db 110, 101, 119, 95, 108, 105, 115, 116, 0 
s_98: db 108, 105, 115, 116, 95, 99, 111, 112, 121, 0 
s_99: db 76, 105, 115, 116, 32, 105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 10, 0 
s_100: db 108, 105, 115, 116, 95, 102, 101, 116, 99, 104, 0 
s_101: db 67, 97, 110, 39, 116, 32, 99, 97, 108, 108, 32, 105, 110, 116, 101, 103, 101, 114, 45, 115, 112, 101, 99, 105, 102, 105, 99, 32, 109, 101, 116, 104, 111, 100, 32, 102, 111, 114, 32, 108, 105, 115, 116, 32, 119, 105, 116, 104, 32, 110, 111, 110, 45, 105, 110, 116, 101, 103, 101, 114, 32, 105, 116, 101, 109, 115, 10, 0 
s_102: db 108, 105, 115, 116, 95, 102, 101, 116, 99, 104, 95, 105, 110, 116, 0 
s_103: db 67, 97, 110, 39, 116, 32, 99, 97, 108, 108, 32, 112, 111, 105, 110, 116, 101, 114, 45, 115, 112, 101, 99, 105, 102, 105, 99, 32, 109, 101, 116, 104, 111, 100, 32, 102, 111, 114, 32, 108, 105, 115, 116, 32, 119, 105, 116, 104, 32, 110, 111, 110, 45, 112, 111, 105, 110, 116, 101, 114, 32, 105, 116, 101, 109, 115, 10, 0 
s_104: db 108, 105, 115, 116, 95, 102, 101, 116, 99, 104, 95, 112, 116, 114, 0 
s_105: db 108, 105, 115, 116, 95, 99, 111, 110, 116, 97, 105, 110, 115, 95, 115, 116, 114, 105, 110, 103, 0 
s_106: db 67, 97, 110, 39, 116, 32, 112, 111, 112, 32, 102, 114, 111, 109, 32, 97, 110, 32, 101, 109, 112, 116, 121, 32, 108, 105, 115, 116, 10, 0 
s_107: db 108, 105, 115, 116, 95, 112, 111, 112, 0 
s_108: db 108, 105, 115, 116, 95, 112, 111, 112, 95, 105, 110, 116, 0 
s_109: db 108, 105, 115, 116, 95, 112, 111, 112, 95, 112, 116, 114, 0 
s_110: db 67, 97, 110, 39, 116, 32, 112, 101, 101, 107, 32, 105, 110, 32, 97, 110, 32, 101, 109, 112, 116, 121, 32, 108, 105, 115, 116, 10, 0 
s_111: db 108, 105, 115, 116, 95, 112, 101, 101, 107, 0 
s_112: db 108, 105, 115, 116, 95, 112, 101, 101, 107, 95, 105, 110, 116, 0 
s_113: db 108, 105, 115, 116, 95, 112, 101, 101, 107, 95, 112, 116, 114, 0 
s_114: db 108, 105, 115, 116, 95, 97, 112, 112, 101, 110, 100, 0 
s_115: db 108, 105, 115, 116, 95, 97, 112, 112, 101, 110, 100, 95, 105, 110, 116, 0 
s_116: db 108, 105, 115, 116, 95, 97, 112, 112, 101, 110, 100, 95, 112, 116, 114, 0 
s_117: db 108, 105, 98, 47, 115, 116, 100, 47, 100, 105, 99, 116, 46, 98, 98, 0 
s_118: db 99, 114, 101, 97, 116, 101, 95, 100, 105, 99, 116, 0 
s_119: db 110, 101, 119, 95, 100, 105, 99, 116, 0 
s_120: db 68, 105, 99, 116, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 98, 117, 99, 107, 101, 116, 115, 10, 0 
s_121: db 100, 105, 99, 116, 95, 102, 101, 116, 99, 104, 0 
s_122: db 68, 105, 99, 116, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 98, 117, 99, 107, 101, 116, 115, 0 
s_123: db 100, 105, 99, 116, 95, 105, 110, 115, 101, 114, 116, 0 
buf__args: rb 8 
buf__posargs: rb 8 
buf__kwargs: rb 8 
buf__flags: rb 8 
s_124: db 108, 105, 98, 47, 115, 116, 100, 47, 97, 114, 103, 112, 97, 114, 115, 101, 46, 98, 98, 0 
s_125: db 97, 114, 103, 112, 97, 114, 115, 101, 95, 105, 110, 105, 116, 0 
s_126: db 85, 78, 75, 78, 79, 87, 78, 0 
s_127: db 67, 111, 117, 108, 100, 32, 110, 111, 116, 32, 112, 97, 114, 115, 101, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 32, 100, 117, 101, 32, 116, 111, 32, 105, 110, 100, 101, 120, 32, 101, 114, 114, 111, 114, 10, 0 
s_128: db 103, 101, 116, 95, 97, 114, 103, 117, 109, 101, 110, 116, 0 
s_129: db 97, 114, 103, 112, 97, 114, 115, 101, 95, 97, 100, 100, 95, 97, 114, 103, 117, 109, 101, 110, 116, 0 
s_130: db 85, 110, 107, 110, 111, 119, 110, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 10, 0 
s_131: db 85, 115, 97, 103, 101, 58, 32, 0 
s_132: db 97, 114, 103, 112, 97, 114, 115, 101, 95, 112, 114, 105, 110, 116, 95, 104, 101, 108, 112, 0 
s_133: db 32, 91, 79, 80, 84, 73, 79, 78, 83, 93, 0 
s_134: db 32, 0 
s_135: db 10, 10, 0 
s_136: db 80, 111, 115, 105, 116, 105, 111, 110, 97, 108, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 58, 10, 0 
s_137: db 32, 32, 32, 32, 0 
s_138: db 32, 32, 32, 32, 32, 32, 32, 32, 0 
s_139: db 79, 112, 116, 105, 111, 110, 97, 108, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 58, 10, 0 
s_140: db 70, 108, 97, 103, 115, 58, 10, 0 
s_141: db 97, 114, 103, 112, 97, 114, 115, 101, 95, 112, 97, 114, 115, 101, 95, 97, 114, 103, 115, 0 
s_142: db 45, 0 
s_143: db 45, 45, 104, 101, 108, 112, 0 
s_144: db 45, 104, 0 
s_145: db 83, 69, 84, 0 
buf__profiler_stack: rb 8 
buf__profiler_lock: rb 1 
s_146: db 108, 105, 98, 47, 115, 116, 100, 47, 112, 114, 111, 102, 105, 108, 101, 114, 46, 98, 98, 0 
s_147: db 95, 112, 114, 111, 102, 105, 108, 101, 114, 95, 115, 105, 103, 110, 97, 108, 95, 104, 97, 110, 100, 108, 101, 114, 0 
s_148: db 87, 97, 114, 110, 105, 110, 103, 58, 32, 112, 114, 111, 102, 105, 108, 101, 114, 32, 108, 111, 99, 107, 32, 105, 115, 32, 115, 101, 116, 10, 0 
s_149: db 112, 114, 111, 102, 105, 108, 101, 114, 95, 100, 117, 109, 112, 0 
s_150: db 95, 115, 116, 97, 114, 116, 0 
s_151: db 112, 114, 111, 102, 105, 108, 101, 114, 95, 105, 110, 105, 116, 0 
s_152: db 76, 105, 110, 117, 120, 32, 120, 56, 54, 45, 54, 52, 0 
s_153: db 85, 110, 107, 110, 111, 119, 110, 32, 102, 111, 114, 109, 97, 116, 0 
s_154: db 115, 114, 99, 47, 102, 111, 114, 109, 97, 116, 115, 46, 98, 98, 0 
s_155: db 102, 111, 114, 109, 97, 116, 95, 116, 111, 95, 115, 116, 114, 0 
s_156: db 108, 105, 110, 117, 120, 95, 120, 56, 54, 95, 54, 52, 0 
s_157: db 115, 116, 114, 95, 116, 111, 95, 102, 111, 114, 109, 97, 116, 0 
s_158: db 85, 110, 107, 110, 111, 119, 110, 32, 102, 111, 114, 109, 97, 116, 58, 32, 0 
s_159: db 108, 105, 98, 47, 115, 116, 100, 47, 116, 101, 120, 116, 98, 117, 102, 102, 101, 114, 46, 98, 98, 0 
s_160: db 116, 101, 120, 116, 98, 117, 102, 102, 101, 114, 95, 99, 114, 101, 97, 116, 101, 0 
s_161: db 110, 101, 119, 95, 116, 101, 120, 116, 98, 117, 102, 102, 101, 114, 0 
s_162: db 116, 101, 120, 116, 98, 117, 102, 102, 101, 114, 95, 97, 112, 112, 101, 110, 100, 0 
s_163: db 110, 111, 32, 111, 112, 101, 114, 97, 116, 105, 111, 110, 0 
s_164: db 97, 100, 100, 0 
s_165: db 98, 105, 116, 119, 105, 115, 101, 32, 97, 110, 100, 0 
s_166: db 98, 105, 116, 119, 105, 115, 101, 32, 111, 114, 0 
s_167: db 99, 97, 108, 108, 0 
s_168: db 99, 108, 101, 97, 110, 117, 112, 0 
s_169: db 99, 114, 101, 97, 116, 101, 32, 98, 117, 102, 102, 101, 114, 0 
s_170: db 100, 101, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 98, 111, 111, 108, 101, 97, 110, 0 
s_171: db 100, 101, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 0 
s_172: db 100, 101, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 105, 110, 116, 101, 103, 101, 114, 0 
s_173: db 100, 101, 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 112, 111, 105, 110, 116, 101, 114, 0 
s_174: db 100, 105, 118, 105, 100, 101, 0 
s_175: db 100, 114, 111, 112, 0 
s_176: db 100, 117, 112, 108, 105, 99, 97, 116, 101, 0 
s_177: db 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0 
s_178: db 103, 101, 116, 32, 97, 114, 103, 117, 109, 101, 110, 116, 0 
s_179: db 103, 101, 116, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 98, 117, 102, 102, 101, 114, 0 
s_180: db 115, 116, 97, 114, 116, 32, 111, 102, 32, 105, 102, 45, 98, 108, 111, 99, 107, 0 
s_181: db 105, 115, 32, 101, 113, 117, 97, 108, 63, 0 
s_182: db 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 63, 0 
s_183: db 105, 115, 32, 103, 114, 101, 97, 116, 101, 114, 32, 111, 114, 32, 101, 113, 117, 97, 108, 63, 0 
s_184: db 105, 115, 32, 108, 101, 115, 115, 63, 0 
s_185: db 105, 115, 32, 108, 101, 115, 115, 32, 111, 114, 32, 101, 113, 117, 97, 108, 63, 0 
s_186: db 105, 115, 32, 110, 111, 116, 32, 101, 113, 117, 97, 108, 63, 0 
s_187: db 106, 117, 109, 112, 0 
s_188: db 108, 97, 98, 101, 108, 0 
s_189: db 109, 111, 100, 0 
s_190: db 109, 117, 108, 116, 105, 112, 108, 121, 0 
s_191: db 111, 118, 101, 114, 0 
s_192: db 112, 117, 115, 104, 32, 98, 111, 111, 108, 101, 97, 110, 0 
s_193: db 112, 117, 115, 104, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 0 
s_194: db 112, 117, 115, 104, 32, 105, 110, 116, 101, 103, 101, 114, 0 
s_195: db 112, 117, 115, 104, 32, 115, 116, 114, 105, 110, 103, 0 
s_196: db 114, 101, 102, 101, 114, 101, 110, 99, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0 
s_197: db 114, 101, 115, 116, 111, 114, 101, 32, 102, 114, 97, 109, 101, 0 
s_198: db 114, 101, 116, 117, 114, 110, 0 
s_199: db 114, 111, 116, 0 
s_200: db 115, 101, 116, 32, 98, 111, 111, 108, 101, 97, 110, 32, 118, 97, 108, 117, 101, 0 
s_201: db 115, 101, 116, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 118, 97, 108, 117, 101, 0 
s_202: db 115, 101, 116, 32, 105, 110, 116, 101, 103, 101, 114, 32, 118, 97, 108, 117, 101, 0 
s_203: db 115, 101, 116, 32, 112, 111, 105, 110, 116, 101, 114, 32, 118, 97, 108, 117, 101, 0 
s_204: db 115, 104, 105, 102, 116, 32, 108, 101, 102, 116, 0 
s_205: db 115, 104, 105, 102, 116, 32, 114, 105, 103, 104, 116, 0 
s_206: db 115, 117, 98, 116, 114, 97, 99, 116, 0 
s_207: db 115, 119, 97, 112, 0 
s_208: db 115, 121, 115, 99, 97, 108, 108, 0 
s_209: db 101, 110, 100, 32, 111, 102, 32, 119, 104, 105, 108, 101, 45, 108, 111, 111, 112, 0 
s_210: db 115, 116, 97, 114, 116, 32, 111, 102, 32, 119, 104, 105, 108, 101, 45, 108, 111, 111, 112, 0 
s_211: db 85, 110, 107, 110, 111, 119, 110, 32, 111, 112, 99, 111, 100, 101, 0 
s_212: db 115, 114, 99, 47, 111, 112, 99, 111, 100, 101, 115, 46, 98, 98, 0 
s_213: db 111, 112, 99, 111, 100, 101, 95, 116, 111, 95, 115, 116, 114, 0 
buf__opcode: rb 24 
s_214: db 99, 114, 101, 97, 116, 101, 95, 111, 112, 99, 111, 100, 101, 0 
s_215: db 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 111, 112, 99, 111, 100, 101, 115, 58, 32, 0 
s_216: db 100, 117, 109, 112, 95, 111, 112, 99, 111, 100, 101, 115, 0 
s_217: db 79, 112, 99, 111, 100, 101, 115, 58, 10, 0 
s_218: db 42, 32, 0 
s_219: db 66, 79, 79, 76, 0 
s_220: db 67, 72, 65, 82, 0 
s_221: db 73, 78, 84, 0 
s_222: db 80, 84, 82, 0 
s_223: db 86, 79, 73, 68, 0 
s_224: db 85, 110, 107, 110, 111, 119, 110, 32, 116, 121, 112, 101, 0 
s_225: db 115, 114, 99, 47, 116, 121, 112, 101, 115, 46, 98, 98, 0 
s_226: db 116, 121, 112, 101, 95, 116, 111, 95, 115, 116, 114, 0 
s_227: db 98, 111, 111, 108, 0 
s_228: db 115, 116, 114, 95, 116, 111, 95, 116, 121, 112, 101, 0 
s_229: db 99, 104, 97, 114, 0 
s_230: db 105, 110, 116, 0 
s_231: db 112, 116, 114, 0 
s_232: db 118, 111, 105, 100, 0 
s_233: db 85, 110, 107, 110, 111, 119, 110, 32, 116, 121, 112, 101, 58, 32, 0 
buf__argument: rb 24 
s_234: db 115, 114, 99, 47, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 98, 98, 0 
s_235: db 99, 114, 101, 97, 116, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 0 
s_236: db 102, 117, 110, 99, 116, 105, 111, 110, 95, 97, 100, 100, 95, 97, 114, 103, 117, 109, 101, 110, 116, 0 
s_237: db 102, 117, 110, 99, 116, 105, 111, 110, 95, 103, 101, 116, 95, 97, 114, 103, 0 
s_238: db 102, 117, 110, 99, 116, 105, 111, 110, 95, 103, 101, 116, 95, 97, 114, 103, 95, 111, 102, 102, 115, 101, 116, 0 
s_239: db 83, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 32, 97, 116, 32, 108, 105, 110, 101, 32, 0 
s_240: db 115, 114, 99, 47, 104, 101, 108, 112, 101, 114, 115, 46, 98, 98, 0 
s_241: db 115, 121, 110, 116, 97, 120, 95, 101, 114, 114, 111, 114, 0 
s_242: db 58, 32, 0 
s_243: db 105, 115, 95, 97, 108, 112, 104, 97, 110, 117, 109, 101, 114, 105, 99, 0 
s_244: db 105, 115, 95, 119, 111, 114, 100, 0 
s_245: db 78, 79, 79, 80, 0 
s_246: db 65, 82, 73, 84, 72, 77, 69, 84, 73, 67, 0 
s_247: db 65, 82, 82, 79, 87, 0 
s_248: db 66, 76, 79, 67, 75, 95, 83, 84, 65, 82, 84, 0 
s_249: db 66, 76, 79, 67, 75, 95, 69, 78, 68, 0 
s_250: db 67, 79, 76, 79, 78, 0 
s_251: db 67, 79, 77, 77, 65, 0 
s_252: db 67, 79, 77, 80, 65, 82, 73, 83, 79, 78, 0 
s_253: db 73, 68, 69, 78, 84, 73, 70, 73, 69, 82, 0 
s_254: db 75, 69, 89, 87, 79, 82, 68, 0 
s_255: db 83, 84, 82, 73, 78, 71, 0 
s_256: db 84, 89, 80, 69, 0 
s_257: db 69, 78, 68, 0 
s_258: db 85, 110, 107, 110, 111, 119, 110, 32, 116, 111, 107, 101, 110, 32, 116, 121, 112, 101, 0 
s_259: db 115, 114, 99, 47, 116, 111, 107, 101, 110, 115, 46, 98, 98, 0 
s_260: db 116, 111, 107, 101, 110, 95, 116, 111, 95, 115, 116, 114, 0 
buf__token: rb 24 
s_261: db 99, 114, 101, 97, 116, 101, 95, 116, 111, 107, 101, 110, 0 
s_262: db 78, 117, 109, 98, 101, 114, 32, 111, 102, 32, 116, 111, 107, 101, 110, 115, 58, 32, 0 
s_263: db 100, 117, 109, 112, 95, 116, 111, 107, 101, 110, 115, 0 
s_264: db 84, 111, 107, 101, 110, 115, 58, 10, 0 
buf__indent_stack: rb 8 
buf__at_start: rb 1 
s_265: db 115, 114, 99, 47, 108, 101, 120, 101, 114, 46, 98, 98, 0 
s_266: db 95, 116, 111, 107, 101, 110, 105, 122, 101, 0 
s_267: db 73, 110, 100, 101, 110, 116, 32, 115, 116, 97, 99, 107, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 105, 116, 101, 109, 115, 10, 0 
s_268: db 85, 110, 101, 120, 112, 101, 120, 116, 101, 100, 32, 105, 110, 100, 101, 110, 116, 105, 110, 103, 0 
s_269: db 67, 104, 97, 114, 97, 99, 116, 101, 114, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 97, 32, 115, 105, 110, 103, 108, 101, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 0 
s_270: db 45, 62, 0 
s_271: db 43, 0 
s_272: db 42, 0 
s_273: db 47, 0 
s_274: db 37, 0 
s_275: db 97, 110, 100, 0 
s_276: db 111, 114, 0 
s_277: db 115, 104, 108, 0 
s_278: db 115, 104, 114, 0 
s_279: db 116, 114, 117, 101, 0 
s_280: db 49, 0 
s_281: db 102, 97, 108, 115, 101, 0 
s_282: db 33, 61, 0 
s_283: db 62, 61, 0 
s_284: db 60, 61, 0 
s_285: db 61, 0 
s_286: db 60, 0 
s_287: db 62, 0 
s_288: db 98, 117, 102, 102, 101, 114, 0 
s_289: db 99, 97, 115, 116, 98, 0 
s_290: db 99, 97, 115, 116, 99, 0 
s_291: db 99, 97, 115, 116, 105, 0 
s_292: db 99, 97, 115, 116, 112, 0 
s_293: db 99, 111, 110, 115, 116, 0 
s_294: db 100, 101, 98, 117, 103, 0 
s_295: db 116, 111, 0 
s_296: db 105, 110, 108, 105, 110, 101, 0 
s_297: db 100, 101, 114, 101, 102, 98, 0 
s_298: db 100, 101, 114, 101, 102, 99, 0 
s_299: db 100, 101, 114, 101, 102, 105, 0 
s_300: db 100, 101, 114, 101, 102, 112, 0 
s_301: db 100, 117, 112, 0 
s_302: db 101, 108, 105, 102, 0 
s_303: db 101, 108, 115, 101, 0 
s_304: db 105, 102, 0 
s_305: db 105, 109, 112, 111, 114, 116, 0 
s_306: db 108, 111, 99, 97, 116, 105, 111, 110, 0 
s_307: db 115, 101, 116, 98, 0 
s_308: db 115, 101, 116, 99, 0 
s_309: db 115, 101, 116, 105, 0 
s_310: db 115, 101, 116, 112, 0 
s_311: db 114, 101, 102, 102, 0 
s_312: db 119, 104, 105, 108, 101, 0 
s_313: db 95, 95, 103, 101, 116, 95, 97, 114, 103, 0 
s_314: db 95, 95, 114, 101, 115, 116, 111, 114, 101, 95, 102, 114, 97, 109, 101, 0 
s_315: db 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 58, 32, 0 
s_316: db 116, 111, 107, 101, 110, 105, 122, 101, 0 
buf_functions: rb 8 
buf__if_index: rb 8 
buf__while_index: rb 8 
buf__type_stack: rb 8 
buf__buffers: rb 8 
buf__constants: rb 8 
buf__opcodes: rb 8 
buf__files: rb 8 
buf__current_function: rb 8 
buf__is_inline: rb 1 
s_317: db 115, 114, 99, 47, 112, 97, 114, 115, 101, 114, 46, 98, 98, 0 
s_318: db 95, 99, 117, 114, 114, 101, 110, 116, 95, 102, 117, 110, 99, 116, 105, 111, 110, 95, 99, 111, 110, 116, 97, 105, 110, 115, 95, 97, 114, 103, 0 
s_319: db 95, 112, 101, 101, 107, 95, 110, 101, 120, 116, 95, 116, 111, 107, 101, 110, 0 
s_320: db 95, 103, 101, 116, 95, 110, 101, 120, 116, 95, 116, 111, 107, 101, 110, 0 
s_321: db 95, 112, 117, 115, 104, 95, 116, 121, 112, 101, 0 
s_322: db 78, 111, 116, 32, 101, 110, 111, 117, 103, 104, 32, 118, 97, 108, 117, 101, 115, 32, 111, 110, 32, 116, 104, 101, 32, 115, 116, 97, 99, 107, 0 
s_323: db 95, 112, 111, 112, 95, 116, 121, 112, 101, 0 
s_324: db 95, 112, 111, 112, 95, 97, 114, 103, 115, 0 
s_325: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 0 
s_326: db 32, 97, 115, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 102, 111, 114, 32, 0 
s_327: db 95, 99, 114, 101, 97, 116, 101, 95, 98, 117, 102, 102, 101, 114, 95, 111, 112, 101, 114, 97, 110, 100, 0 
s_328: db 95, 112, 97, 114, 115, 101, 0 
s_329: db 79, 110, 108, 121, 32, 105, 110, 116, 101, 103, 101, 114, 115, 32, 97, 110, 100, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 99, 111, 117, 108, 100, 32, 98, 101, 32, 97, 100, 100, 101, 100, 0 
s_330: db 83, 101, 99, 111, 110, 100, 32, 116, 121, 112, 101, 32, 105, 110, 32, 115, 117, 98, 116, 114, 97, 99, 116, 32, 109, 117, 115, 116, 32, 98, 101, 32, 97, 110, 32, 105, 110, 116, 101, 103, 101, 114, 0 
s_331: db 79, 110, 108, 121, 32, 105, 110, 116, 101, 103, 101, 114, 115, 32, 97, 110, 100, 32, 112, 111, 105, 110, 116, 101, 114, 115, 32, 99, 97, 110, 32, 98, 101, 32, 115, 117, 98, 116, 114, 97, 99, 116, 101, 100, 0 
s_332: db 67, 97, 110, 39, 116, 32, 109, 117, 108, 116, 105, 112, 108, 121, 32, 110, 111, 110, 45, 105, 110, 116, 101, 103, 101, 114, 0 
s_333: db 67, 97, 110, 39, 116, 32, 100, 105, 118, 105, 100, 101, 32, 110, 111, 110, 45, 105, 110, 116, 101, 103, 101, 114, 0 
s_334: db 67, 97, 110, 39, 116, 32, 109, 111, 100, 32, 110, 111, 110, 45, 105, 110, 116, 101, 103, 101, 114, 0 
s_335: db 78, 101, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 115, 32, 111, 114, 32, 98, 111, 111, 108, 101, 97, 110, 115, 32, 102, 111, 114, 32, 98, 105, 116, 119, 105, 115, 101, 32, 97, 110, 100, 0 
s_336: db 66, 105, 116, 119, 105, 115, 101, 32, 97, 110, 100, 32, 110, 101, 101, 100, 115, 32, 116, 119, 111, 32, 115, 105, 109, 105, 108, 97, 114, 32, 116, 121, 112, 101, 115, 32, 97, 115, 32, 105, 110, 112, 117, 116, 0 
s_337: db 78, 101, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 115, 32, 111, 114, 32, 98, 111, 111, 108, 101, 97, 110, 115, 32, 102, 111, 114, 32, 98, 105, 116, 119, 105, 115, 101, 32, 111, 114, 0 
s_338: db 66, 105, 116, 119, 105, 115, 101, 32, 111, 114, 32, 110, 101, 101, 100, 115, 32, 116, 119, 111, 32, 115, 105, 109, 105, 108, 97, 114, 32, 116, 121, 112, 101, 115, 32, 97, 115, 32, 105, 110, 112, 117, 116, 0 
s_339: db 67, 97, 110, 39, 116, 32, 115, 104, 105, 102, 116, 32, 110, 111, 110, 45, 105, 110, 116, 101, 103, 101, 114, 0 
s_340: db 85, 110, 107, 110, 111, 119, 110, 32, 118, 97, 108, 117, 101, 32, 102, 111, 114, 32, 97, 114, 105, 116, 104, 109, 101, 116, 105, 99, 32, 116, 111, 107, 101, 110, 58, 32, 0 
s_341: db 85, 110, 107, 110, 111, 119, 110, 32, 99, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 116, 111, 107, 101, 110, 58, 32, 0 
s_342: db 67, 111, 109, 112, 97, 114, 105, 115, 111, 110, 32, 98, 101, 116, 119, 101, 101, 110, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 116, 121, 112, 101, 115, 0 
s_343: db 83, 116, 97, 99, 107, 58, 32, 0 
s_344: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 97, 102, 116, 101, 114, 32, 105, 109, 112, 111, 114, 116, 32, 107, 101, 121, 119, 111, 114, 100, 0 
s_345: db 46, 98, 98, 0 
s_346: db 84, 104, 101, 32, 108, 111, 99, 97, 116, 105, 111, 110, 32, 107, 101, 121, 119, 111, 114, 100, 32, 105, 115, 32, 110, 111, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 101, 100, 32, 121, 101, 116, 10, 0 
s_347: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 97, 115, 32, 98, 117, 102, 102, 101, 114, 32, 110, 97, 109, 101, 0 
s_348: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 97, 115, 32, 98, 117, 102, 102, 101, 114, 32, 115, 105, 122, 101, 0 
s_349: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 97, 115, 32, 99, 111, 110, 115, 116, 32, 107, 101, 121, 0 
s_350: db 85, 110, 107, 110, 111, 119, 110, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 58, 32, 0 
s_351: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 97, 115, 32, 99, 111, 110, 115, 116, 32, 118, 97, 108, 117, 101, 0 
s_352: db 78, 101, 101, 100, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 100, 101, 114, 101, 102, 101, 114, 101, 110, 99, 101, 0 
s_353: db 78, 101, 101, 100, 32, 112, 111, 105, 110, 116, 101, 114, 32, 116, 111, 32, 115, 101, 116, 0 
s_354: db 78, 101, 101, 100, 32, 98, 111, 111, 108, 101, 97, 110, 32, 116, 111, 32, 115, 101, 116, 0 
s_355: db 78, 101, 101, 100, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 32, 116, 111, 32, 115, 101, 116, 0 
s_356: db 78, 101, 101, 100, 32, 105, 110, 116, 101, 103, 101, 114, 32, 116, 111, 32, 115, 101, 116, 0 
s_357: db 95, 95, 103, 101, 116, 95, 97, 114, 103, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 112, 111, 115, 105, 116, 105, 111, 110, 0 
s_358: db 95, 95, 103, 101, 116, 95, 97, 114, 103, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 116, 121, 112, 101, 0 
s_359: db 85, 110, 107, 110, 111, 119, 110, 32, 116, 121, 112, 101, 32, 102, 111, 114, 32, 95, 95, 103, 101, 116, 95, 97, 114, 103, 10, 0 
s_360: db 83, 121, 115, 99, 97, 108, 108, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 99, 111, 117, 110, 116, 0 
s_361: db 114, 101, 102, 102, 32, 105, 115, 32, 109, 105, 115, 115, 105, 110, 103, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 0 
s_362: db 85, 110, 107, 110, 111, 119, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 58, 32, 0 
s_363: db 119, 104, 105, 108, 101, 95, 0 
s_364: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 98, 111, 111, 108, 101, 97, 110, 32, 114, 101, 115, 117, 108, 116, 0 
s_365: db 87, 104, 105, 108, 101, 32, 98, 111, 100, 121, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 32, 116, 121, 112, 101, 115, 0 
s_366: db 101, 110, 100, 95, 0 
s_367: db 105, 102, 95, 0 
s_368: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 100, 101, 32, 98, 108, 111, 99, 107, 32, 97, 102, 116, 101, 114, 32, 105, 102, 32, 107, 101, 121, 119, 111, 114, 100, 0 
s_369: db 101, 108, 105, 102, 95, 0 
s_370: db 101, 108, 105, 102, 45, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 99, 104, 97, 110, 103, 101, 32, 116, 121, 112, 101, 115, 0 
s_371: db 101, 108, 105, 102, 45, 98, 111, 100, 121, 32, 104, 97, 115, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 115, 116, 97, 99, 107, 32, 116, 104, 97, 110, 32, 105, 102, 0 
s_372: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 100, 101, 32, 98, 108, 111, 99, 107, 32, 97, 102, 116, 101, 114, 32, 101, 108, 115, 101, 32, 107, 101, 121, 119, 111, 114, 100, 0 
s_373: db 32, 118, 115, 32, 0 
s_374: db 101, 108, 115, 101, 45, 98, 111, 100, 121, 32, 104, 97, 115, 32, 100, 105, 102, 102, 101, 114, 101, 110, 116, 32, 115, 116, 97, 99, 107, 32, 116, 104, 97, 110, 32, 105, 102, 0 
s_375: db 73, 102, 32, 98, 108, 111, 99, 107, 32, 119, 105, 116, 104, 111, 117, 116, 32, 101, 108, 115, 101, 32, 115, 104, 111, 117, 108, 100, 32, 110, 111, 116, 32, 97, 108, 116, 101, 114, 32, 116, 121, 112, 101, 115, 0 
s_376: db 67, 97, 110, 39, 116, 32, 100, 101, 102, 105, 110, 101, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 105, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 0 
s_377: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 97, 115, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 0 
s_378: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 108, 111, 110, 32, 97, 102, 116, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 110, 97, 109, 101, 0 
s_379: db 102, 110, 95, 0 
s_380: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 116, 121, 112, 101, 32, 105, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0 
s_381: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 105, 100, 101, 110, 116, 105, 102, 105, 101, 114, 32, 97, 102, 116, 101, 114, 32, 116, 121, 112, 101, 0 
s_382: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 109, 109, 97, 32, 111, 114, 32, 97, 114, 114, 111, 119, 32, 97, 102, 116, 101, 114, 32, 97, 114, 103, 117, 109, 101, 110, 116, 40, 115, 41, 0 
s_383: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 114, 101, 116, 117, 114, 110, 32, 116, 121, 112, 101, 32, 105, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0 
s_384: db 69, 120, 112, 101, 99, 116, 101, 100, 32, 99, 111, 100, 101, 32, 98, 108, 111, 99, 107, 32, 97, 102, 116, 101, 114, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 100, 101, 102, 105, 110, 105, 116, 105, 111, 110, 0 
s_385: db 70, 117, 110, 99, 116, 105, 111, 110, 32, 0 
s_386: db 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 32, 116, 121, 112, 101, 0 
s_387: db 85, 110, 107, 110, 111, 119, 110, 32, 107, 101, 121, 119, 111, 114, 100, 58, 32, 0 
s_388: db 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 116, 121, 112, 101, 0 
s_389: db 71, 108, 111, 98, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 99, 97, 108, 108, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 115, 117, 112, 112, 111, 114, 116, 101, 100, 0 
s_390: db 85, 110, 107, 110, 111, 119, 110, 32, 116, 111, 107, 101, 110, 32, 116, 121, 112, 101, 58, 32, 0 
s_391: db 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 111, 102, 32, 102, 105, 108, 101, 0 
s_392: db 76, 97, 115, 116, 32, 116, 111, 107, 101, 110, 32, 115, 104, 111, 117, 108, 100, 32, 98, 101, 32, 114, 101, 116, 117, 114, 110, 95, 111, 110, 0 
s_393: db 95, 112, 97, 114, 115, 101, 95, 99, 111, 114, 101, 95, 102, 117, 110, 99, 116, 105, 111, 110, 115, 0 
s_394: db 112, 97, 114, 115, 101, 0 
s_395: db 115, 116, 97, 114, 116, 0 
s_396: db 67, 111, 109, 112, 105, 108, 97, 116, 105, 111, 110, 32, 101, 114, 114, 111, 114, 58, 32, 80, 114, 111, 103, 114, 97, 109, 32, 114, 101, 113, 117, 105, 114, 101, 115, 32, 96, 115, 116, 97, 114, 116, 96, 32, 102, 117, 110, 99, 116, 105, 111, 110, 10, 0 
buf__text: rb 8 
buf__data: rb 8 
buf__string_index: rb 8 
buf__textbuffer: rb 8 
buf__string_labels: rb 8 
buf__format_buffer: rb 1024 
s_397: db 115, 114, 99, 47, 103, 101, 110, 101, 114, 97, 116, 111, 114, 46, 98, 98, 0 
s_398: db 95, 102, 111, 114, 109, 97, 116, 0 
s_399: db 95, 97, 112, 112, 101, 110, 100, 0 
s_400: db 95, 97, 112, 112, 101, 110, 100, 95, 111, 112, 99, 111, 100, 101, 95, 105, 110, 102, 111, 0 
s_401: db 59, 32, 0 
s_402: db 103, 101, 110, 101, 114, 97, 116, 101, 95, 99, 111, 100, 101, 95, 120, 56, 54, 95, 54, 52, 95, 108, 105, 110, 117, 120, 0 
s_403: db 102, 111, 114, 109, 97, 116, 32, 69, 76, 70, 54, 52, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 0 
s_404: db 115, 101, 103, 109, 101, 110, 116, 32, 114, 101, 97, 100, 97, 98, 108, 101, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 0 
s_405: db 101, 110, 116, 114, 121, 32, 95, 115, 116, 97, 114, 116, 0 
s_406: db 115, 101, 103, 109, 101, 110, 116, 32, 114, 101, 97, 100, 97, 98, 108, 101, 32, 119, 114, 105, 116, 101, 97, 98, 108, 101, 0 
s_407: db 112, 111, 112, 32, 114, 97, 120, 0 
s_408: db 112, 117, 115, 104, 32, 114, 97, 120, 0 
s_409: db 112, 111, 112, 32, 114, 98, 120, 0 
s_410: db 112, 117, 115, 104, 32, 114, 98, 120, 0 
s_411: db 112, 111, 112, 32, 114, 99, 120, 0 
s_412: db 112, 117, 115, 104, 32, 114, 99, 120, 0 
s_413: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 0 
s_414: db 115, 95, 0 
s_415: db 58, 32, 100, 98, 32, 0 
s_416: db 44, 32, 0 
s_417: db 49, 48, 0 
s_418: db 49, 51, 0 
s_419: db 57, 50, 0 
s_420: db 51, 52, 0 
s_421: db 85, 110, 107, 110, 111, 119, 110, 32, 101, 115, 99, 97, 112, 101, 32, 115, 101, 113, 117, 101, 110, 99, 101, 0 
s_422: db 44, 32, 48, 0 
s_423: db 83, 116, 114, 105, 110, 103, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 108, 97, 98, 101, 108, 0 
s_424: db 58, 0 
s_425: db 112, 117, 115, 104, 32, 114, 98, 112, 0 
s_426: db 109, 111, 118, 32, 114, 98, 112, 44, 32, 114, 115, 112, 0 
s_427: db 99, 97, 108, 108, 32, 102, 110, 95, 0 
s_428: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 114, 98, 112, 0 
s_429: db 97, 100, 100, 32, 114, 97, 120, 44, 32, 0 
s_430: db 109, 111, 118, 32, 114, 98, 120, 44, 32, 91, 114, 97, 120, 93, 0 
s_431: db 97, 100, 100, 32, 114, 98, 120, 44, 32, 114, 97, 120, 0 
s_432: db 115, 117, 98, 32, 114, 98, 120, 44, 32, 114, 97, 120, 0 
s_433: db 105, 109, 117, 108, 32, 114, 98, 120, 44, 32, 114, 97, 120, 0 
s_434: db 120, 111, 114, 32, 114, 100, 120, 44, 32, 114, 100, 120, 0 
s_435: db 100, 105, 118, 32, 114, 98, 120, 0 
s_436: db 112, 117, 115, 104, 32, 114, 100, 120, 0 
s_437: db 109, 111, 118, 32, 114, 115, 112, 44, 32, 114, 98, 112, 0 
s_438: db 112, 111, 112, 32, 114, 98, 112, 0 
s_439: db 114, 101, 116, 0 
s_440: db 97, 110, 100, 32, 114, 98, 120, 44, 32, 114, 97, 120, 0 
s_441: db 111, 114, 32, 114, 98, 120, 44, 32, 114, 97, 120, 0 
s_442: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 98, 117, 102, 95, 0 
s_443: db 98, 117, 102, 95, 0 
s_444: db 58, 32, 114, 98, 32, 0 
s_445: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 48, 0 
s_446: db 109, 111, 118, 32, 114, 98, 120, 44, 32, 49, 0 
s_447: db 112, 111, 112, 32, 114, 100, 120, 0 
s_448: db 99, 109, 112, 32, 114, 100, 120, 44, 32, 114, 99, 120, 0 
s_449: db 99, 109, 111, 118, 101, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_450: db 99, 109, 111, 118, 110, 101, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_451: db 99, 109, 111, 118, 103, 101, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_452: db 99, 109, 111, 118, 103, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_453: db 99, 109, 111, 118, 108, 101, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_454: db 99, 109, 111, 118, 108, 32, 114, 97, 120, 44, 32, 114, 98, 120, 0 
s_455: db 116, 101, 115, 116, 32, 114, 97, 120, 44, 32, 114, 97, 120, 0 
s_456: db 106, 122, 32, 0 
s_457: db 106, 109, 112, 32, 0 
s_458: db 83, 121, 115, 99, 97, 108, 108, 32, 115, 104, 111, 117, 108, 100, 32, 104, 97, 118, 101, 32, 49, 45, 54, 32, 97, 114, 103, 117, 109, 101, 110, 116, 115, 0 
s_459: db 112, 111, 112, 32, 114, 57, 0 
s_460: db 112, 111, 112, 32, 114, 56, 0 
s_461: db 112, 111, 112, 32, 114, 49, 48, 0 
s_462: db 112, 111, 112, 32, 114, 115, 105, 0 
s_463: db 112, 111, 112, 32, 114, 100, 105, 0 
s_464: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 102, 110, 95, 0 
s_465: db 120, 111, 114, 32, 114, 98, 120, 44, 32, 114, 98, 120, 0 
s_466: db 109, 111, 118, 32, 98, 108, 44, 32, 91, 114, 97, 120, 93, 0 
s_467: db 109, 111, 118, 32, 91, 114, 97, 120, 93, 44, 32, 98, 108, 0 
s_468: db 109, 111, 118, 32, 91, 114, 97, 120, 93, 44, 32, 114, 98, 120, 0 
s_469: db 115, 104, 108, 32, 114, 97, 120, 44, 32, 99, 108, 0 
s_470: db 115, 104, 114, 32, 114, 97, 120, 44, 32, 99, 108, 0 
s_471: db 95, 101, 110, 100, 0 
s_472: db 95, 101, 110, 100, 58, 0 
s_473: db 85, 110, 107, 110, 111, 119, 110, 32, 111, 112, 99, 111, 100, 101, 58, 32, 0 
s_474: db 95, 115, 116, 97, 114, 116, 58, 0 
s_475: db 120, 111, 114, 32, 114, 97, 120, 44, 32, 114, 97, 120, 0 
s_476: db 99, 97, 108, 108, 32, 102, 110, 95, 115, 116, 97, 114, 116, 0 
s_477: db 109, 111, 118, 32, 114, 100, 105, 44, 32, 114, 97, 120, 0 
s_478: db 109, 111, 118, 32, 114, 97, 120, 44, 32, 54, 48, 0 
buf_SHOULD_RUN: rb 1 
buf_DUMP_TOKENS: rb 1 
buf_DUMP_OPCODES: rb 1 
buf_ENABLE_PROFILER: rb 1 
buf_FORMAT: rb 8 
buf_KEEP_ASSEMBLY: rb 1 
buf_VERBOSE: rb 1 
buf_input_file: rb 8 
s_479: db 98, 111, 98, 97, 46, 98, 98, 0 
s_480: db 112, 97, 114, 115, 101, 95, 97, 114, 103, 117, 109, 101, 110, 116, 115, 0 
s_481: db 45, 114, 0 
s_482: db 82, 117, 110, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 101, 120, 101, 99, 117, 116, 97, 98, 108, 101, 0 
s_483: db 45, 102, 0 
s_484: db 83, 101, 116, 32, 116, 104, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 111, 114, 109, 97, 116, 32, 40, 100, 101, 102, 97, 117, 108, 116, 58, 32, 108, 105, 110, 117, 120, 95, 120, 56, 54, 95, 54, 52, 41, 0 
s_485: db 45, 112, 0 
s_486: db 69, 110, 97, 98, 108, 101, 32, 116, 104, 101, 32, 112, 114, 111, 102, 105, 108, 101, 114, 0 
s_487: db 45, 118, 0 
s_488: db 80, 114, 105, 110, 116, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 108, 111, 103, 115, 0 
s_489: db 45, 45, 118, 101, 114, 105, 102, 121, 45, 109, 101, 109, 111, 114, 121, 0 
s_490: db 86, 101, 114, 105, 102, 121, 32, 116, 104, 101, 32, 100, 121, 110, 97, 109, 105, 99, 97, 108, 108, 121, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 109, 101, 109, 111, 114, 121, 0 
s_491: db 45, 45, 100, 117, 109, 112, 45, 109, 101, 109, 111, 114, 121, 0 
s_492: db 80, 114, 105, 110, 116, 32, 116, 104, 101, 32, 100, 121, 110, 97, 109, 105, 99, 97, 108, 108, 121, 32, 97, 108, 108, 111, 99, 97, 116, 101, 100, 32, 109, 101, 109, 111, 114, 121, 0 
s_493: db 45, 45, 100, 117, 109, 112, 45, 116, 111, 107, 101, 110, 115, 0 
s_494: db 80, 114, 105, 110, 116, 32, 116, 104, 101, 32, 116, 111, 107, 101, 110, 115, 0 
s_495: db 45, 45, 100, 117, 109, 112, 45, 111, 112, 99, 111, 100, 101, 115, 0 
s_496: db 80, 114, 105, 110, 116, 32, 116, 104, 101, 32, 111, 112, 99, 111, 100, 101, 115, 0 
s_497: db 45, 97, 0 
s_498: db 75, 101, 101, 112, 32, 116, 104, 101, 32, 103, 101, 110, 101, 114, 97, 116, 101, 100, 32, 97, 115, 115, 101, 109, 98, 108, 121, 32, 99, 111, 100, 101, 0 
s_499: db 102, 105, 108, 101, 110, 97, 109, 101, 0 
s_500: db 83, 111, 117, 114, 99, 101, 32, 99, 111, 100, 101, 32, 102, 105, 108, 101, 110, 97, 109, 101, 0 
s_501: db 91, 67, 77, 68, 93, 32, 0 
s_502: db 108, 111, 103, 95, 99, 109, 100, 0 
s_503: db 91, 73, 78, 70, 79, 93, 32, 67, 111, 109, 112, 105, 108, 105, 110, 103, 32, 0 
s_504: db 46, 97, 115, 109, 0 
s_505: db 91, 73, 78, 70, 79, 93, 32, 71, 101, 110, 101, 114, 97, 116, 105, 110, 103, 32, 0 
s_506: db 47, 117, 115, 114, 47, 98, 105, 110, 47, 114, 109, 0 
s_507: db 114, 109, 0 
s_508: db 47, 117, 115, 114, 47, 98, 105, 110, 47, 102, 97, 115, 109, 0 
s_509: db 102, 97, 115, 109, 0 
s_510: db 46, 47, 0 
s_511: db 85, 110, 107, 110, 111, 119, 110, 32, 102, 111, 114, 109, 97, 116, 10, 0 
